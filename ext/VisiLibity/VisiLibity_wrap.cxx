/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGRUBY


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



#include <ruby.h>

/* Remove global macros defined in Ruby's win32.h */
#ifdef write
# undef write
#endif
#ifdef read
# undef read
#endif
#ifdef bind
# undef bind
#endif


/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RSTRING_END
# define RSTRING_END(x) (RSTRING_PTR(x) + RSTRING_LEN(x))
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif
#ifndef RFLOAT_VALUE
# define RFLOAT_VALUE(x) RFLOAT(x)->value
#endif
#ifndef DOUBLE2NUM
# define DOUBLE2NUM(x) rb_float_new(x)
#endif
#ifndef RHASH_TBL
# define RHASH_TBL(x) (RHASH(x)->tbl)
#endif
#ifndef RHASH_ITER_LEV
# define RHASH_ITER_LEV(x) (RHASH(x)->iter_lev)
#endif
#ifndef RHASH_IFNONE
# define RHASH_IFNONE(x) (RHASH(x)->ifnone)
#endif
#ifndef RHASH_SIZE
# define RHASH_SIZE(x) (RHASH(x)->tbl->num_entries)
#endif
#ifndef RHASH_EMPTY_P
# define RHASH_EMPTY_P(x) (RHASH_SIZE(x) == 0)
#endif
#ifndef RSTRUCT_LEN
# define RSTRUCT_LEN(x) RSTRUCT(x)->len
#endif
#ifndef RSTRUCT_PTR
# define RSTRUCT_PTR(x) RSTRUCT(x)->ptr
#endif



/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

static VALUE _mSWIG = Qnil;

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a funtion in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE 
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
} 

SWIGINTERN VALUE 
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
} 


SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}


/* This function is called when a user inputs a wrong argument to
   a method.
 */
SWIGINTERN 
const char* Ruby_Format_TypeError( const char* msg,
				   const char* type, 
				   const char* name, 
				   const int argn,
				   VALUE input )
{
  char buf[128];
  VALUE str;
  VALUE asStr;
  if ( msg && *msg )
    {
      str = rb_str_new2(msg);
    }
  else
    {
      str = rb_str_new(NULL, 0);
    }

  str = rb_str_cat2( str, "Expected argument " );
  sprintf( buf, "%d of type ", argn-1 );
  str = rb_str_cat2( str, buf );
  str = rb_str_cat2( str, type );
  str = rb_str_cat2( str, ", but got " );
  str = rb_str_cat2( str, rb_obj_classname(input) );
  str = rb_str_cat2( str, " " );
  asStr = rb_inspect(input);
  if ( RSTRING_LEN(asStr) > 30 )
    {
      str = rb_str_cat( str, StringValuePtr(asStr), 30 );
      str = rb_str_cat2( str, "..." );
    }
  else
    {
      str = rb_str_append( str, asStr );
    }

  if ( name )
    {
      str = rb_str_cat2( str, "\n\tin SWIG method '" );
      str = rb_str_cat2( str, name );
      str = rb_str_cat2( str, "'" );
    }

  return StringValuePtr( str );
}

/* This function is called when an overloaded method fails */
SWIGINTERN 
void Ruby_Format_OverloadedError(
				 const int argc,
				 const int maxargs,
				 const char* method, 
				 const char* prototypes 
				 )
{
  const char* msg = "Wrong # of arguments";
  if ( argc <= maxargs ) msg = "Wrong arguments";
  rb_raise(rb_eArgError,"%s for overloaded method '%s'.\n"  
	   "Possible C/C++ prototypes are:\n%s",
	   msg, method, prototypes);
}

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from 
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* Ruby 1.8 actually assumes the first case. */
#if SIZEOF_VOIDP == SIZEOF_LONG
#  define SWIG2NUM(v) LONG2NUM((unsigned long)v)
#  define NUM2SWIG(x) (unsigned long)NUM2LONG(x)
#elif SIZEOF_VOIDP == SIZEOF_LONG_LONG
#  define SWIG2NUM(v) LL2NUM((unsigned long long)v)
#  define NUM2SWIG(x) (unsigned long long)NUM2LL(x)
#else
#  error sizeof(void*) is not the same as long or long long
#endif


/* Global Ruby hash table to store Trackings from C/C++
   structs to Ruby Objects. 
*/
static VALUE swig_ruby_trackings = Qnil;

/* Global variable that stores a reference to the ruby
   hash table delete function. */
static ID swig_ruby_hash_delete;

/* Setup a Ruby hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a ruby hash table to store Trackings from C++ 
     objects to Ruby objects. */

  /* Try to see if some other .so has already created a 
     tracking hash table, which we keep hidden in an instance var
     in the SWIG module.
     This is done to allow multiple DSOs to share the same
     tracking table.
  */
  ID trackings_id = rb_intern( "@__trackings__" );
  VALUE verbose = rb_gv_get("VERBOSE");
  rb_gv_set("VERBOSE", Qfalse);
  swig_ruby_trackings = rb_ivar_get( _mSWIG, trackings_id );
  rb_gv_set("VERBOSE", verbose);

  /* No, it hasn't.  Create one ourselves */ 
  if ( swig_ruby_trackings == Qnil )
    {
      swig_ruby_trackings = rb_hash_new();
      rb_ivar_set( _mSWIG, trackings_id, swig_ruby_trackings );
    }

  /* Now store a reference to the hash table delete function
     so that we only have to look it up once.*/
  swig_ruby_hash_delete = rb_intern("delete");
}

/* Get a Ruby number to reference a pointer */
SWIGRUNTIME VALUE SWIG_RubyPtrToReference(void* ptr) {
  /* We cast the pointer to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the pointer to a Ruby number */
  return SWIG2NUM(ptr);
}

/* Get a Ruby number to reference an object */
SWIGRUNTIME VALUE SWIG_RubyObjectToReference(VALUE object) {
  /* We cast the object to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the Object to a Ruby number */
  return SWIG2NUM(object);
}

/* Get a Ruby object from a previously stored reference */
SWIGRUNTIME VALUE SWIG_RubyReferenceToObject(VALUE reference) {
  /* The provided Ruby number object is a reference
     to the Ruby object we want.*/

  /* Convert the Ruby number to a Ruby object */
  return NUM2SWIG(reference);
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* In a Ruby hash table we store the pointer and
     the associated Ruby object.  The trick here is
     that we cannot store the Ruby object directly - if
     we do then it cannot be garbage collected.  So
     instead we typecast it as a unsigned long and
     convert it to a Ruby number object.*/

  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Get a reference to the Ruby object as a Ruby number */
  VALUE value = SWIG_RubyObjectToReference(object);

  /* Store the mapping to the global hash table. */
  rb_hash_aset(swig_ruby_trackings, key, value);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Now lookup the value stored in the global hash table */
  VALUE value = rb_hash_aref(swig_ruby_trackings, key);
	
  if (value == Qnil) {
    /* No object exists - return nil. */
    return Qnil;
  }
  else {
    /* Convert this value to Ruby object */
    return SWIG_RubyReferenceToObject(value);
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Delete the object from the hash table by calling Ruby's
     do this we need to call the Hash.delete method.*/
  rb_funcall(swig_ruby_trackings, swig_ruby_hash_delete, 1, key);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    DATA_PTR(object) = 0;
  }
}


#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

/* For ruby1.8.4 and earlier. */
#ifndef RUBY_INIT_STACK
   RUBY_EXTERN void Init_stack(VALUE* addr);
#  define RUBY_INIT_STACK \
   VALUE variable_in_this_stack_frame; \
   Init_stack(&variable_in_this_stack_frame);
#endif


#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule()	
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)               
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), msg)
#define SWIG_fail                        		goto fail				 


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()              
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)		  
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)	  

#include "assert.h"

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


/* Global pointer used to keep some internal SWIG stuff */
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Global IDs used to keep some internal SWIG stuff */
static ID swig_arity_id = 0;
static ID swig_call_id  = 0;

/*
  If your swig extension is to be run within an embedded ruby and has
  director callbacks, you should set -DRUBY_EMBEDDED during compilation.  
  This will reset ruby's stack frame on each entry point from the main 
  program the first time a virtual director function is invoked (in a 
  non-recursive way).
  If this is not done, you run the risk of Ruby trashing the stack.
*/

#ifdef RUBY_EMBEDDED

#  define SWIG_INIT_STACK                            \
      if ( !swig_virtual_calls ) { RUBY_INIT_STACK } \
      ++swig_virtual_calls;
#  define SWIG_RELEASE_STACK --swig_virtual_calls;
#  define Ruby_DirectorTypeMismatchException(x) \
          rb_raise( rb_eTypeError, x ); return c_result;

      static unsigned int swig_virtual_calls = 0;

#else  /* normal non-embedded extension */

#  define SWIG_INIT_STACK
#  define SWIG_RELEASE_STACK
#  define Ruby_DirectorTypeMismatchException(x) \
          throw Swig::DirectorTypeMismatchException( x );

#endif  /* RUBY_EMBEDDED */


SWIGRUNTIME VALUE 
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
} 

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  }  else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
    swig_call_id  = rb_intern("call");
    swig_arity_id = rb_intern("arity");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  VALUE klass;
  char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
  sprintf(klass_name, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  klass = rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN; 
  int track;
  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;
  
  if (!ptr)
    return Qnil;
  
  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;
		
    /* Are we tracking this class and have we already returned this Ruby object? */
    track = sklass->trackObjects;
    if (track) {
      obj = SWIG_RubyInstanceFor(ptr);
      
      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like 
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "@__swigtype__");
        char* type_name = RSTRING_PTR(value);
				
        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), 
			   ( own ? VOIDFUNC(sklass->destroy) : 
			     (track ? VOIDFUNC(SWIG_RubyRemoveTracking) : 0 )
			     ), ptr);

    /* If tracking is on for this class then track this object. */
    if (track) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  
  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "@__swigtype__");
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef void (*ruby_owntype)(void*);

SWIGRUNTIME ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, ruby_owntype own) {
  if (obj) {
    ruby_owntype oldown = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own;
    return oldown;
  } else {
    return 0;
  }
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    *ptr = 0;
    return SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }
  
  if (own) *own = RDATA(obj)->dfree;
    
  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }
		
    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference 
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
      if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
        if (vptr == 0) {
          /* The object has already been deleted */
          return SWIG_ObjectPreviouslyDeletedError;
        }
        *ptr = vptr;
        return SWIG_OK;
      }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    } else {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc, vptr, &newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  } else {
    *ptr = vptr;
  }
  
  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void)
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);
  
  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void 
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

/* This function can be used to check whether a proc or method or similarly
   callable function has been passed.  Usually used in a %typecheck, like:

   %typecheck(c_callback_t, precedence=SWIG_TYPECHECK_POINTER) {
        $result = SWIG_Ruby_isCallable( $input );
   }
 */
SWIGINTERN
int SWIG_Ruby_isCallable( VALUE proc )
{
  if ( rb_respond_to( proc, swig_call_id ) == Qtrue )
    return 1;
  return 0;
}

/* This function can be used to check the arity (number of arguments)
   a proc or method can take.  Usually used in a %typecheck.
   Valid arities will be that equal to minimal or those < 0
   which indicate a variable number of parameters at the end.
 */
SWIGINTERN
int SWIG_Ruby_arity( VALUE proc, int minimal )
{
  if ( rb_respond_to( proc, swig_arity_id ) == Qtrue )
    {
      VALUE num = rb_funcall( proc, swig_arity_id, 0 );
      int arity = NUM2INT(num);
      if ( arity < 0 && (arity+1) < -minimal ) return 1;
      if ( arity == minimal ) return 1;
      return 1;
    }
  return 0;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg);; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_VisiLibity__Angle swig_types[0]
#define SWIGTYPE_p_VisiLibity__Bounding_Box swig_types[1]
#define SWIGTYPE_p_VisiLibity__Environment swig_types[2]
#define SWIGTYPE_p_VisiLibity__Guards swig_types[3]
#define SWIGTYPE_p_VisiLibity__Line_Segment swig_types[4]
#define SWIGTYPE_p_VisiLibity__Point swig_types[5]
#define SWIGTYPE_p_VisiLibity__Polar_Point swig_types[6]
#define SWIGTYPE_p_VisiLibity__Polygon swig_types[7]
#define SWIGTYPE_p_VisiLibity__Polyline swig_types[8]
#define SWIGTYPE_p_VisiLibity__Ray swig_types[9]
#define SWIGTYPE_p_VisiLibity__Visibility_Graph swig_types[10]
#define SWIGTYPE_p_VisiLibity__Visibility_Polygon swig_types[11]
#define SWIGTYPE_p_allocator_type swig_types[12]
#define SWIGTYPE_p_bool swig_types[13]
#define SWIGTYPE_p_char swig_types[14]
#define SWIGTYPE_p_difference_type swig_types[15]
#define SWIGTYPE_p_p_void swig_types[16]
#define SWIGTYPE_p_size_type swig_types[17]
#define SWIGTYPE_p_std__ostream swig_types[18]
#define SWIGTYPE_p_std__vectorT_VisiLibity__Line_Segment_std__allocatorT_VisiLibity__Line_Segment_t_t swig_types[19]
#define SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t swig_types[20]
#define SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__allocator_type swig_types[21]
#define SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__value_type swig_types[22]
#define SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t swig_types[23]
#define SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__allocator_type swig_types[24]
#define SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__value_type swig_types[25]
#define SWIGTYPE_p_swig__ConstIterator swig_types[26]
#define SWIGTYPE_p_swig__GC_VALUE swig_types[27]
#define SWIGTYPE_p_swig__Iterator swig_types[28]
#define SWIGTYPE_p_value_type swig_types[29]
static swig_type_info *swig_types[31];
static swig_module_info swig_module = {swig_types, 30, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_VisiLibity
#define SWIG_name    "VisiLibity"

static VALUE mVisiLibity;

#define SWIG_RUBY_THREAD_BEGIN_BLOCK
#define SWIG_RUBY_THREAD_END_BLOCK


#define SWIGVERSION 0x010339 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#define Init_VisiLibity Init_VisiLibity_native


#include "visilibity.hpp"


#include <iostream>


#include <stdexcept>


namespace swig {
  class GC_VALUE {
  protected:
    // Hash of all GC_VALUE's currently in use
    static VALUE _hash;

    VALUE  _obj;

    static ID hash_id;
    static ID   lt_id;
    static ID   gt_id;
    static ID   eq_id;
    static ID   le_id;
    static ID   ge_id;

    static ID  pos_id;
    static ID  neg_id;
    static ID  inv_id;

    static ID  add_id;
    static ID  sub_id;
    static ID  mul_id;
    static ID  div_id;
    static ID  mod_id;

    static ID  and_id;
    static ID   or_id;
    static ID  xor_id;

    static ID  lshift_id;
    static ID  rshift_id;

    struct OpArgs
    {
      VALUE src;
      ID    id;
      int   nargs;
      VALUE target;
    };


  public:
    static void initialize()
    {
      if ( _hash == Qnil ) 
	{ 
	  _hash = rb_hash_new();
	  rb_gc_register_address( &_hash );
	}
    }

    // this function is never called.  Provided for symmetry only.
    static void cleanup()
    {
      rb_gc_unregister_address( &_hash );
    }

    GC_VALUE() : _obj( Qnil )
    {
    }

    GC_VALUE(const GC_VALUE& item) : _obj(item._obj)
    {
      GC_register();
    }
    
    GC_VALUE(VALUE obj) :_obj(obj)
    {
      GC_register();
    }
    
    ~GC_VALUE() 
    {
      GC_unregister();
    }
    
    GC_VALUE & operator=(const GC_VALUE& item) 
    {
      GC_unregister();
      _obj = item._obj;
      GC_register();
      return *this;
    }

    void GC_register()
    {
      if ( FIXNUM_P(_obj) || SPECIAL_CONST_P(_obj) || SYMBOL_P(_obj) ) 
	return;
      VALUE val = rb_hash_aref( _hash, _obj );
      unsigned n = FIXNUM_P(val) ? NUM2UINT(val) : 0;
      ++n;
      rb_hash_aset( _hash, _obj, INT2NUM(n) );
    }

    void GC_unregister()
    {
      if ( FIXNUM_P(_obj) || SPECIAL_CONST_P(_obj) || SYMBOL_P(_obj) ) 
	return;
      // this test should not be needed but I've noticed some very erratic
      // behavior of none being unregistered in some very rare situations.
      if ( BUILTIN_TYPE(_obj) == T_NONE ) return;

      VALUE val = rb_hash_aref( _hash, _obj );
      unsigned n = FIXNUM_P(val) ? NUM2UINT(val) : 1;
      --n;
      if ( n )
	rb_hash_aset( _hash, _obj, INT2NUM(n) );
      else
	rb_hash_delete( _hash, _obj );
    }
    
    operator VALUE() const
    {
      return _obj;
    }

    VALUE inspect() const
    {
      return rb_inspect(_obj);
    }

    VALUE to_s() const
    {
      return rb_inspect(_obj);
    }

    static VALUE swig_protect_funcall( VALUE p )
    {
      OpArgs* args = (OpArgs*) p;
      return rb_funcall( args->src, args->id, args->nargs, args->target );
    }


#define GC_VALUE_CMP( op_id, op, cmp, cmpval ) \
    bool op( const GC_VALUE& other ) const \
    { \
      if ( FIXNUM_P(_obj) && FIXNUM_P(other._obj) ) \
      { \
	return _obj cmp other._obj; \
      } \
      bool  res = false; \
      VALUE ret = Qnil; \
      SWIG_RUBY_THREAD_BEGIN_BLOCK; \
      if ( rb_respond_to( _obj, op_id ) == Qtrue ) \
	{ \
	  int status; \
	  OpArgs  args; \
          args.src    = _obj; \
	  args.id     = op_id; \
	  args.nargs  = 1; \
	  args.target = VALUE(other); \
	  ret = rb_protect( PROTECTFUNC(swig_protect_funcall), \
                            VALUE(&args), &status ); \
	} \
      if ( ret == Qnil ) { \
	VALUE a = rb_funcall(         _obj, hash_id, 0 ); \
	VALUE b = rb_funcall( VALUE(other), hash_id, 0 ); \
	res = a cmp b; \
      } \
      else \
	{ \
	  res = RTEST( ret ); \
	} \
      SWIG_RUBY_THREAD_END_BLOCK; \
      return res; \
    }


    GC_VALUE_CMP( eq_id, operator==, ==, == 0 )
    GC_VALUE_CMP( lt_id, operator<,  < , <  0 )
    GC_VALUE_CMP( le_id, operator<=, <=, <= 0 )
    GC_VALUE_CMP( gt_id, operator>,  > , >  0 )
    GC_VALUE_CMP( ge_id, operator>=, >=, >= 0 )
#undef GC_VALUE_CMP

    bool operator!=( const GC_VALUE& other )
    {
      return !(this->operator==(other));
    }

#define GC_VALUE_UNARY( proc_id, op ) \
    GC_VALUE op() const \
    { \
      VALUE ret = Qnil; \
      SWIG_RUBY_THREAD_BEGIN_BLOCK; \
      int status; \
      OpArgs  args; \
      args.src    = _obj; \
      args.id     = proc_id; \
      args.nargs  = 0; \
      args.target = Qnil; \
      ret = rb_protect( PROTECTFUNC(swig_protect_funcall), VALUE(&args), \
			&status ); \
      SWIG_RUBY_THREAD_END_BLOCK; \
      return ret; \
    }

    GC_VALUE_UNARY( pos_id, operator+ )
    GC_VALUE_UNARY( neg_id, operator- )
    GC_VALUE_UNARY( inv_id, operator~ )
#undef GC_VALUE_BINARY

#define GC_VALUE_BINARY( proc_id, op ) \
    GC_VALUE op( const GC_VALUE& other ) const \
    { \
      VALUE ret = Qnil; \
      SWIG_RUBY_THREAD_BEGIN_BLOCK; \
      int status; \
      OpArgs  args; \
      args.src    = _obj; \
      args.id     = proc_id; \
      args.nargs  = 1; \
      args.target = VALUE(other); \
      ret = rb_protect( PROTECTFUNC(swig_protect_funcall), VALUE(&args), \
			&status ); \
      SWIG_RUBY_THREAD_END_BLOCK; \
      return GC_VALUE(ret); \
    }

    GC_VALUE_BINARY( add_id, operator+ );
    GC_VALUE_BINARY( sub_id, operator- );
    GC_VALUE_BINARY( mul_id, operator* );
    GC_VALUE_BINARY( div_id, operator/ );
    GC_VALUE_BINARY( mod_id, operator% );
    
    GC_VALUE_BINARY( and_id, operator& );
    GC_VALUE_BINARY( xor_id, operator^ );
    GC_VALUE_BINARY(  or_id, operator| );

    GC_VALUE_BINARY( lshift_id, operator<< );
    GC_VALUE_BINARY( rshift_id, operator>> );
#undef GC_VALUE_BINARY

  };

  ID  GC_VALUE::hash_id = rb_intern("hash");
  ID  GC_VALUE::lt_id = rb_intern("<");
  ID  GC_VALUE::gt_id = rb_intern(">");
  ID  GC_VALUE::eq_id = rb_intern("==");
  ID  GC_VALUE::le_id = rb_intern("<=");
  ID  GC_VALUE::ge_id = rb_intern(">=");

  ID  GC_VALUE::pos_id = rb_intern("+@");
  ID  GC_VALUE::neg_id = rb_intern("-@");
  ID  GC_VALUE::inv_id = rb_intern("~");

  ID  GC_VALUE::add_id = rb_intern("+");
  ID  GC_VALUE::sub_id = rb_intern("-");
  ID  GC_VALUE::mul_id = rb_intern("*");
  ID  GC_VALUE::div_id = rb_intern("/");
  ID  GC_VALUE::mod_id = rb_intern("%");

  ID  GC_VALUE::and_id = rb_intern("&");
  ID  GC_VALUE::or_id  = rb_intern("|");
  ID  GC_VALUE::xor_id = rb_intern("^");

  ID  GC_VALUE::lshift_id = rb_intern("<<");
  ID  GC_VALUE::rshift_id = rb_intern(">>");

  VALUE GC_VALUE::_hash = Qnil;

  typedef GC_VALUE LANGUAGE_OBJ;

} // namespace swig



#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>

  
namespace swig {
  struct stop_iteration {
  };

  /** 
   * Abstract base class used to represent all iterators of STL containers.
   */
  struct ConstIterator {
  public:
    typedef ConstIterator self_type;

  protected:
    GC_VALUE _seq;

  protected:
    ConstIterator(VALUE seq) : _seq(seq)
    {
    }

    // Random access iterator methods, but not required in Ruby
    virtual ptrdiff_t distance(const ConstIterator &x) const
    {
      throw std::invalid_argument("distance not supported");
    }

    virtual bool equal (const ConstIterator &x) const
    {
      throw std::invalid_argument("equal not supported");
    }

    virtual self_type* advance(ptrdiff_t n)
    {
      throw std::invalid_argument("advance not supported");
    }
      
  public:
    virtual ~ConstIterator() {}

    // Access iterator method, required by Ruby
    virtual VALUE value() const {
      throw std::invalid_argument("value not supported");
      return Qnil;
    };

    virtual VALUE setValue( const VALUE& v ) {
      throw std::invalid_argument("value= not supported");
      return Qnil;
    }

    virtual self_type* next( size_t n = 1 )
    {
      return this->advance( n );
    }

    virtual self_type* previous( size_t n = 1 )
    {
      ptrdiff_t nn = n;
      return this->advance( -nn );
    }

    virtual VALUE to_s() const {
      throw std::invalid_argument("to_s not supported");
      return Qnil;
    }

    virtual VALUE inspect() const {
      throw std::invalid_argument("inspect not supported");
      return Qnil;
    }
    
    virtual ConstIterator *dup() const
    {
      throw std::invalid_argument("dup not supported");
      return NULL;
    }

    //
    // C++ common/needed methods.  We emulate a bidirectional
    // operator, to be compatible with all the STL.
    // The iterator traits will then tell the STL what type of
    // iterator we really are.
    //
    ConstIterator() : _seq( Qnil )
    {
    }

    ConstIterator( const self_type& b ) : _seq( b._seq )
    {
    }

    self_type& operator=( const self_type& b )
    {
      _seq = b._seq;
      return *this;
    }

    bool operator == (const ConstIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const ConstIterator& x) const
    {
      return ! operator==(x);
    }
      
    // Pre-decrement operator
    self_type& operator--()
    {
      return *previous();
    }

    // Pre-increment operator
    self_type& operator++()
    {
      return *next();
    }

    // Post-decrement operator
    self_type operator--(int)
    {
      self_type r = *this;
      previous();
      return r;
    }

    // Post-increment operator
    self_type operator++(int)
    {
      self_type r = *this;
      next();
      return r;
    }

    ConstIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    ConstIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }

    ConstIterator* operator + (ptrdiff_t n) const
    {
      return dup()->advance(n);
    }

    ConstIterator* operator - (ptrdiff_t n) const
    {
      return dup()->advance(-n);
    }
      
    ptrdiff_t operator - (const ConstIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::ConstIterator *");
	init = 1;
      }	
      return desc;
    }
  };


  /**
   * Abstract base class used to represent all non-const iterators of STL containers.
   * 
   */
  struct Iterator : public ConstIterator {
  public:
    typedef Iterator self_type;

  protected:
    Iterator(VALUE seq) : ConstIterator(seq)
    {
    }

    virtual self_type* advance(ptrdiff_t n)
    {
      throw std::invalid_argument("operation not supported");
    }

  public:
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::Iterator *");
	init = 1;
      }	
      return desc;
    }
    
    virtual Iterator *dup() const
    {
      throw std::invalid_argument("dup not supported");
      return NULL;
    }
      
    virtual self_type* next( size_t n = 1 )
    {
      return this->advance( n );
    }

    virtual self_type* previous( size_t n = 1 )
    {
      ptrdiff_t nn = n;
      return this->advance( -nn );
    }

    bool operator == (const ConstIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const Iterator& x) const
    {
      return ! operator==(x);
    }
      
    Iterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    Iterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    Iterator* operator + (ptrdiff_t n) const
    {
      return dup()->advance(n);
    }

    Iterator* operator - (ptrdiff_t n) const
    {
      return dup()->advance(-n);
    }
      
    ptrdiff_t operator - (const Iterator& x) const
    {
      return x.distance(*this);
    }
  };

}


SWIGINTERN VALUE
SWIG_ruby_failed(void)
{
  return Qnil;
} 


/*@SWIG:/Volumes/Home/Users/bradediger/Gentoo/usr/share/swig/1.3.39/ruby/rubyprimtypes.swg,23,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2ULONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  unsigned long *res = (unsigned long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2ULONG(obj) : rb_big2ulong(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (VALUE obj, unsigned long *val) 
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    unsigned long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2ULONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (VALUE obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_bool  (bool value)
{
  return value ? Qtrue : Qfalse;
}


/*@SWIG:/Volumes/Home/Users/bradediger/Gentoo/usr/share/swig/1.3.39/ruby/rubyprimtypes.swg,23,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long *res = (long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LONG(obj) : rb_big2long(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long (VALUE obj, long* val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2LONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (VALUE obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


  #define SWIG_From_long   LONG2NUM 


SWIGINTERNINLINE VALUE
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


#include <stdexcept>


#include <algorithm>


#include <vector>


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}



namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static VALUE from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static VALUE from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static VALUE from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static VALUE from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline VALUE from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline VALUE from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(VALUE obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(VALUE obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(VALUE obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(VALUE obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(VALUE obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(VALUE obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (throw_error) throw std::invalid_argument("bad type");
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(VALUE obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	if (throw_error) throw std::invalid_argument("bad type");
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	static Type *v_def = (Type*) malloc(sizeof(Type));
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(VALUE obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (throw_error) throw std::invalid_argument("bad type");
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	return 0;
      }
    }
  };

  template <class Type>
  inline Type as(VALUE obj, bool te = false) {
    return traits_as< Type, typename traits< Type >::category >::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(VALUE obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(VALUE obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(VALUE obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


  namespace swig {
    template <>  struct traits<VisiLibity::Point > {
      typedef pointer_category category;
      static const char* type_name() { return"VisiLibity::Point"; }
    };
  }


#include <functional>


namespace swig {
  template < class T >
  struct yield : public std::unary_function< T, bool >
  {
    bool
    operator()( const T& v ) const
    { 
      return RTEST( rb_yield( swig::from< T >(v) ) );
    }
  };


  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {

  /** 
   * Templated base classes for all custom const_iterators.
   *
   */
  template<typename OutConstIterator>
  class ConstIterator_T :  public ConstIterator
  {
  public:
    typedef OutConstIterator const_iter;
    typedef typename std::iterator_traits<const_iter>::value_type value_type;    
    typedef ConstIterator_T<const_iter> self_type;

  protected:

    
    virtual bool equal (const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    virtual ptrdiff_t distance(const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }

    virtual ConstIterator* advance(ptrdiff_t n)
    {
      std::advance( current, n );
      return this;
    }

  public:
    ConstIterator_T() : ConstIterator(Qnil)
    {
    }

    ConstIterator_T(const_iter curr, VALUE seq = Qnil)
      : ConstIterator(seq), current(curr)
    {
    }

    const const_iter& get_current() const
    {
      return current;
    }

    const value_type& operator*() const
    {
      return *current;
    }

    virtual VALUE inspect() const
    {
      VALUE ret = rb_str_new2("#<");
      ret = rb_str_cat2( ret, rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::const_iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_inspect(cur) );
      ret = rb_str_cat2( ret, ">" );
      return ret;
    }

    virtual VALUE to_s()    const
    {
      VALUE ret = rb_str_new2( rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::const_iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_obj_as_string(cur) );
      return ret;
    }

  protected:
    const_iter current;
  };


  /** 
   * Templated base classes for all custom non-const iterators.
   *
   */
  template<typename InOutIterator>
  class Iterator_T :  public Iterator
  {
  public:
    typedef InOutIterator nonconst_iter;

    // Make this class iterator STL compatible, by using iterator_traits
    typedef typename std::iterator_traits<nonconst_iter >::iterator_category iterator_category;
    typedef typename std::iterator_traits<nonconst_iter >::value_type        value_type;
    typedef typename std::iterator_traits<nonconst_iter >::difference_type   difference_type;
    typedef typename std::iterator_traits<nonconst_iter >::pointer           pointer;
    typedef typename std::iterator_traits<nonconst_iter >::reference         reference;

    typedef Iterator                         base;
    typedef Iterator_T< nonconst_iter > self_type;

  protected:

    virtual bool equal (const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    virtual ptrdiff_t distance(const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }

    virtual Iterator* advance(ptrdiff_t n)
    {
      std::advance( current, n );
      return this;
    }

  public:

    Iterator_T(nonconst_iter curr, VALUE seq = Qnil)
      : Iterator(seq), current(curr)
    {
    }

    const nonconst_iter& get_current() const
    {
      return current;
    }

    self_type& operator=( const self_type& b )
    {
      base::operator=( b );
      return *this;
    }
    
    self_type& operator=( const value_type& b )
    {
      *current = b;
      return *this;
    }

    const value_type& operator*() const
    {
      return *current;
    }

    value_type& operator*()
    {
      return *current;
    }
    
    virtual VALUE inspect() const
    {
      VALUE ret = rb_str_new2("#<");
      ret = rb_str_cat2( ret, rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_inspect(cur) );
      ret = rb_str_cat2( ret, ">" );
      return ret;
    }

    virtual VALUE to_s()    const
    {
      VALUE ret = rb_str_new2( rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_obj_as_string(cur) );
      return ret;
    }

  protected:
    nonconst_iter current;
  };


  /**
   * Auxiliary functor to store the value of a ruby object inside
   * a reference of a compatible C++ type.  ie: Ruby -> C++
   * 
   */
  template <class ValueType>
  struct asval_oper 
  {
    typedef ValueType    value_type;
    typedef bool        result_type;
    bool operator()(VALUE obj, value_type& v) const
    {
      return ( swig::asval< value_type >(obj, &v) == SWIG_OK );
    }
  };

  /**
   * Auxiliary functor to return a ruby object from a C++ type. 
   * ie: C++ -> Ruby
   * 
   */
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef VALUE result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };


  /** 
   * ConstIterator class for a const_iterator with no end() boundaries.
   *
   */
  template<typename OutConstIterator, 
	   typename ValueType = typename std::iterator_traits<OutConstIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class ConstIteratorOpen_T :  public ConstIterator_T<OutConstIterator>
  {
  public:
    FromOper from;
    typedef OutConstIterator const_iter;
    typedef ValueType value_type;
    typedef ConstIterator_T<const_iter>  base;
    typedef ConstIteratorOpen_T<OutConstIterator, ValueType, FromOper> self_type;
    
    ConstIteratorOpen_T(const_iter curr, VALUE seq = Qnil)
      : ConstIterator_T<OutConstIterator>(curr, seq)
    {
    }
    
    virtual VALUE value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    ConstIterator *dup() const
    {
      return new self_type(*this);
    }
  };

  /** 
   * Iterator class for an iterator with no end() boundaries.
   *
   */
  template<typename InOutIterator, 
	   typename ValueType = typename std::iterator_traits<InOutIterator>::value_type,
	   typename FromOper = from_oper<ValueType>,
	   typename AsvalOper = asval_oper<ValueType> >
  class IteratorOpen_T :  public Iterator_T<InOutIterator>
  {
  public:
    FromOper  from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef ValueType value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorOpen_T<InOutIterator, ValueType, FromOper, AsvalOper> self_type;

  public:
    IteratorOpen_T(nonconst_iter curr, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq)
    {
    }
    
    virtual VALUE value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }

    virtual VALUE setValue( const VALUE& v )
    {
      value_type& dst = *base::current;
      if ( asval(v, dst) ) return v;
      return Qnil;
    }
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }
  };

  /** 
   * ConstIterator class for a const_iterator where begin() and end() boundaries are known.
   *
   */
  template<typename OutConstIterator, 
	   typename ValueType = typename std::iterator_traits<OutConstIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class ConstIteratorClosed_T :  public ConstIterator_T<OutConstIterator>
  {
  public:
    FromOper from;
    typedef OutConstIterator const_iter;
    typedef ValueType value_type;
    typedef ConstIterator_T<const_iter>  base;    
    typedef ConstIteratorClosed_T<OutConstIterator, ValueType, FromOper> self_type;
    
  protected:
    virtual ConstIterator* advance(ptrdiff_t n)
    {
      std::advance( base::current, n );
      if ( base::current == end )
	throw stop_iteration();
      return this;
    }

  public:
    ConstIteratorClosed_T(const_iter curr, const_iter first, 
			  const_iter last, VALUE seq = Qnil)
      : ConstIterator_T<OutConstIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    virtual VALUE value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    ConstIterator *dup() const
    {
      return new self_type(*this);
    }


  private:
    const_iter begin;
    const_iter end;
  };

  /** 
   * Iterator class for a iterator where begin() and end() boundaries are known.
   *
   */
  template<typename InOutIterator, 
	   typename ValueType = typename std::iterator_traits<InOutIterator>::value_type,
	   typename FromOper = from_oper<ValueType>,
	   typename AsvalOper = asval_oper<ValueType> >
  class IteratorClosed_T :  public Iterator_T<InOutIterator>
  {
  public:
    FromOper   from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef ValueType value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorClosed_T<InOutIterator, ValueType, FromOper, AsvalOper> self_type;
    
  protected:
    virtual Iterator* advance(ptrdiff_t n)
    {
      std::advance( base::current, n );
      if ( base::current == end )
	throw stop_iteration();
      return this;
    }

  public:
    IteratorClosed_T(nonconst_iter curr, nonconst_iter first, 
		     nonconst_iter last, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    virtual VALUE value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    // Iterator setter method, required by Ruby
    virtual VALUE setValue( const VALUE& v )
    {
      if (base::current == end)
	throw stop_iteration();

      value_type& dst = *base::current;
      if ( asval( v, dst ) ) return v;
      return Qnil;
    }
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }

  private:
    nonconst_iter begin;
    nonconst_iter end;
  };

  /* Partial specialization for bools which don't allow de-referencing */
  template< typename InOutIterator, typename FromOper, typename AsvalOper >
  class IteratorOpen_T< InOutIterator, bool, FromOper, AsvalOper > : 
    public Iterator_T<InOutIterator>
  {
  public:
    FromOper   from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef bool value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorOpen_T<InOutIterator, bool, FromOper, AsvalOper> self_type;

    IteratorOpen_T(nonconst_iter curr, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq)
    {
    }

    virtual VALUE value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    virtual VALUE setValue( const VALUE& v )
    {
      bool tmp = *base::current;
      if ( asval( v, tmp ) )
	{
	  *base::current = tmp;
	  return v;
	}
      return Qnil;
    }    
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }
    
  };

  /* Partial specialization for bools which don't allow de-referencing */
  template< typename InOutIterator, typename FromOper, typename AsvalOper >
  class IteratorClosed_T< InOutIterator, bool, FromOper, AsvalOper > : 
    public Iterator_T<InOutIterator>
  {
  public:
    FromOper   from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef bool value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorClosed_T<InOutIterator, bool, FromOper, AsvalOper> self_type;
    
  protected:
    virtual Iterator* advance(ptrdiff_t n)
    {
      std::advance( base::current, n );
      if ( base::current == end )
	throw stop_iteration();
      return this;
    }

  public:
    IteratorClosed_T(nonconst_iter curr, nonconst_iter first, 
		     nonconst_iter last, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq), begin(first), end(last)
    {
    }

    virtual VALUE value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }

    virtual VALUE setValue( const VALUE& v )
    {
      if (base::current == end)
	throw stop_iteration();

      bool tmp = *base::current;
      if ( asval( v, tmp ) )
	{
	  *base::current = tmp;
	  return v;
	}
      return Qnil;
    }
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }

  private:
    nonconst_iter begin;
    nonconst_iter end;
  };


  /** 
   * Helper function used to wrap a bounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename InOutIter>
  inline Iterator*
  make_nonconst_iterator(const InOutIter& current, const InOutIter& begin,
			 const InOutIter& end, VALUE seq = Qnil)
  {
    return new IteratorClosed_T<InOutIter>(current, begin, end, seq);
  }

  /** 
   * Helper function used to wrap an unbounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename InOutIter>
  inline Iterator*
  make_nonconst_iterator(const InOutIter& current, VALUE seq = Qnil)
  {
    return new IteratorOpen_T<InOutIter>(current, seq);
  }

  /** 
   * Helper function used to wrap a bounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename OutIter>
  inline ConstIterator*
  make_const_iterator(const OutIter& current, const OutIter& begin,
                       const OutIter& end, VALUE seq = Qnil)
  {
    return new ConstIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  /** 
   * Helper function used to wrap an unbounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename OutIter>
  inline ConstIterator*
  make_const_iterator(const OutIter& current, VALUE seq = Qnil)
  {
    return new ConstIteratorOpen_T<OutIter>(current, seq);
  }
}


namespace swig
{

  /**
   * This class is a proxy class for references, used to return and set values
   * of an element of a Ruby Array of stuff.
   * It can be used by RubySequence_InputIterator to make it work with STL
   * algorithms.
   * 
   */
  template <class T>
  struct RubySequence_Ref
  {
    RubySequence_Ref(VALUE  seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      VALUE item = rb_ary_entry(_seq, _index );
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	VALUE lastErr = rb_gv_get("$!");
	if ( lastErr == Qnil ) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	VALUE str = rb_str_new2(msg);
	str = rb_str_cat2( str, e.what() );
	SWIG_Ruby_ExceptionType( NULL, str );
	throw;
      }
    }

    RubySequence_Ref& operator=(const T& v)
    {
      rb_ary_set(_seq, _index, swig::from< T >(v));
      return *this;
    }

  private:
    VALUE  _seq;
    int _index;
  };


  /**
   * This class is a proxy to return a pointer to a class, usually
   * RubySequence_Ref. 
   * It can be used by RubySequence_InputIterator to make it work with STL
   * algorithms.
   * 
   */
  template <class T>
  struct RubySequence_ArrowProxy
  {
    RubySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };


  /**
   * Input Iterator.  This adapator class is a random access iterator that 
   * allows you to use STL algorithms with a Ruby class (a Ruby Array by default).
   * 
   */
  template <class T, class Reference = RubySequence_Ref< T > >
  struct RubySequence_InputIterator
  {
    typedef RubySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef ptrdiff_t difference_type;

    RubySequence_InputIterator()
    {
    }

    RubySequence_InputIterator(VALUE  seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    RubySequence_ArrowProxy<T>
    operator->() const {
      return RubySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    VALUE  _seq;
    difference_type _index;
  };


  /**
   * This adaptor class allows you to use a Ruby Array as if it was an STL
   * container, giving it begin(), end(), and iterators.
   * 
   */
  template <class T>
  struct RubySequence_Cont
  {
    typedef RubySequence_Ref<T> reference;
    typedef const RubySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef RubySequence_InputIterator<T, reference> iterator;
    typedef RubySequence_InputIterator<T, const_reference> const_iterator;

    RubySequence_Cont(VALUE  seq) : _seq(0)
    {
      if (!rb_obj_is_kind_of(seq, rb_cArray)) {
	throw std::invalid_argument("an Array is expected");
      }
      _seq = seq;
    }

    ~RubySequence_Cont()
    {
    }

    size_type size() const
    {
      return RARRAY_LEN(_seq);
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = false) const
    {
      int s = (int) size();
      for (int i = 0; i < s; ++i) {
	VALUE item = rb_ary_entry(_seq, i );
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    VALUE  _seq;
  };

}


namespace swig {
  template <class RubySeq, class Seq>
  inline void
  assign(const RubySeq& rubyseq, Seq* seq) {
    // seq->assign(rubyseq.begin(), rubyseq.end()); // not used as not always implemented
    typedef typename RubySeq::value_type value_type;
    typename RubySeq::const_iterator it = rubyseq.begin();
    for (;it != rubyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(VALUE obj, sequence **seq) {
      if (rb_obj_is_kind_of(obj, rb_cArray) == Qtrue) {
	try {
	  RubySequence_Cont<value_type> rubyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(rubyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return rubyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    VALUE lastErr = rb_gv_get("$!");
	    if (lastErr == Qnil) {
	      rb_raise(rb_eTypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      } else {
	sequence *p;
	if (SWIG_ConvertPtr(obj,(void**)&p,
			    swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      }
      return SWIG_ERROR;
    }
  };

  // Partial specialization for GC_VALUE's.  No need to typecheck each
  // element.
  template< class Seq >
  struct traits_asptr_stdseq< Seq, swig::GC_VALUE > {
    typedef Seq sequence;
    typedef swig::GC_VALUE value_type;

    static int asptr(VALUE obj, sequence **seq) {
      if (rb_obj_is_kind_of(obj, rb_cArray) == Qtrue) {
	try {
	  if (seq) {
	    RubySequence_Cont<value_type> rubyseq(obj);
	    sequence *pseq = new sequence();
	    assign(rubyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return true;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    VALUE lastErr = rb_gv_get("$!");
	    if (lastErr == Qnil) {
	      rb_raise(rb_eTypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      } else {
	sequence *p;
	if (SWIG_ConvertPtr(obj,(void**)&p,
			    swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static VALUE from(const sequence& seq) {






      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	VALUE obj = rb_ary_new2((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  RARRAY_PTR(obj)[i] = swig::from< value_type >(*it);
	}
	RARRAY_LEN(obj) = size;
	rb_obj_freeze(obj);  // treat as immutable result
	return obj;
      } else {
	rb_raise(rb_eRangeError,"sequence size not valid in ruby");
	return Qnil;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(VALUE obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static VALUE from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<VisiLibity::Point, std::allocator< VisiLibity::Point > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "VisiLibity::Point" "," "std::allocator< VisiLibity::Point >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > *std_vector_Sl_VisiLibity_Point_Sg__dup(std::vector< VisiLibity::Point > *self){
      return new std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >(*self);
    }
SWIGINTERN VALUE std_vector_Sl_VisiLibity_Point_Sg__inspect(std::vector< VisiLibity::Point > *self){
      std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::const_iterator i = self->begin();
      std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::const_iterator e = self->end();
      VALUE str = rb_str_new2( swig::type_name< std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > > >() );
      str = rb_str_cat2( str, " [" );
      bool comma = false;
      VALUE tmp;
      for ( ; i != e; ++i, comma = true )
	{
	  if (comma) str = rb_str_cat2( str, "," );
	  tmp = swig::from< std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::value_type >( *i );
	  tmp = rb_inspect( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      str = rb_str_cat2( str, "]" );
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_VisiLibity_Point_Sg__to_a(std::vector< VisiLibity::Point > *self){
      std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::const_iterator i = self->begin();
      std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::const_iterator e = self->end();
      VALUE ary = rb_ary_new2( std::distance( i, e ) );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::value_type >( *i );
	  rb_ary_push( ary, tmp );
	}
      return ary;
    }
SWIGINTERN VALUE std_vector_Sl_VisiLibity_Point_Sg__to_s(std::vector< VisiLibity::Point > *self){
      std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::iterator i = self->begin();
      std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::iterator e = self->end();
      VALUE str = rb_str_new2( "" );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::value_type >( *i );
	  tmp = rb_obj_as_string( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_VisiLibity_Point_Sg__slice(std::vector< VisiLibity::Point > *self,std::vector< VisiLibity::Point >::difference_type i,std::vector< VisiLibity::Point >::difference_type j){
	if ( j <= 0 ) return Qnil;
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	j += i;
	if ( static_cast<std::size_t>(j) >= len ) j = len-1;

	VALUE r = Qnil;
	try {
	  r = swig::from< const std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >* >( swig::getslice(self, i, j) );
	}
	catch( std::out_of_range )
	  {
	  }
	return r;
      }
SWIGINTERN std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > *std_vector_Sl_VisiLibity_Point_Sg__each(std::vector< VisiLibity::Point > *self){
	if ( !rb_block_given_p() )
	  rb_raise( rb_eArgError, "no block given");

	VALUE r;
	std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::const_iterator i = self->begin();
	std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::const_iterator e = self->end();
	for ( ; i != e; ++i )
	  {
	    r = swig::from< std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::value_type >(*i);
	    rb_yield(r);
	  }
	
	return self;
      }
SWIGINTERN std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > *std_vector_Sl_VisiLibity_Point_Sg__select(std::vector< VisiLibity::Point > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >* r = new std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >;
      std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::const_iterator i = self->begin();
      std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::const_iterator e = self->end();
      for ( ; i != e; ++i )
	{
	  VALUE v = swig::from< std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::value_type >(*i);
	  if ( RTEST( rb_yield(v) ) )
	    self->insert( r->end(), *i);
	}
	
      return r;
    }
SWIGINTERN std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > *std_vector_Sl_VisiLibity_Point_Sg__reject_bang(std::vector< VisiLibity::Point > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::iterator i = self->begin();
      std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::iterator e = self->end();
      for ( ; i != e; )
	{
	  VALUE r = swig::from< std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::value_type >(*i);
	  if ( RTEST( rb_yield(r) ) ) {
	    self->erase(i++);
            e = self->end();
	  } else {
	    ++i;
          }
	}
	
      return self;
    }
SWIGINTERN VALUE std_vector_Sl_VisiLibity_Point_Sg__delete_at(std::vector< VisiLibity::Point > *self,std::vector< VisiLibity::Point >::difference_type i){
      VALUE r = Qnil;
      try {
	std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::iterator at = swig::getpos(self, i);
	r = swig::from< std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::value_type >( *(at) );
	self->erase(at); 
      }
      catch (std::out_of_range)
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_VisiLibity_Point_Sg____delete2__(std::vector< VisiLibity::Point > *self,std::vector< VisiLibity::Point >::value_type const &i){
      VALUE r = Qnil;
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_VisiLibity_Point_Sg__pop(std::vector< VisiLibity::Point > *self){
      if (self->empty()) return Qnil;
      std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::value_type x = self->back();
      self->pop_back();
      return swig::from< std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::value_type >( x );
    }
SWIGINTERN std::vector< VisiLibity::Point >::value_type const std_vector_Sl_VisiLibity_Point_Sg__push(std::vector< VisiLibity::Point > *self,std::vector< VisiLibity::Point >::value_type const &e){
      self->push_back( e );
      return e;
    }
SWIGINTERN std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > *std_vector_Sl_VisiLibity_Point_Sg__reject(std::vector< VisiLibity::Point > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >* r = new std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >;
      std::remove_copy_if( self->begin(), self->end(),              
			   std::back_inserter(*r),
			   swig::yield< std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::value_type >() );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_VisiLibity_Point_Sg__at(std::vector< VisiLibity::Point > const *self,std::vector< VisiLibity::Point >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_VisiLibity_Point_Sg____getitem____SWIG_0(std::vector< VisiLibity::Point > const *self,std::vector< VisiLibity::Point >::difference_type i,std::vector< VisiLibity::Point >::difference_type j){
      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; if ( static_cast<std::size_t>(j) >= len ) j = len-1;

      VALUE r = Qnil;
      try {
	r = swig::from< const std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >* >( swig::getslice(self, i, j) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_VisiLibity_Point_Sg____getitem____SWIG_1(std::vector< VisiLibity::Point > const *self,std::vector< VisiLibity::Point >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_VisiLibity_Point_Sg____getitem____SWIG_2(std::vector< VisiLibity::Point > const *self,VALUE i){
      if ( rb_obj_is_kind_of( i, rb_cRange ) == Qfalse )
	{
	  rb_raise( rb_eTypeError, "not a valid index or range" );
	}

      VALUE r = Qnil;
      static ID id_end   = rb_intern("end");
      static ID id_start = rb_intern("begin");
      static ID id_noend = rb_intern("exclude_end?");

      VALUE start = rb_funcall( i, id_start, 0 );
      VALUE end   = rb_funcall( i, id_end, 0 );
      bool  noend = ( rb_funcall( i, id_noend, 0 ) == Qtrue );

      int len = self->size();

      int s = NUM2INT( start );
      if ( s < 0 ) s = len + s;
      else if ( s >= len ) return Qnil;

      int e = NUM2INT( end );
      if ( e < 0 ) e = len + e;

      if ( e < s ) return Qnil; //std::swap( s, e );

      if ( noend ) e -= 1;
      if ( e >= len ) e = len - 1;

      return swig::from< std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >* >( swig::getslice(self, s, e+1) );
    }
SWIGINTERN VALUE std_vector_Sl_VisiLibity_Point_Sg____setitem____SWIG_0(std::vector< VisiLibity::Point > *self,std::vector< VisiLibity::Point >::difference_type i,std::vector< VisiLibity::Point >::value_type const &x){
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	else if ( static_cast<std::size_t>(i) >= len )
	  self->resize( i+1, x );
	else
	  *(swig::getpos(self,i)) = x;

	return swig::from< std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::value_type >( x );
      }
SWIGINTERN VALUE std_vector_Sl_VisiLibity_Point_Sg____setitem____SWIG_1(std::vector< VisiLibity::Point > *self,std::vector< VisiLibity::Point >::difference_type i,std::vector< VisiLibity::Point >::difference_type j,std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > const &v){

      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; 
      if ( static_cast<std::size_t>(j) >= len ) {
	self->resize( j+1, *(v.begin()) );
	j = len-1;
      }

      VALUE r = Qnil;
      swig::setslice(self, i, j, v);
      r = swig::from< const std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >* >( &v );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_VisiLibity_Point_Sg__shift(std::vector< VisiLibity::Point > *self){
      if (self->empty()) return Qnil;
      std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::value_type x = self->front();
      self->erase( self->begin() );
      return swig::from< std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::value_type >( x );
    }

SWIGINTERN int
SWIG_AsVal_int (VALUE obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}

SWIGINTERN std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > *std_vector_Sl_VisiLibity_Point_Sg__insert__SWIG_0(std::vector< VisiLibity::Point > *self,std::vector< VisiLibity::Point >::difference_type pos,int argc,VALUE *argv,...){
      std::size_t len = self->size();
      std::size_t   i = swig::check_index( pos, len, true );
      std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::iterator start;

      VALUE elem = argv[0];
      int idx = 0;
      try {
	std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::value_type val = swig::as<std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::value_type>( elem, true );
	if ( i >= len ) {
	  self->resize(i-1, val);
	  return self;
	}
	start = self->begin();
	std::advance( start, i );
	self->insert( start++, val );

	for ( ++idx; idx < argc; ++idx )
	  {
	    elem = argv[idx];
	    val = swig::as<std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::value_type>( elem );
	    self->insert( start++, val );
	  }

      } 
      catch( std::invalid_argument )
	{
	  rb_raise( rb_eArgError,
		    Ruby_Format_TypeError( "", 
					   swig::type_name<std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::value_type>(),
					   __FUNCTION__, idx+2, elem ));
	}


      return self;
    }
SWIGINTERN std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > *std_vector_Sl_VisiLibity_Point_Sg__unshift(std::vector< VisiLibity::Point > *self,int argc,VALUE *argv,...){
      for ( int idx = argc-1; idx >= 0; --idx )
	{
	  std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::iterator start = self->begin();
	  VALUE elem = argv[idx];
	  try {
	    std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::value_type val = swig::as<std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::value_type>( elem, true );
	    self->insert( start, val );
	  }
	  catch( std::invalid_argument )
	    {
	      rb_raise( rb_eArgError,
			Ruby_Format_TypeError( "", 
					       swig::type_name<std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >::value_type>(),
					       __FUNCTION__, idx+2, elem ));
	    }
	}

      return self;
    }

SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return ULONG2NUM(value); 
}


SWIGINTERNINLINE VALUE
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}


  namespace swig {
    template <>  struct traits<VisiLibity::Polygon > {
      typedef pointer_category category;
      static const char* type_name() { return"VisiLibity::Polygon"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<VisiLibity::Polygon, std::allocator< VisiLibity::Polygon > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "VisiLibity::Polygon" "," "std::allocator< VisiLibity::Polygon >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > *std_vector_Sl_VisiLibity_Polygon_Sg__dup(std::vector< VisiLibity::Polygon > *self){
      return new std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >(*self);
    }
SWIGINTERN VALUE std_vector_Sl_VisiLibity_Polygon_Sg__inspect(std::vector< VisiLibity::Polygon > *self){
      std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::const_iterator i = self->begin();
      std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::const_iterator e = self->end();
      VALUE str = rb_str_new2( swig::type_name< std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > >() );
      str = rb_str_cat2( str, " [" );
      bool comma = false;
      VALUE tmp;
      for ( ; i != e; ++i, comma = true )
	{
	  if (comma) str = rb_str_cat2( str, "," );
	  tmp = swig::from< std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::value_type >( *i );
	  tmp = rb_inspect( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      str = rb_str_cat2( str, "]" );
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_VisiLibity_Polygon_Sg__to_a(std::vector< VisiLibity::Polygon > *self){
      std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::const_iterator i = self->begin();
      std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::const_iterator e = self->end();
      VALUE ary = rb_ary_new2( std::distance( i, e ) );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::value_type >( *i );
	  rb_ary_push( ary, tmp );
	}
      return ary;
    }
SWIGINTERN VALUE std_vector_Sl_VisiLibity_Polygon_Sg__to_s(std::vector< VisiLibity::Polygon > *self){
      std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::iterator i = self->begin();
      std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::iterator e = self->end();
      VALUE str = rb_str_new2( "" );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::value_type >( *i );
	  tmp = rb_obj_as_string( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_VisiLibity_Polygon_Sg__slice(std::vector< VisiLibity::Polygon > *self,std::vector< VisiLibity::Polygon >::difference_type i,std::vector< VisiLibity::Polygon >::difference_type j){
	if ( j <= 0 ) return Qnil;
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	j += i;
	if ( static_cast<std::size_t>(j) >= len ) j = len-1;

	VALUE r = Qnil;
	try {
	  r = swig::from< const std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >* >( swig::getslice(self, i, j) );
	}
	catch( std::out_of_range )
	  {
	  }
	return r;
      }
SWIGINTERN std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > *std_vector_Sl_VisiLibity_Polygon_Sg__each(std::vector< VisiLibity::Polygon > *self){
	if ( !rb_block_given_p() )
	  rb_raise( rb_eArgError, "no block given");

	VALUE r;
	std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::const_iterator i = self->begin();
	std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::const_iterator e = self->end();
	for ( ; i != e; ++i )
	  {
	    r = swig::from< std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::value_type >(*i);
	    rb_yield(r);
	  }
	
	return self;
      }
SWIGINTERN std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > *std_vector_Sl_VisiLibity_Polygon_Sg__select(std::vector< VisiLibity::Polygon > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >* r = new std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >;
      std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::const_iterator i = self->begin();
      std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::const_iterator e = self->end();
      for ( ; i != e; ++i )
	{
	  VALUE v = swig::from< std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::value_type >(*i);
	  if ( RTEST( rb_yield(v) ) )
	    self->insert( r->end(), *i);
	}
	
      return r;
    }
SWIGINTERN std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > *std_vector_Sl_VisiLibity_Polygon_Sg__reject_bang(std::vector< VisiLibity::Polygon > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::iterator i = self->begin();
      std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::iterator e = self->end();
      for ( ; i != e; )
	{
	  VALUE r = swig::from< std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::value_type >(*i);
	  if ( RTEST( rb_yield(r) ) ) {
	    self->erase(i++);
            e = self->end();
	  } else {
	    ++i;
          }
	}
	
      return self;
    }
SWIGINTERN VALUE std_vector_Sl_VisiLibity_Polygon_Sg__delete_at(std::vector< VisiLibity::Polygon > *self,std::vector< VisiLibity::Polygon >::difference_type i){
      VALUE r = Qnil;
      try {
	std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::iterator at = swig::getpos(self, i);
	r = swig::from< std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::value_type >( *(at) );
	self->erase(at); 
      }
      catch (std::out_of_range)
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_VisiLibity_Polygon_Sg____delete2__(std::vector< VisiLibity::Polygon > *self,std::vector< VisiLibity::Polygon >::value_type const &i){
      VALUE r = Qnil;
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_VisiLibity_Polygon_Sg__pop(std::vector< VisiLibity::Polygon > *self){
      if (self->empty()) return Qnil;
      std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::value_type x = self->back();
      self->pop_back();
      return swig::from< std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::value_type >( x );
    }
SWIGINTERN std::vector< VisiLibity::Polygon >::value_type const std_vector_Sl_VisiLibity_Polygon_Sg__push(std::vector< VisiLibity::Polygon > *self,std::vector< VisiLibity::Polygon >::value_type const &e){
      self->push_back( e );
      return e;
    }
SWIGINTERN std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > *std_vector_Sl_VisiLibity_Polygon_Sg__reject(std::vector< VisiLibity::Polygon > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >* r = new std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >;
      std::remove_copy_if( self->begin(), self->end(),              
			   std::back_inserter(*r),
			   swig::yield< std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::value_type >() );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_VisiLibity_Polygon_Sg__at(std::vector< VisiLibity::Polygon > const *self,std::vector< VisiLibity::Polygon >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_VisiLibity_Polygon_Sg____getitem____SWIG_0(std::vector< VisiLibity::Polygon > const *self,std::vector< VisiLibity::Polygon >::difference_type i,std::vector< VisiLibity::Polygon >::difference_type j){
      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; if ( static_cast<std::size_t>(j) >= len ) j = len-1;

      VALUE r = Qnil;
      try {
	r = swig::from< const std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >* >( swig::getslice(self, i, j) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_VisiLibity_Polygon_Sg____getitem____SWIG_1(std::vector< VisiLibity::Polygon > const *self,std::vector< VisiLibity::Polygon >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_VisiLibity_Polygon_Sg____getitem____SWIG_2(std::vector< VisiLibity::Polygon > const *self,VALUE i){
      if ( rb_obj_is_kind_of( i, rb_cRange ) == Qfalse )
	{
	  rb_raise( rb_eTypeError, "not a valid index or range" );
	}

      VALUE r = Qnil;
      static ID id_end   = rb_intern("end");
      static ID id_start = rb_intern("begin");
      static ID id_noend = rb_intern("exclude_end?");

      VALUE start = rb_funcall( i, id_start, 0 );
      VALUE end   = rb_funcall( i, id_end, 0 );
      bool  noend = ( rb_funcall( i, id_noend, 0 ) == Qtrue );

      int len = self->size();

      int s = NUM2INT( start );
      if ( s < 0 ) s = len + s;
      else if ( s >= len ) return Qnil;

      int e = NUM2INT( end );
      if ( e < 0 ) e = len + e;

      if ( e < s ) return Qnil; //std::swap( s, e );

      if ( noend ) e -= 1;
      if ( e >= len ) e = len - 1;

      return swig::from< std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >* >( swig::getslice(self, s, e+1) );
    }
SWIGINTERN VALUE std_vector_Sl_VisiLibity_Polygon_Sg____setitem____SWIG_0(std::vector< VisiLibity::Polygon > *self,std::vector< VisiLibity::Polygon >::difference_type i,std::vector< VisiLibity::Polygon >::value_type const &x){
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	else if ( static_cast<std::size_t>(i) >= len )
	  self->resize( i+1, x );
	else
	  *(swig::getpos(self,i)) = x;

	return swig::from< std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::value_type >( x );
      }
SWIGINTERN VALUE std_vector_Sl_VisiLibity_Polygon_Sg____setitem____SWIG_1(std::vector< VisiLibity::Polygon > *self,std::vector< VisiLibity::Polygon >::difference_type i,std::vector< VisiLibity::Polygon >::difference_type j,std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > const &v){

      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; 
      if ( static_cast<std::size_t>(j) >= len ) {
	self->resize( j+1, *(v.begin()) );
	j = len-1;
      }

      VALUE r = Qnil;
      swig::setslice(self, i, j, v);
      r = swig::from< const std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >* >( &v );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_VisiLibity_Polygon_Sg__shift(std::vector< VisiLibity::Polygon > *self){
      if (self->empty()) return Qnil;
      std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::value_type x = self->front();
      self->erase( self->begin() );
      return swig::from< std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::value_type >( x );
    }
SWIGINTERN std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > *std_vector_Sl_VisiLibity_Polygon_Sg__insert__SWIG_0(std::vector< VisiLibity::Polygon > *self,std::vector< VisiLibity::Polygon >::difference_type pos,int argc,VALUE *argv,...){
      std::size_t len = self->size();
      std::size_t   i = swig::check_index( pos, len, true );
      std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::iterator start;

      VALUE elem = argv[0];
      int idx = 0;
      try {
	std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::value_type val = swig::as<std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::value_type>( elem, true );
	if ( i >= len ) {
	  self->resize(i-1, val);
	  return self;
	}
	start = self->begin();
	std::advance( start, i );
	self->insert( start++, val );

	for ( ++idx; idx < argc; ++idx )
	  {
	    elem = argv[idx];
	    val = swig::as<std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::value_type>( elem );
	    self->insert( start++, val );
	  }

      } 
      catch( std::invalid_argument )
	{
	  rb_raise( rb_eArgError,
		    Ruby_Format_TypeError( "", 
					   swig::type_name<std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::value_type>(),
					   __FUNCTION__, idx+2, elem ));
	}


      return self;
    }
SWIGINTERN std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > *std_vector_Sl_VisiLibity_Polygon_Sg__unshift(std::vector< VisiLibity::Polygon > *self,int argc,VALUE *argv,...){
      for ( int idx = argc-1; idx >= 0; --idx )
	{
	  std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::iterator start = self->begin();
	  VALUE elem = argv[idx];
	  try {
	    std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::value_type val = swig::as<std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::value_type>( elem, true );
	    self->insert( start, val );
	  }
	  catch( std::invalid_argument )
	    {
	      rb_raise( rb_eArgError,
			Ruby_Format_TypeError( "", 
					       swig::type_name<std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >::value_type>(),
					       __FUNCTION__, idx+2, elem ));
	    }
	}

      return self;
    }

#include <string>


SWIGINTERNINLINE VALUE
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


/*@SWIG:/Volumes/Home/Users/bradediger/Gentoo/usr/share/swig/1.3.39/ruby/rubyprimtypes.swg,23,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2DBL(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  double *res = (double *)(args[1]);
  *res = (type == T_FLOAT ? NUM2DBL(obj) : (type == T_FIXNUM ? (double) FIX2INT(obj) : rb_big2dbl(obj)));
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_double (VALUE obj, double *val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FLOAT) || (type == T_FIXNUM) || (type == T_BIGNUM)) {
    double v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2DBL), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


  #define SWIG_From_double   rb_float_new 


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (VALUE obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(VALUE obj, char** cptr, size_t* psize, int *alloc)
{
  if (TYPE(obj) == T_STRING) {
    #if defined(StringValuePtr)
    char *cstr = StringValuePtr(obj); 
    #else
    char *cstr = STR2CSTR(obj);
    #endif
    size_t size = RSTRING_LEN(obj) + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy((new char[size]), cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *)vptr;
	if (psize) *psize = vptr ? (strlen((char*)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }  
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (VALUE obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}

swig_class SwigClassGC_VALUE;


/*
  Document-method: VisiLibity::GC_VALUE.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_GC_VALUE_inspect(int argc, VALUE *argv, VALUE self) {
  swig::GC_VALUE *arg1 = (swig::GC_VALUE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__GC_VALUE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::GC_VALUE const *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::GC_VALUE * >(argp1);
  result = (VALUE)((swig::GC_VALUE const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::GC_VALUE.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_GC_VALUE_to_s(int argc, VALUE *argv, VALUE self) {
  swig::GC_VALUE *arg1 = (swig::GC_VALUE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__GC_VALUE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::GC_VALUE const *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::GC_VALUE * >(argp1);
  result = (VALUE)((swig::GC_VALUE const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassConstIterator;

SWIGINTERN void
free_swig_ConstIterator(swig::ConstIterator *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_ConstIterator_value(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","value", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  try {
    result = (VALUE)((swig::ConstIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::ConstIterator.dup

  call-seq:
    dup -> ConstIterator

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_dup(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->dup();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::ConstIterator.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_inspect(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  result = (VALUE)((swig::ConstIterator const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::ConstIterator.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_to_s(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  result = (VALUE)((swig::ConstIterator const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_next__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","next", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::ConstIterator *)(arg1)->next(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_next__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  try {
    result = (swig::ConstIterator *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator_next(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ConstIterator_next__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator_next__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ConstIterator.next", 
    "    swig::ConstIterator * ConstIterator.next(size_t n)\n"
    "    swig::ConstIterator * ConstIterator.next()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_previous__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","previous", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::ConstIterator *)(arg1)->previous(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_previous__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  try {
    result = (swig::ConstIterator *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator_previous(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ConstIterator_previous__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator_previous__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ConstIterator.previous", 
    "    swig::ConstIterator * ConstIterator.previous(size_t n)\n"
    "    swig::ConstIterator * ConstIterator.previous()\n");
  
  return Qnil;
}



/*
  Document-method: VisiLibity::ConstIterator.==

  call-seq:
    ==(x) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___eq__(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  swig::ConstIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__ConstIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::ConstIterator const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::ConstIterator const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::ConstIterator * >(argp2);
  result = (bool)((swig::ConstIterator const *)arg1)->operator ==((swig::ConstIterator const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::ConstIterator.+

  call-seq:
    +(n) -> ConstIterator

Add operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___add__(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator +", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::ConstIterator.-

  call-seq:
    -(n) -> ConstIterator
    -(x) -> ptrdiff_t

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator -", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  swig::ConstIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ptrdiff_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__ConstIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::ConstIterator const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::ConstIterator const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::ConstIterator * >(argp2);
  result = ((swig::ConstIterator const *)arg1)->operator -((swig::ConstIterator const &)*arg2);
  vresult = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ConstIterator___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__sub__.new", 
    "    __sub__.new(ptrdiff_t n)\n"
    "    __sub__.new(swig::ConstIterator const &x)\n");
  
  return Qnil;
}


swig_class SwigClassIterator;

SWIGINTERN VALUE
_wrap_Iterator_valuee___(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  VALUE *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE temp2 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","setValue", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  temp2 = static_cast< VALUE >(argv[0]);
  arg2 = &temp2;
  result = (VALUE)(arg1)->setValue((VALUE const &)*arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::Iterator.dup

  call-seq:
    dup -> Iterator

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_Iterator_dup(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  result = (swig::Iterator *)((swig::Iterator const *)arg1)->dup();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_next__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","next", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::Iterator *)(arg1)->next(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_next__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  try {
    result = (swig::Iterator *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator_next(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Iterator_next__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator_next__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Iterator.next", 
    "    swig::Iterator * Iterator.next(size_t n)\n"
    "    swig::Iterator * Iterator.next()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_previous__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","previous", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::Iterator *)(arg1)->previous(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_previous__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  try {
    result = (swig::Iterator *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator_previous(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Iterator_previous__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator_previous__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Iterator.previous", 
    "    swig::Iterator * Iterator.previous(size_t n)\n"
    "    swig::Iterator * Iterator.previous()\n");
  
  return Qnil;
}



/*
  Document-method: VisiLibity::Iterator.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_Iterator_inspect(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  result = (VALUE)((swig::Iterator const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::Iterator.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_Iterator_to_s(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  result = (VALUE)((swig::Iterator const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::Iterator.==

  call-seq:
    ==(x) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___eq__(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  swig::Iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__Iterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::Iterator const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::Iterator const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::Iterator * >(argp2);
  result = (bool)((swig::Iterator const *)arg1)->operator ==((swig::Iterator const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::Iterator.+

  call-seq:
    +(n) -> Iterator

Add operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___add__(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator +", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::Iterator *)((swig::Iterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::Iterator.-

  call-seq:
    -(n) -> Iterator
    -(x) -> ptrdiff_t

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator -", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::Iterator *)((swig::Iterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  swig::Iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ptrdiff_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__Iterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::Iterator const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::Iterator const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::Iterator * >(argp2);
  result = ((swig::Iterator const *)arg1)->operator -((swig::Iterator const &)*arg2);
  vresult = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_swig__Iterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Iterator___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__sub__.new", 
    "    __sub__.new(ptrdiff_t n)\n"
    "    __sub__.new(swig::Iterator const &x)\n");
  
  return Qnil;
}


SWIGINTERN void
free_swig_Iterator(swig::Iterator *arg1) {
    delete arg1;
}

swig_class SwigClassPointVector;


/*
  Document-method: VisiLibity::PointVector.dup

  call-seq:
    dup -> PointVector

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_PointVector_dup(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  result = (std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > *)std_vector_Sl_VisiLibity_Point_Sg__dup(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_PointVector_inspect(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  result = (VALUE)std_vector_Sl_VisiLibity_Point_Sg__inspect(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.to_a

  call-seq:
    to_a -> VALUE

Convert PointVector to an Array.
*/
SWIGINTERN VALUE
_wrap_PointVector_to_a(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  result = (VALUE)std_vector_Sl_VisiLibity_Point_Sg__to_a(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_PointVector_to_s(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  result = (VALUE)std_vector_Sl_VisiLibity_Point_Sg__to_s(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.slice

  call-seq:
    slice(i, j) -> VALUE

Return a slice (portion of) the PointVector.
*/
SWIGINTERN VALUE
_wrap_PointVector_slice(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  std::vector< VisiLibity::Point >::difference_type arg2 ;
  std::vector< VisiLibity::Point >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > *","slice", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::difference_type","slice", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< VisiLibity::Point >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::difference_type","slice", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< VisiLibity::Point >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_VisiLibity_Point_Sg__slice(arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.each

  call-seq:
    each -> PointVector

Iterate thru each element in the PointVector.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_PointVector_each(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  result = (std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > *)std_vector_Sl_VisiLibity_Point_Sg__each(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.select

  call-seq:
    select -> PointVector

Iterate thru each element in the PointVector and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_PointVector_select(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > *","select", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  result = (std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > *)std_vector_Sl_VisiLibity_Point_Sg__select(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.reject!

  call-seq:
    reject! -> PointVector

Iterate thru each element in the PointVector and reject those that fail a condition.  A block must be provided.  PointVector is modified in place.
*/
SWIGINTERN VALUE
_wrap_PointVector_rejectN___(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > *","reject_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  result = (std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > *)std_vector_Sl_VisiLibity_Point_Sg__reject_bang(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.delete_at

  call-seq:
    delete_at(i) -> VALUE

Delete an element at a certain index.
*/
SWIGINTERN VALUE
_wrap_PointVector_delete_at(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  std::vector< VisiLibity::Point >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > *","delete_at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::difference_type","delete_at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< VisiLibity::Point >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_VisiLibity_Point_Sg__delete_at(arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PointVector___delete2__(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  std::vector< VisiLibity::Point >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > *","__delete2__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__value_type,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::value_type const &","__delete2__", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Point >::value_type const &","__delete2__", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< VisiLibity::Point >::value_type * >(argp2);
  result = (VALUE)std_vector_Sl_VisiLibity_Point_Sg____delete2__(arg1,(VisiLibity::Point const &)*arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.pop

  call-seq:
    pop -> VALUE

Remove and return element at the end of the PointVector.
*/
SWIGINTERN VALUE
_wrap_PointVector_pop(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > *","pop", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  result = (VALUE)std_vector_Sl_VisiLibity_Point_Sg__pop(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.push

  call-seq:
    push(e) -> value_type

Add an element at the end of the PointVector.
*/
SWIGINTERN VALUE
_wrap_PointVector_push(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  std::vector< VisiLibity::Point >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< VisiLibity::Point >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > *","push", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__value_type,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::value_type const &","push", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Point >::value_type const &","push", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< VisiLibity::Point >::value_type * >(argp2);
  result = std_vector_Sl_VisiLibity_Point_Sg__push(arg1,(VisiLibity::Point const &)*arg2);
  vresult = SWIG_NewPointerObj((new std::vector< VisiLibity::Point >::value_type(static_cast< const std::vector< VisiLibity::Point >::value_type& >(result))), SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__value_type, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.reject

  call-seq:
    reject -> PointVector

Iterate thru each element in the PointVector and reject those that fail a condition returning a new PointVector.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_PointVector_reject(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > *","reject", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  result = (std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > *)std_vector_Sl_VisiLibity_Point_Sg__reject(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.at

  call-seq:
    at(i) -> VALUE

Return element at a certain index.
*/
SWIGINTERN VALUE
_wrap_PointVector_at(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  std::vector< VisiLibity::Point >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > const *","at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::difference_type","at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< VisiLibity::Point >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_VisiLibity_Point_Sg__at((std::vector< VisiLibity::Point > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.[]

  call-seq:
    [](i, j) -> VALUE
    [](i) -> VALUE
    [](i) -> VALUE

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_PointVector___getitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  std::vector< VisiLibity::Point >::difference_type arg2 ;
  std::vector< VisiLibity::Point >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< VisiLibity::Point >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::difference_type","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< VisiLibity::Point >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_VisiLibity_Point_Sg____getitem____SWIG_0((std::vector< VisiLibity::Point > const *)arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PointVector___getitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  std::vector< VisiLibity::Point >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< VisiLibity::Point >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_VisiLibity_Point_Sg____getitem____SWIG_1((std::vector< VisiLibity::Point > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PointVector___getitem____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  arg2 = argv[0];
  result = (VALUE)std_vector_Sl_VisiLibity_Point_Sg____getitem____SWIG_2((std::vector< VisiLibity::Point > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_PointVector___getitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PointVector___getitem____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_PointVector___getitem____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_PointVector___getitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "__getitem__", 
    "    VALUE __getitem__(std::vector< VisiLibity::Point >::difference_type i, std::vector< VisiLibity::Point >::difference_type j)\n"
    "    VALUE __getitem__(std::vector< VisiLibity::Point >::difference_type i)\n"
    "    VALUE __getitem__(VALUE i)\n");
  
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.[]=

  call-seq:
    []=(i, x) -> VALUE
    []=(i, j, v) -> VALUE

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_PointVector___setitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  std::vector< VisiLibity::Point >::difference_type arg2 ;
  std::vector< VisiLibity::Point >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< VisiLibity::Point >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__value_type,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::value_type const &","__setitem__", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Point >::value_type const &","__setitem__", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< VisiLibity::Point >::value_type * >(argp3);
  result = (VALUE)std_vector_Sl_VisiLibity_Point_Sg____setitem____SWIG_0(arg1,arg2,(VisiLibity::Point const &)*arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PointVector___setitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  std::vector< VisiLibity::Point >::difference_type arg2 ;
  std::vector< VisiLibity::Point >::difference_type arg3 ;
  std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< VisiLibity::Point >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::difference_type","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< VisiLibity::Point >::difference_type >(val3);
  {
    std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > > *ptr = (std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > > *)0;
    res4 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > const &","__setitem__", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > const &","__setitem__", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  try {
    result = (VALUE)std_vector_Sl_VisiLibity_Point_Sg____setitem____SWIG_1(arg1,arg2,arg3,(std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > const &)*arg4);
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  vresult = result;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_PointVector___setitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PointVector___setitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_PointVector___setitem____SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "__setitem__", 
    "    VALUE __setitem__(std::vector< VisiLibity::Point >::difference_type i, std::vector< VisiLibity::Point >::value_type const &x)\n"
    "    VALUE __setitem__(std::vector< VisiLibity::Point >::difference_type i, std::vector< VisiLibity::Point >::difference_type j, std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > const &v)\n");
  
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.shift

  call-seq:
    shift -> VALUE

Remove and return element at the beginning of the PointVector.
*/
SWIGINTERN VALUE
_wrap_PointVector_shift(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > *","shift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  result = (VALUE)std_vector_Sl_VisiLibity_Point_Sg__shift(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.insert

  call-seq:
    insert(pos, argc, ?) -> PointVector
    insert(pos, x) -> iterator
    insert(pos, n, x)

Insert one or more new elements in the PointVector.
*/
SWIGINTERN VALUE
_wrap_PointVector_insert__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  std::vector< VisiLibity::Point >::difference_type arg2 ;
  int arg3 ;
  VALUE *arg4 = (VALUE *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 2) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::difference_type","insert", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< VisiLibity::Point >::difference_type >(val2);
  {
    arg3 = argc - 1;
    arg4 = argv + 1;
  }
  result = (std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > *)std_vector_Sl_VisiLibity_Point_Sg__insert__SWIG_0(arg1,arg2,arg3,arg4,arg5);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.unshift

  call-seq:
    unshift(argc, ?) -> PointVector

Add one or more elements at the beginning of the PointVector.
*/
SWIGINTERN VALUE
_wrap_PointVector_unshift(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  int arg2 ;
  VALUE *arg3 = (VALUE *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 1) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > *","unshift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  {
    arg2 = argc;
    arg3 = argv;
  }
  result = (std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > *)std_vector_Sl_VisiLibity_Point_Sg__unshift(arg1,arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_PointVector__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (std::vector< VisiLibity::Point > *)new std::vector< VisiLibity::Point >();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_PointVector__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< VisiLibity::Point > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > > *ptr = (std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > const &","std::vector<(VisiLibity::Point)>", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Point > const &","std::vector<(VisiLibity::Point)>", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  result = (std::vector< VisiLibity::Point > *)new std::vector< VisiLibity::Point >((std::vector< VisiLibity::Point > const &)*arg1);
  DATA_PTR(self) = result;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.empty?

  call-seq:
    empty? -> bool

Check if the PointVector is empty or not.
*/
SWIGINTERN VALUE
_wrap_PointVector_emptyq___(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > const *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  result = (bool)((std::vector< VisiLibity::Point > const *)arg1)->empty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.size

  call-seq:
    size -> size_type

Size or Length of the PointVector.
*/
SWIGINTERN VALUE
_wrap_PointVector_size(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< VisiLibity::Point >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  result = ((std::vector< VisiLibity::Point > const *)arg1)->size();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.clear

  call-seq:
    clear

Clear PointVector contents.
*/
SWIGINTERN VALUE
_wrap_PointVector_clear(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PointVector_swap(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  std::vector< VisiLibity::Point > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > *","swap", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > &","swap", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Point > &","swap", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp2);
  (arg1)->swap(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PointVector_get_allocator(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< VisiLibity::Point > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > const *","get_allocator", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  result = ((std::vector< VisiLibity::Point > const *)arg1)->get_allocator();
  vresult = SWIG_NewPointerObj((new std::vector< VisiLibity::Point >::allocator_type(static_cast< const std::vector< VisiLibity::Point >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.begin

  call-seq:
    begin -> const_iterator

Return an iterator to the beginning of the PointVector.
*/
SWIGINTERN VALUE
_wrap_PointVector_begin(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< VisiLibity::Point >::const_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > const *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  result = ((std::vector< VisiLibity::Point > const *)arg1)->begin();
  vresult = SWIG_NewPointerObj(swig::make_const_iterator(static_cast< const std::vector< VisiLibity::Point >::const_iterator & >(result),
      self),
    swig::ConstIterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.end

  call-seq:
    end -> const_iterator

Return an iterator to past the end of the PointVector.
*/
SWIGINTERN VALUE
_wrap_PointVector_end(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< VisiLibity::Point >::const_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > const *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  result = ((std::vector< VisiLibity::Point > const *)arg1)->end();
  vresult = SWIG_NewPointerObj(swig::make_const_iterator(static_cast< const std::vector< VisiLibity::Point >::const_iterator & >(result),
      self),
    swig::ConstIterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.rbegin

  call-seq:
    rbegin -> const_reverse_iterator

Return a reverse iterator to the beginning (the end) of the PointVector.
*/
SWIGINTERN VALUE
_wrap_PointVector_rbegin(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< VisiLibity::Point >::const_reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > const *","rbegin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  result = ((std::vector< VisiLibity::Point > const *)arg1)->rbegin();
  vresult = SWIG_NewPointerObj(swig::make_const_iterator(static_cast< const std::vector< VisiLibity::Point >::const_reverse_iterator & >(result),
      self),
    swig::ConstIterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.rend

  call-seq:
    rend -> const_reverse_iterator

Return a reverse iterator to past the end (past the beginning) of the PointVector.
*/
SWIGINTERN VALUE
_wrap_PointVector_rend(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< VisiLibity::Point >::const_reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > const *","rend", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  result = ((std::vector< VisiLibity::Point > const *)arg1)->rend();
  vresult = SWIG_NewPointerObj(swig::make_const_iterator(static_cast< const std::vector< VisiLibity::Point >::const_reverse_iterator & >(result),
      self),
    swig::ConstIterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_PointVector__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< VisiLibity::Point > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::size_type","std::vector<(VisiLibity::Point)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< VisiLibity::Point >::size_type >(val1);
  result = (std::vector< VisiLibity::Point > *)new std::vector< VisiLibity::Point >(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the PointVector.
*/
SWIGINTERN VALUE
_wrap_PointVector_resize__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  std::vector< VisiLibity::Point >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< VisiLibity::Point >::size_type >(val2);
  (arg1)->resize(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.erase

  call-seq:
    erase(pos) -> iterator
    erase(first, last) -> iterator

Delete a portion of the PointVector.
*/
SWIGINTERN VALUE
_wrap_PointVector_erase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  std::vector< VisiLibity::Point >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::vector< VisiLibity::Point >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< VisiLibity::Point >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< VisiLibity::Point >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::iterator","erase", 2, argv[0] ));
    }
  }
  result = (arg1)->erase(arg2);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< VisiLibity::Point >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PointVector_erase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  std::vector< VisiLibity::Point >::iterator arg2 ;
  std::vector< VisiLibity::Point >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  swig::Iterator *iter3 = 0 ;
  int res3 ;
  std::vector< VisiLibity::Point >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< VisiLibity::Point >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< VisiLibity::Point >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::iterator","erase", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter3), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::iterator","erase", 3, argv[1] ));
  } else {
    swig::Iterator_T<std::vector< VisiLibity::Point >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< VisiLibity::Point >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::iterator","erase", 3, argv[1] ));
    }
  }
  result = (arg1)->erase(arg2,arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< VisiLibity::Point >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_PointVector_erase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< VisiLibity::Point >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_PointVector_erase__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< VisiLibity::Point >::iterator > *>(iter) != 0));
      if (_v) {
        swig::ConstIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), 
          swig::Iterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< VisiLibity::Point >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_PointVector_erase__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "PointVector.erase", 
    "    std::vector< VisiLibity::Point >::iterator PointVector.erase(std::vector< VisiLibity::Point >::iterator pos)\n"
    "    std::vector< VisiLibity::Point >::iterator PointVector.erase(std::vector< VisiLibity::Point >::iterator first, std::vector< VisiLibity::Point >::iterator last)\n");
  
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_PointVector_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_PointVector_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_PointVector__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point >::size_type arg1 ;
  std::vector< VisiLibity::Point >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< VisiLibity::Point > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::size_type","std::vector<(VisiLibity::Point)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< VisiLibity::Point >::size_type >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__value_type,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::value_type const &","std::vector<(VisiLibity::Point)>", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Point >::value_type const &","std::vector<(VisiLibity::Point)>", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< std::vector< VisiLibity::Point >::value_type * >(argp2);
  result = (std::vector< VisiLibity::Point > *)new std::vector< VisiLibity::Point >(arg1,(std::vector< VisiLibity::Point >::value_type const &)*arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_PointVector(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_PointVector__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_PointVector__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PointVector__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__value_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_PointVector__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "PointVector.new", 
    "    PointVector.new()\n"
    "    PointVector.new(std::vector< VisiLibity::Point > const &)\n"
    "    PointVector.new(std::vector< VisiLibity::Point >::size_type size)\n"
    "    PointVector.new(std::vector< VisiLibity::Point >::size_type size, std::vector< VisiLibity::Point >::value_type const &value)\n");
  
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.front

  call-seq:
    front -> value_type

Return the first element in PointVector.
*/
SWIGINTERN VALUE
_wrap_PointVector_front(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< VisiLibity::Point >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > const *","front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  result = (std::vector< VisiLibity::Point >::value_type *) &((std::vector< VisiLibity::Point > const *)arg1)->front();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__value_type, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.back

  call-seq:
    back -> value_type

Return the last element in PointVector.
*/
SWIGINTERN VALUE
_wrap_PointVector_back(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< VisiLibity::Point >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > const *","back", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  result = (std::vector< VisiLibity::Point >::value_type *) &((std::vector< VisiLibity::Point > const *)arg1)->back();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__value_type, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.assign

  call-seq:
    assign(n, x)

Assign a new PointVector or portion of it.
*/
SWIGINTERN VALUE
_wrap_PointVector_assign(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  std::vector< VisiLibity::Point >::size_type arg2 ;
  std::vector< VisiLibity::Point >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > *","assign", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::size_type","assign", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< VisiLibity::Point >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__value_type,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::value_type const &","assign", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Point >::value_type const &","assign", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< VisiLibity::Point >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< VisiLibity::Point >::value_type const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the PointVector.
*/
SWIGINTERN VALUE
_wrap_PointVector_resize__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  std::vector< VisiLibity::Point >::size_type arg2 ;
  std::vector< VisiLibity::Point >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< VisiLibity::Point >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__value_type,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::value_type const &","resize", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Point >::value_type const &","resize", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< VisiLibity::Point >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< VisiLibity::Point >::value_type const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_PointVector_resize(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PointVector_resize__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PointVector_resize__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "PointVector.resize", 
    "    void PointVector.resize(std::vector< VisiLibity::Point >::size_type new_size)\n"
    "    void PointVector.resize(std::vector< VisiLibity::Point >::size_type new_size, std::vector< VisiLibity::Point >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.insert

  call-seq:
    insert(pos, argc, ?) -> PointVector
    insert(pos, x) -> iterator
    insert(pos, n, x)

Insert one or more new elements in the PointVector.
*/
SWIGINTERN VALUE
_wrap_PointVector_insert__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  std::vector< VisiLibity::Point >::iterator arg2 ;
  std::vector< VisiLibity::Point >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< VisiLibity::Point >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< VisiLibity::Point >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< VisiLibity::Point >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::iterator","insert", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__value_type,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::value_type const &","insert", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Point >::value_type const &","insert", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< VisiLibity::Point >::value_type * >(argp3);
  result = (arg1)->insert(arg2,(std::vector< VisiLibity::Point >::value_type const &)*arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< VisiLibity::Point >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PointVector_insert__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  std::vector< VisiLibity::Point >::iterator arg2 ;
  std::vector< VisiLibity::Point >::size_type arg3 ;
  std::vector< VisiLibity::Point >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< VisiLibity::Point >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< VisiLibity::Point >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::size_type","insert", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< VisiLibity::Point >::size_type >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__value_type,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::value_type const &","insert", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Point >::value_type const &","insert", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< std::vector< VisiLibity::Point >::value_type * >(argp4);
  (arg1)->insert(arg2,arg3,(std::vector< VisiLibity::Point >::value_type const &)*arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_PointVector_insert(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< VisiLibity::Point >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PointVector_insert__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc >= 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_PointVector_insert__SWIG_0(nargs, args, self);
          }
          return _wrap_PointVector_insert__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< VisiLibity::Point >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__value_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_PointVector_insert__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "insert", 
    "    void insert(std::vector< VisiLibity::Point >::difference_type pos, int argc, VALUE *argv, ...)\n"
    "    void insert(std::vector< VisiLibity::Point >::iterator pos, std::vector< VisiLibity::Point >::value_type const &x)\n"
    "    void insert(std::vector< VisiLibity::Point >::iterator pos, std::vector< VisiLibity::Point >::size_type n, std::vector< VisiLibity::Point >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.reserve

  call-seq:
    reserve(n)

Reserve memory in the PointVector for a number of elements.
*/
SWIGINTERN VALUE
_wrap_PointVector_reserve(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  std::vector< VisiLibity::Point >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > *","reserve", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point >::size_type","reserve", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< VisiLibity::Point >::size_type >(val2);
  (arg1)->reserve(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PointVector.capacity

  call-seq:
    capacity -> size_type

Reserved capacity of the PointVector.
*/
SWIGINTERN VALUE
_wrap_PointVector_capacity(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point > *arg1 = (std::vector< VisiLibity::Point > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< VisiLibity::Point >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point > const *","capacity", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Point > * >(argp1);
  result = ((std::vector< VisiLibity::Point > const *)arg1)->capacity();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_vector_Sl_VisiLibity_Point_Sg_(std::vector< VisiLibity::Point > *arg1) {
    delete arg1;
}

swig_class SwigClassPolygonVector;


/*
  Document-method: VisiLibity::PolygonVector.dup

  call-seq:
    dup -> PolygonVector

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_dup(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  result = (std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > *)std_vector_Sl_VisiLibity_Polygon_Sg__dup(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_inspect(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  result = (VALUE)std_vector_Sl_VisiLibity_Polygon_Sg__inspect(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.to_a

  call-seq:
    to_a -> VALUE

Convert PolygonVector to an Array.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_to_a(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  result = (VALUE)std_vector_Sl_VisiLibity_Polygon_Sg__to_a(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_to_s(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  result = (VALUE)std_vector_Sl_VisiLibity_Polygon_Sg__to_s(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.slice

  call-seq:
    slice(i, j) -> VALUE

Return a slice (portion of) the PolygonVector.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_slice(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  std::vector< VisiLibity::Polygon >::difference_type arg2 ;
  std::vector< VisiLibity::Polygon >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > *","slice", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::difference_type","slice", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< VisiLibity::Polygon >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::difference_type","slice", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< VisiLibity::Polygon >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_VisiLibity_Polygon_Sg__slice(arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.each

  call-seq:
    each -> PolygonVector

Iterate thru each element in the PolygonVector.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_each(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  result = (std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > *)std_vector_Sl_VisiLibity_Polygon_Sg__each(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.select

  call-seq:
    select -> PolygonVector

Iterate thru each element in the PolygonVector and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_select(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > *","select", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  result = (std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > *)std_vector_Sl_VisiLibity_Polygon_Sg__select(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.reject!

  call-seq:
    reject! -> PolygonVector

Iterate thru each element in the PolygonVector and reject those that fail a condition.  A block must be provided.  PolygonVector is modified in place.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_rejectN___(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > *","reject_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  result = (std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > *)std_vector_Sl_VisiLibity_Polygon_Sg__reject_bang(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.delete_at

  call-seq:
    delete_at(i) -> VALUE

Delete an element at a certain index.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_delete_at(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  std::vector< VisiLibity::Polygon >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > *","delete_at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::difference_type","delete_at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< VisiLibity::Polygon >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_VisiLibity_Polygon_Sg__delete_at(arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PolygonVector___delete2__(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  std::vector< VisiLibity::Polygon >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > *","__delete2__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__value_type,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::value_type const &","__delete2__", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Polygon >::value_type const &","__delete2__", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< VisiLibity::Polygon >::value_type * >(argp2);
  result = (VALUE)std_vector_Sl_VisiLibity_Polygon_Sg____delete2__(arg1,(VisiLibity::Polygon const &)*arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.pop

  call-seq:
    pop -> VALUE

Remove and return element at the end of the PolygonVector.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_pop(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > *","pop", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  result = (VALUE)std_vector_Sl_VisiLibity_Polygon_Sg__pop(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.push

  call-seq:
    push(e) -> value_type

Add an element at the end of the PolygonVector.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_push(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  std::vector< VisiLibity::Polygon >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< VisiLibity::Polygon >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > *","push", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__value_type,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::value_type const &","push", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Polygon >::value_type const &","push", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< VisiLibity::Polygon >::value_type * >(argp2);
  result = std_vector_Sl_VisiLibity_Polygon_Sg__push(arg1,(VisiLibity::Polygon const &)*arg2);
  vresult = SWIG_NewPointerObj((new std::vector< VisiLibity::Polygon >::value_type(static_cast< const std::vector< VisiLibity::Polygon >::value_type& >(result))), SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__value_type, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.reject

  call-seq:
    reject -> PolygonVector

Iterate thru each element in the PolygonVector and reject those that fail a condition returning a new PolygonVector.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_reject(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > *","reject", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  result = (std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > *)std_vector_Sl_VisiLibity_Polygon_Sg__reject(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.at

  call-seq:
    at(i) -> VALUE

Return element at a certain index.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_at(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  std::vector< VisiLibity::Polygon >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > const *","at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::difference_type","at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< VisiLibity::Polygon >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_VisiLibity_Polygon_Sg__at((std::vector< VisiLibity::Polygon > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.[]

  call-seq:
    [](i, j) -> VALUE
    [](i) -> VALUE
    [](i) -> VALUE

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_PolygonVector___getitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  std::vector< VisiLibity::Polygon >::difference_type arg2 ;
  std::vector< VisiLibity::Polygon >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< VisiLibity::Polygon >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::difference_type","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< VisiLibity::Polygon >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_VisiLibity_Polygon_Sg____getitem____SWIG_0((std::vector< VisiLibity::Polygon > const *)arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PolygonVector___getitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  std::vector< VisiLibity::Polygon >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< VisiLibity::Polygon >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_VisiLibity_Polygon_Sg____getitem____SWIG_1((std::vector< VisiLibity::Polygon > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PolygonVector___getitem____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  arg2 = argv[0];
  result = (VALUE)std_vector_Sl_VisiLibity_Polygon_Sg____getitem____SWIG_2((std::vector< VisiLibity::Polygon > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_PolygonVector___getitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PolygonVector___getitem____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_PolygonVector___getitem____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_PolygonVector___getitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "__getitem__", 
    "    VALUE __getitem__(std::vector< VisiLibity::Polygon >::difference_type i, std::vector< VisiLibity::Polygon >::difference_type j)\n"
    "    VALUE __getitem__(std::vector< VisiLibity::Polygon >::difference_type i)\n"
    "    VALUE __getitem__(VALUE i)\n");
  
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.[]=

  call-seq:
    []=(i, x) -> VALUE
    []=(i, j, v) -> VALUE

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_PolygonVector___setitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  std::vector< VisiLibity::Polygon >::difference_type arg2 ;
  std::vector< VisiLibity::Polygon >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< VisiLibity::Polygon >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__value_type,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::value_type const &","__setitem__", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Polygon >::value_type const &","__setitem__", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< VisiLibity::Polygon >::value_type * >(argp3);
  result = (VALUE)std_vector_Sl_VisiLibity_Polygon_Sg____setitem____SWIG_0(arg1,arg2,(VisiLibity::Polygon const &)*arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PolygonVector___setitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  std::vector< VisiLibity::Polygon >::difference_type arg2 ;
  std::vector< VisiLibity::Polygon >::difference_type arg3 ;
  std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< VisiLibity::Polygon >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::difference_type","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< VisiLibity::Polygon >::difference_type >(val3);
  {
    std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > *ptr = (std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > *)0;
    res4 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > const &","__setitem__", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > const &","__setitem__", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  try {
    result = (VALUE)std_vector_Sl_VisiLibity_Polygon_Sg____setitem____SWIG_1(arg1,arg2,arg3,(std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > const &)*arg4);
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  vresult = result;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_PolygonVector___setitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PolygonVector___setitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_PolygonVector___setitem____SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "__setitem__", 
    "    VALUE __setitem__(std::vector< VisiLibity::Polygon >::difference_type i, std::vector< VisiLibity::Polygon >::value_type const &x)\n"
    "    VALUE __setitem__(std::vector< VisiLibity::Polygon >::difference_type i, std::vector< VisiLibity::Polygon >::difference_type j, std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > const &v)\n");
  
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.shift

  call-seq:
    shift -> VALUE

Remove and return element at the beginning of the PolygonVector.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_shift(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > *","shift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  result = (VALUE)std_vector_Sl_VisiLibity_Polygon_Sg__shift(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.insert

  call-seq:
    insert(pos, argc, ?) -> PolygonVector
    insert(pos, x) -> iterator
    insert(pos, n, x)

Insert one or more new elements in the PolygonVector.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_insert__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  std::vector< VisiLibity::Polygon >::difference_type arg2 ;
  int arg3 ;
  VALUE *arg4 = (VALUE *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 2) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::difference_type","insert", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< VisiLibity::Polygon >::difference_type >(val2);
  {
    arg3 = argc - 1;
    arg4 = argv + 1;
  }
  result = (std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > *)std_vector_Sl_VisiLibity_Polygon_Sg__insert__SWIG_0(arg1,arg2,arg3,arg4,arg5);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.unshift

  call-seq:
    unshift(argc, ?) -> PolygonVector

Add one or more elements at the beginning of the PolygonVector.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_unshift(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  int arg2 ;
  VALUE *arg3 = (VALUE *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 1) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > *","unshift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  {
    arg2 = argc;
    arg3 = argv;
  }
  result = (std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > *)std_vector_Sl_VisiLibity_Polygon_Sg__unshift(arg1,arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_PolygonVector__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (std::vector< VisiLibity::Polygon > *)new std::vector< VisiLibity::Polygon >();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_PolygonVector__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< VisiLibity::Polygon > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > *ptr = (std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > const &","std::vector<(VisiLibity::Polygon)>", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Polygon > const &","std::vector<(VisiLibity::Polygon)>", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  result = (std::vector< VisiLibity::Polygon > *)new std::vector< VisiLibity::Polygon >((std::vector< VisiLibity::Polygon > const &)*arg1);
  DATA_PTR(self) = result;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.empty?

  call-seq:
    empty? -> bool

Check if the PolygonVector is empty or not.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_emptyq___(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > const *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  result = (bool)((std::vector< VisiLibity::Polygon > const *)arg1)->empty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.size

  call-seq:
    size -> size_type

Size or Length of the PolygonVector.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_size(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< VisiLibity::Polygon >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  result = ((std::vector< VisiLibity::Polygon > const *)arg1)->size();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.clear

  call-seq:
    clear

Clear PolygonVector contents.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_clear(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PolygonVector_swap(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  std::vector< VisiLibity::Polygon > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > *","swap", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > &","swap", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Polygon > &","swap", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp2);
  (arg1)->swap(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PolygonVector_get_allocator(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< VisiLibity::Polygon > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > const *","get_allocator", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  result = ((std::vector< VisiLibity::Polygon > const *)arg1)->get_allocator();
  vresult = SWIG_NewPointerObj((new std::vector< VisiLibity::Polygon >::allocator_type(static_cast< const std::vector< VisiLibity::Polygon >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.begin

  call-seq:
    begin -> const_iterator

Return an iterator to the beginning of the PolygonVector.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_begin(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< VisiLibity::Polygon >::const_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > const *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  result = ((std::vector< VisiLibity::Polygon > const *)arg1)->begin();
  vresult = SWIG_NewPointerObj(swig::make_const_iterator(static_cast< const std::vector< VisiLibity::Polygon >::const_iterator & >(result),
      self),
    swig::ConstIterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.end

  call-seq:
    end -> const_iterator

Return an iterator to past the end of the PolygonVector.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_end(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< VisiLibity::Polygon >::const_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > const *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  result = ((std::vector< VisiLibity::Polygon > const *)arg1)->end();
  vresult = SWIG_NewPointerObj(swig::make_const_iterator(static_cast< const std::vector< VisiLibity::Polygon >::const_iterator & >(result),
      self),
    swig::ConstIterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.rbegin

  call-seq:
    rbegin -> const_reverse_iterator

Return a reverse iterator to the beginning (the end) of the PolygonVector.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_rbegin(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< VisiLibity::Polygon >::const_reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > const *","rbegin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  result = ((std::vector< VisiLibity::Polygon > const *)arg1)->rbegin();
  vresult = SWIG_NewPointerObj(swig::make_const_iterator(static_cast< const std::vector< VisiLibity::Polygon >::const_reverse_iterator & >(result),
      self),
    swig::ConstIterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.rend

  call-seq:
    rend -> const_reverse_iterator

Return a reverse iterator to past the end (past the beginning) of the PolygonVector.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_rend(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< VisiLibity::Polygon >::const_reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > const *","rend", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  result = ((std::vector< VisiLibity::Polygon > const *)arg1)->rend();
  vresult = SWIG_NewPointerObj(swig::make_const_iterator(static_cast< const std::vector< VisiLibity::Polygon >::const_reverse_iterator & >(result),
      self),
    swig::ConstIterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_PolygonVector__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< VisiLibity::Polygon > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::size_type","std::vector<(VisiLibity::Polygon)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< VisiLibity::Polygon >::size_type >(val1);
  result = (std::vector< VisiLibity::Polygon > *)new std::vector< VisiLibity::Polygon >(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the PolygonVector.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_resize__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  std::vector< VisiLibity::Polygon >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< VisiLibity::Polygon >::size_type >(val2);
  (arg1)->resize(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.erase

  call-seq:
    erase(pos) -> iterator
    erase(first, last) -> iterator

Delete a portion of the PolygonVector.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_erase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  std::vector< VisiLibity::Polygon >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::vector< VisiLibity::Polygon >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< VisiLibity::Polygon >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< VisiLibity::Polygon >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::iterator","erase", 2, argv[0] ));
    }
  }
  result = (arg1)->erase(arg2);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< VisiLibity::Polygon >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PolygonVector_erase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  std::vector< VisiLibity::Polygon >::iterator arg2 ;
  std::vector< VisiLibity::Polygon >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  swig::Iterator *iter3 = 0 ;
  int res3 ;
  std::vector< VisiLibity::Polygon >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< VisiLibity::Polygon >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< VisiLibity::Polygon >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::iterator","erase", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter3), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::iterator","erase", 3, argv[1] ));
  } else {
    swig::Iterator_T<std::vector< VisiLibity::Polygon >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< VisiLibity::Polygon >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::iterator","erase", 3, argv[1] ));
    }
  }
  result = (arg1)->erase(arg2,arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< VisiLibity::Polygon >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_PolygonVector_erase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< VisiLibity::Polygon >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_PolygonVector_erase__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< VisiLibity::Polygon >::iterator > *>(iter) != 0));
      if (_v) {
        swig::ConstIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), 
          swig::Iterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< VisiLibity::Polygon >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_PolygonVector_erase__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "PolygonVector.erase", 
    "    std::vector< VisiLibity::Polygon >::iterator PolygonVector.erase(std::vector< VisiLibity::Polygon >::iterator pos)\n"
    "    std::vector< VisiLibity::Polygon >::iterator PolygonVector.erase(std::vector< VisiLibity::Polygon >::iterator first, std::vector< VisiLibity::Polygon >::iterator last)\n");
  
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_PolygonVector_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_PolygonVector_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_PolygonVector__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon >::size_type arg1 ;
  std::vector< VisiLibity::Polygon >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< VisiLibity::Polygon > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::size_type","std::vector<(VisiLibity::Polygon)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< VisiLibity::Polygon >::size_type >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__value_type,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::value_type const &","std::vector<(VisiLibity::Polygon)>", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Polygon >::value_type const &","std::vector<(VisiLibity::Polygon)>", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< std::vector< VisiLibity::Polygon >::value_type * >(argp2);
  result = (std::vector< VisiLibity::Polygon > *)new std::vector< VisiLibity::Polygon >(arg1,(std::vector< VisiLibity::Polygon >::value_type const &)*arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_PolygonVector(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_PolygonVector__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_PolygonVector__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PolygonVector__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__value_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_PolygonVector__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "PolygonVector.new", 
    "    PolygonVector.new()\n"
    "    PolygonVector.new(std::vector< VisiLibity::Polygon > const &)\n"
    "    PolygonVector.new(std::vector< VisiLibity::Polygon >::size_type size)\n"
    "    PolygonVector.new(std::vector< VisiLibity::Polygon >::size_type size, std::vector< VisiLibity::Polygon >::value_type const &value)\n");
  
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.front

  call-seq:
    front -> value_type

Return the first element in PolygonVector.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_front(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< VisiLibity::Polygon >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > const *","front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  result = (std::vector< VisiLibity::Polygon >::value_type *) &((std::vector< VisiLibity::Polygon > const *)arg1)->front();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__value_type, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.back

  call-seq:
    back -> value_type

Return the last element in PolygonVector.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_back(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< VisiLibity::Polygon >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > const *","back", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  result = (std::vector< VisiLibity::Polygon >::value_type *) &((std::vector< VisiLibity::Polygon > const *)arg1)->back();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__value_type, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.assign

  call-seq:
    assign(n, x)

Assign a new PolygonVector or portion of it.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_assign(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  std::vector< VisiLibity::Polygon >::size_type arg2 ;
  std::vector< VisiLibity::Polygon >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > *","assign", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::size_type","assign", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< VisiLibity::Polygon >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__value_type,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::value_type const &","assign", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Polygon >::value_type const &","assign", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< VisiLibity::Polygon >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< VisiLibity::Polygon >::value_type const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the PolygonVector.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_resize__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  std::vector< VisiLibity::Polygon >::size_type arg2 ;
  std::vector< VisiLibity::Polygon >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< VisiLibity::Polygon >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__value_type,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::value_type const &","resize", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Polygon >::value_type const &","resize", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< VisiLibity::Polygon >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< VisiLibity::Polygon >::value_type const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_PolygonVector_resize(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PolygonVector_resize__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PolygonVector_resize__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "PolygonVector.resize", 
    "    void PolygonVector.resize(std::vector< VisiLibity::Polygon >::size_type new_size)\n"
    "    void PolygonVector.resize(std::vector< VisiLibity::Polygon >::size_type new_size, std::vector< VisiLibity::Polygon >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.insert

  call-seq:
    insert(pos, argc, ?) -> PolygonVector
    insert(pos, x) -> iterator
    insert(pos, n, x)

Insert one or more new elements in the PolygonVector.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_insert__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  std::vector< VisiLibity::Polygon >::iterator arg2 ;
  std::vector< VisiLibity::Polygon >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< VisiLibity::Polygon >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< VisiLibity::Polygon >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< VisiLibity::Polygon >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::iterator","insert", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__value_type,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::value_type const &","insert", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Polygon >::value_type const &","insert", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< VisiLibity::Polygon >::value_type * >(argp3);
  result = (arg1)->insert(arg2,(std::vector< VisiLibity::Polygon >::value_type const &)*arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< VisiLibity::Polygon >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PolygonVector_insert__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  std::vector< VisiLibity::Polygon >::iterator arg2 ;
  std::vector< VisiLibity::Polygon >::size_type arg3 ;
  std::vector< VisiLibity::Polygon >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< VisiLibity::Polygon >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< VisiLibity::Polygon >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::size_type","insert", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< VisiLibity::Polygon >::size_type >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__value_type,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::value_type const &","insert", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Polygon >::value_type const &","insert", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< std::vector< VisiLibity::Polygon >::value_type * >(argp4);
  (arg1)->insert(arg2,arg3,(std::vector< VisiLibity::Polygon >::value_type const &)*arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_PolygonVector_insert(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< VisiLibity::Polygon >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PolygonVector_insert__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc >= 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_PolygonVector_insert__SWIG_0(nargs, args, self);
          }
          return _wrap_PolygonVector_insert__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< VisiLibity::Polygon >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__value_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_PolygonVector_insert__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "insert", 
    "    void insert(std::vector< VisiLibity::Polygon >::difference_type pos, int argc, VALUE *argv, ...)\n"
    "    void insert(std::vector< VisiLibity::Polygon >::iterator pos, std::vector< VisiLibity::Polygon >::value_type const &x)\n"
    "    void insert(std::vector< VisiLibity::Polygon >::iterator pos, std::vector< VisiLibity::Polygon >::size_type n, std::vector< VisiLibity::Polygon >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.reserve

  call-seq:
    reserve(n)

Reserve memory in the PolygonVector for a number of elements.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_reserve(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  std::vector< VisiLibity::Polygon >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > *","reserve", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon >::size_type","reserve", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< VisiLibity::Polygon >::size_type >(val2);
  (arg1)->reserve(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::PolygonVector.capacity

  call-seq:
    capacity -> size_type

Reserved capacity of the PolygonVector.
*/
SWIGINTERN VALUE
_wrap_PolygonVector_capacity(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon > *arg1 = (std::vector< VisiLibity::Polygon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< VisiLibity::Polygon >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon > const *","capacity", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< VisiLibity::Polygon > * >(argp1);
  result = ((std::vector< VisiLibity::Polygon > const *)arg1)->capacity();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_vector_Sl_VisiLibity_Polygon_Sg_(std::vector< VisiLibity::Polygon > *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_FIOS_PRECISION_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_int(static_cast< int >(VisiLibity::FIOS_PRECISION));
  return _val;
}


SWIGINTERN VALUE
_wrap_uniform_random_sample(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","VisiLibity::uniform_random_sample", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","VisiLibity::uniform_random_sample", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  result = (double)VisiLibity::uniform_random_sample(arg1,arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassBoundingBox;

SWIGINTERN VALUE
_wrap_BoundingBox_x_min_set(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Bounding_Box *arg1 = (VisiLibity::Bounding_Box *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Bounding_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Bounding_Box *","x_min", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Bounding_Box * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","x_min", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->x_min = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BoundingBox_x_min_get(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Bounding_Box *arg1 = (VisiLibity::Bounding_Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Bounding_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Bounding_Box *","x_min", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Bounding_Box * >(argp1);
  result = (double) ((arg1)->x_min);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BoundingBox_x_max_set(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Bounding_Box *arg1 = (VisiLibity::Bounding_Box *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Bounding_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Bounding_Box *","x_max", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Bounding_Box * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","x_max", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->x_max = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BoundingBox_x_max_get(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Bounding_Box *arg1 = (VisiLibity::Bounding_Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Bounding_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Bounding_Box *","x_max", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Bounding_Box * >(argp1);
  result = (double) ((arg1)->x_max);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BoundingBox_y_min_set(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Bounding_Box *arg1 = (VisiLibity::Bounding_Box *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Bounding_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Bounding_Box *","y_min", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Bounding_Box * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","y_min", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->y_min = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BoundingBox_y_min_get(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Bounding_Box *arg1 = (VisiLibity::Bounding_Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Bounding_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Bounding_Box *","y_min", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Bounding_Box * >(argp1);
  result = (double) ((arg1)->y_min);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BoundingBox_y_max_set(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Bounding_Box *arg1 = (VisiLibity::Bounding_Box *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Bounding_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Bounding_Box *","y_max", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Bounding_Box * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","y_max", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->y_max = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BoundingBox_y_max_get(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Bounding_Box *arg1 = (VisiLibity::Bounding_Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Bounding_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Bounding_Box *","y_max", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Bounding_Box * >(argp1);
  result = (double) ((arg1)->y_max);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BoundingBox_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BoundingBox_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_VisiLibity__Bounding_Box);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BoundingBox(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Bounding_Box *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (VisiLibity::Bounding_Box *)new VisiLibity::Bounding_Box();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_VisiLibity_Bounding_Box(VisiLibity::Bounding_Box *arg1) {
    delete arg1;
}

swig_class SwigClassPoint;

SWIGINTERN VALUE
_wrap_new_Point__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (VisiLibity::Point *)new VisiLibity::Point();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Point_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Point_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_VisiLibity__Point);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Point__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  VisiLibity::Point *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","VisiLibity::Point", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","VisiLibity::Point", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  result = (VisiLibity::Point *)new VisiLibity::Point(arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Point(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Point__SWIG_0(nargs, args, self);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Point__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Point.new", 
    "    Point.new()\n"
    "    Point.new(double x_temp, double y_temp)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_x(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const *","x", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  result = (double)((VisiLibity::Point const *)arg1)->x();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_y(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const *","y", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  result = (double)((VisiLibity::Point const *)arg1)->y();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_projection_onto__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  VisiLibity::Line_Segment *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VisiLibity::Point result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const *","projection_onto", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","projection_onto", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","projection_onto", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Line_Segment * >(argp2);
  result = ((VisiLibity::Point const *)arg1)->projection_onto((VisiLibity::Line_Segment const &)*arg2);
  vresult = SWIG_NewPointerObj((new VisiLibity::Point(static_cast< const VisiLibity::Point& >(result))), SWIGTYPE_p_VisiLibity__Point, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_projection_onto__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  VisiLibity::Ray *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VisiLibity::Point result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const *","projection_onto", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Ray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Ray const &","projection_onto", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Ray const &","projection_onto", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Ray * >(argp2);
  result = ((VisiLibity::Point const *)arg1)->projection_onto((VisiLibity::Ray const &)*arg2);
  vresult = SWIG_NewPointerObj((new VisiLibity::Point(static_cast< const VisiLibity::Point& >(result))), SWIGTYPE_p_VisiLibity__Point, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_projection_onto__SWIG_2(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  VisiLibity::Polyline *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VisiLibity::Point result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const *","projection_onto", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Polyline,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polyline const &","projection_onto", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polyline const &","projection_onto", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polyline * >(argp2);
  result = ((VisiLibity::Point const *)arg1)->projection_onto((VisiLibity::Polyline const &)*arg2);
  vresult = SWIG_NewPointerObj((new VisiLibity::Point(static_cast< const VisiLibity::Point& >(result))), SWIGTYPE_p_VisiLibity__Point, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Point_projection_onto(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Point_projection_onto__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Ray, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Point_projection_onto__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polyline, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Point_projection_onto__SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Point.projection_onto", 
    "    VisiLibity::Point Point.projection_onto(VisiLibity::Line_Segment const &line_segment_temp)\n"
    "    VisiLibity::Point Point.projection_onto(VisiLibity::Ray const &ray_temp)\n"
    "    VisiLibity::Point Point.projection_onto(VisiLibity::Polyline const &polyline_temp)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_projection_onto_vertices_of__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  VisiLibity::Polygon *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VisiLibity::Point result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const *","projection_onto_vertices_of", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Polygon,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polygon const &","projection_onto_vertices_of", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon const &","projection_onto_vertices_of", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polygon * >(argp2);
  result = ((VisiLibity::Point const *)arg1)->projection_onto_vertices_of((VisiLibity::Polygon const &)*arg2);
  vresult = SWIG_NewPointerObj((new VisiLibity::Point(static_cast< const VisiLibity::Point& >(result))), SWIGTYPE_p_VisiLibity__Point, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_projection_onto_vertices_of__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  VisiLibity::Environment *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VisiLibity::Point result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const *","projection_onto_vertices_of", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Environment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Environment const &","projection_onto_vertices_of", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Environment const &","projection_onto_vertices_of", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Environment * >(argp2);
  result = ((VisiLibity::Point const *)arg1)->projection_onto_vertices_of((VisiLibity::Environment const &)*arg2);
  vresult = SWIG_NewPointerObj((new VisiLibity::Point(static_cast< const VisiLibity::Point& >(result))), SWIGTYPE_p_VisiLibity__Point, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Point_projection_onto_vertices_of(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Point_projection_onto_vertices_of__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Point_projection_onto_vertices_of__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Point.projection_onto_vertices_of", 
    "    VisiLibity::Point Point.projection_onto_vertices_of(VisiLibity::Polygon const &polygon_temp)\n"
    "    VisiLibity::Point Point.projection_onto_vertices_of(VisiLibity::Environment const &enviroment_temp)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_projection_onto_boundary_of__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  VisiLibity::Polygon *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VisiLibity::Point result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const *","projection_onto_boundary_of", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Polygon,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polygon const &","projection_onto_boundary_of", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon const &","projection_onto_boundary_of", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polygon * >(argp2);
  result = ((VisiLibity::Point const *)arg1)->projection_onto_boundary_of((VisiLibity::Polygon const &)*arg2);
  vresult = SWIG_NewPointerObj((new VisiLibity::Point(static_cast< const VisiLibity::Point& >(result))), SWIGTYPE_p_VisiLibity__Point, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_projection_onto_boundary_of__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  VisiLibity::Environment *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VisiLibity::Point result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const *","projection_onto_boundary_of", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Environment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Environment const &","projection_onto_boundary_of", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Environment const &","projection_onto_boundary_of", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Environment * >(argp2);
  result = ((VisiLibity::Point const *)arg1)->projection_onto_boundary_of((VisiLibity::Environment const &)*arg2);
  vresult = SWIG_NewPointerObj((new VisiLibity::Point(static_cast< const VisiLibity::Point& >(result))), SWIGTYPE_p_VisiLibity__Point, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Point_projection_onto_boundary_of(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Point_projection_onto_boundary_of__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Point_projection_onto_boundary_of__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Point.projection_onto_boundary_of", 
    "    VisiLibity::Point Point.projection_onto_boundary_of(VisiLibity::Polygon const &polygon_temp)\n"
    "    VisiLibity::Point Point.projection_onto_boundary_of(VisiLibity::Environment const &enviroment_temp)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_on_boundary_of__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  VisiLibity::Polygon *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const *","on_boundary_of", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Polygon,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polygon const &","on_boundary_of", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon const &","on_boundary_of", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polygon * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","on_boundary_of", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)((VisiLibity::Point const *)arg1)->on_boundary_of((VisiLibity::Polygon const &)*arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_on_boundary_of__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  VisiLibity::Polygon *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const *","on_boundary_of", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Polygon,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polygon const &","on_boundary_of", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon const &","on_boundary_of", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polygon * >(argp2);
  result = (bool)((VisiLibity::Point const *)arg1)->on_boundary_of((VisiLibity::Polygon const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_on_boundary_of__SWIG_2(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  VisiLibity::Environment *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const *","on_boundary_of", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Environment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Environment const &","on_boundary_of", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Environment const &","on_boundary_of", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Environment * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","on_boundary_of", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)((VisiLibity::Point const *)arg1)->on_boundary_of((VisiLibity::Environment const &)*arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_on_boundary_of__SWIG_3(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  VisiLibity::Environment *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const *","on_boundary_of", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Environment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Environment const &","on_boundary_of", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Environment const &","on_boundary_of", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Environment * >(argp2);
  result = (bool)((VisiLibity::Point const *)arg1)->on_boundary_of((VisiLibity::Environment const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Point_on_boundary_of(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Point_on_boundary_of__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Point_on_boundary_of__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Point_on_boundary_of__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Point_on_boundary_of__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Point.on_boundary_of", 
    "    bool Point.on_boundary_of(VisiLibity::Polygon const &polygon_temp, double epsilon)\n"
    "    bool Point.on_boundary_of(VisiLibity::Polygon const &polygon_temp)\n"
    "    bool Point.on_boundary_of(VisiLibity::Environment const &environment_temp, double epsilon)\n"
    "    bool Point.on_boundary_of(VisiLibity::Environment const &environment_temp)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_in__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  VisiLibity::Line_Segment *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const *","in", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","in", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","in", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Line_Segment * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","in", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)((VisiLibity::Point const *)arg1)->in((VisiLibity::Line_Segment const &)*arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_in__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  VisiLibity::Line_Segment *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const *","in", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","in", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","in", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Line_Segment * >(argp2);
  result = (bool)((VisiLibity::Point const *)arg1)->in((VisiLibity::Line_Segment const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_in_relative_interior_of__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  VisiLibity::Line_Segment *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const *","in_relative_interior_of", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","in_relative_interior_of", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","in_relative_interior_of", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Line_Segment * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","in_relative_interior_of", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)((VisiLibity::Point const *)arg1)->in_relative_interior_of((VisiLibity::Line_Segment const &)*arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_in_relative_interior_of__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  VisiLibity::Line_Segment *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const *","in_relative_interior_of", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","in_relative_interior_of", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","in_relative_interior_of", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Line_Segment * >(argp2);
  result = (bool)((VisiLibity::Point const *)arg1)->in_relative_interior_of((VisiLibity::Line_Segment const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Point_in_relative_interior_of(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Point_in_relative_interior_of__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Point_in_relative_interior_of__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Point.in_relative_interior_of", 
    "    bool Point.in_relative_interior_of(VisiLibity::Line_Segment const &line_segment_temp, double epsilon)\n"
    "    bool Point.in_relative_interior_of(VisiLibity::Line_Segment const &line_segment_temp)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_in__SWIG_2(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  VisiLibity::Polygon *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const *","in", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Polygon,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polygon const &","in", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon const &","in", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polygon * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","in", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)((VisiLibity::Point const *)arg1)->in((VisiLibity::Polygon const &)*arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_in__SWIG_3(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  VisiLibity::Polygon *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const *","in", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Polygon,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polygon const &","in", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon const &","in", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polygon * >(argp2);
  result = (bool)((VisiLibity::Point const *)arg1)->in((VisiLibity::Polygon const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_in__SWIG_4(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  VisiLibity::Environment *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const *","in", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Environment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Environment const &","in", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Environment const &","in", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Environment * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","in", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)((VisiLibity::Point const *)arg1)->in((VisiLibity::Environment const &)*arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_in__SWIG_5(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  VisiLibity::Environment *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const *","in", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Environment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Environment const &","in", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Environment const &","in", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Environment * >(argp2);
  result = (bool)((VisiLibity::Point const *)arg1)->in((VisiLibity::Environment const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Point_in(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Point_in__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Point_in__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Point_in__SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Point_in__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Point_in__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Point_in__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Point.in", 
    "    bool Point.in(VisiLibity::Line_Segment const &line_segment_temp, double epsilon)\n"
    "    bool Point.in(VisiLibity::Line_Segment const &line_segment_temp)\n"
    "    bool Point.in(VisiLibity::Polygon const &polygon_temp, double epsilon)\n"
    "    bool Point.in(VisiLibity::Polygon const &polygon_temp)\n"
    "    bool Point.in(VisiLibity::Environment const &environment_temp, double epsilon)\n"
    "    bool Point.in(VisiLibity::Environment const &environment_temp)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_endpoint_ofq_____SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  VisiLibity::Line_Segment *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const *","is_endpoint_of", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","is_endpoint_of", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","is_endpoint_of", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Line_Segment * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","is_endpoint_of", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)((VisiLibity::Point const *)arg1)->is_endpoint_of((VisiLibity::Line_Segment const &)*arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_endpoint_ofq_____SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  VisiLibity::Line_Segment *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const *","is_endpoint_of", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","is_endpoint_of", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","is_endpoint_of", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Line_Segment * >(argp2);
  result = (bool)((VisiLibity::Point const *)arg1)->is_endpoint_of((VisiLibity::Line_Segment const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Point_endpoint_ofq___(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Point_endpoint_ofq_____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Point_endpoint_ofq_____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Point.endpoint_of?", 
    "    bool Point.endpoint_of?(VisiLibity::Line_Segment const &line_segment_temp, double epsilon)\n"
    "    bool Point.endpoint_of?(VisiLibity::Line_Segment const &line_segment_temp)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_set_x(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point *","set_x", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_x", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->set_x(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_set_y(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point *","set_y", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_y", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->set_y(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_snap_to_vertices_of__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  VisiLibity::Polygon *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point *","snap_to_vertices_of", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Polygon,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polygon const &","snap_to_vertices_of", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon const &","snap_to_vertices_of", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polygon * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","snap_to_vertices_of", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->snap_to_vertices_of((VisiLibity::Polygon const &)*arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_snap_to_vertices_of__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  VisiLibity::Polygon *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point *","snap_to_vertices_of", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Polygon,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polygon const &","snap_to_vertices_of", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon const &","snap_to_vertices_of", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polygon * >(argp2);
  (arg1)->snap_to_vertices_of((VisiLibity::Polygon const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_snap_to_vertices_of__SWIG_2(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  VisiLibity::Environment *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point *","snap_to_vertices_of", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Environment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Environment const &","snap_to_vertices_of", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Environment const &","snap_to_vertices_of", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Environment * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","snap_to_vertices_of", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->snap_to_vertices_of((VisiLibity::Environment const &)*arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_snap_to_vertices_of__SWIG_3(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  VisiLibity::Environment *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point *","snap_to_vertices_of", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Environment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Environment const &","snap_to_vertices_of", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Environment const &","snap_to_vertices_of", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Environment * >(argp2);
  (arg1)->snap_to_vertices_of((VisiLibity::Environment const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Point_snap_to_vertices_of(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Point_snap_to_vertices_of__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Point_snap_to_vertices_of__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Point_snap_to_vertices_of__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Point_snap_to_vertices_of__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Point.snap_to_vertices_of", 
    "    void Point.snap_to_vertices_of(VisiLibity::Polygon const &polygon_temp, double epsilon)\n"
    "    void Point.snap_to_vertices_of(VisiLibity::Polygon const &polygon_temp)\n"
    "    void Point.snap_to_vertices_of(VisiLibity::Environment const &environment_temp, double epsilon)\n"
    "    void Point.snap_to_vertices_of(VisiLibity::Environment const &environment_temp)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_snap_to_boundary_of__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  VisiLibity::Polygon *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point *","snap_to_boundary_of", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Polygon,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polygon const &","snap_to_boundary_of", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon const &","snap_to_boundary_of", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polygon * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","snap_to_boundary_of", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->snap_to_boundary_of((VisiLibity::Polygon const &)*arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_snap_to_boundary_of__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  VisiLibity::Polygon *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point *","snap_to_boundary_of", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Polygon,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polygon const &","snap_to_boundary_of", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon const &","snap_to_boundary_of", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polygon * >(argp2);
  (arg1)->snap_to_boundary_of((VisiLibity::Polygon const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_snap_to_boundary_of__SWIG_2(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  VisiLibity::Environment *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point *","snap_to_boundary_of", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Environment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Environment const &","snap_to_boundary_of", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Environment const &","snap_to_boundary_of", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Environment * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","snap_to_boundary_of", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->snap_to_boundary_of((VisiLibity::Environment const &)*arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Point_snap_to_boundary_of__SWIG_3(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = (VisiLibity::Point *) 0 ;
  VisiLibity::Environment *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point *","snap_to_boundary_of", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Environment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Environment const &","snap_to_boundary_of", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Environment const &","snap_to_boundary_of", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Environment * >(argp2);
  (arg1)->snap_to_boundary_of((VisiLibity::Environment const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Point_snap_to_boundary_of(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Point_snap_to_boundary_of__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Point_snap_to_boundary_of__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Point_snap_to_boundary_of__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Point_snap_to_boundary_of__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Point.snap_to_boundary_of", 
    "    void Point.snap_to_boundary_of(VisiLibity::Polygon const &polygon_temp, double epsilon)\n"
    "    void Point.snap_to_boundary_of(VisiLibity::Polygon const &polygon_temp)\n"
    "    void Point.snap_to_boundary_of(VisiLibity::Environment const &environment_temp, double epsilon)\n"
    "    void Point.snap_to_boundary_of(VisiLibity::Environment const &environment_temp)\n");
  
  return Qnil;
}


SWIGINTERN void
free_VisiLibity_Point(VisiLibity::Point *arg1) {
    delete arg1;
}


/*
  Document-method: VisiLibity::VisiLibity.==

  call-seq:
    ==(point1, point2) -> bool
    ==(line_segment1, line_segment2) -> bool
    ==(angle1, angle2) -> bool
    ==(polar_point1, polar_point2) -> bool
    ==(ray1, ray2) -> bool
    ==(polygon1, polygon2) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap___eq____SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = 0 ;
  VisiLibity::Point *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::operator ==", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::operator ==", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::operator ==", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::operator ==", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  result = (bool)VisiLibity::operator ==((VisiLibity::Point const &)*arg1,(VisiLibity::Point const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::VisiLibity.<

  call-seq:
    <(point1, point2) -> bool
    <(angle1, angle2) -> bool
    <(polar_point1, polar_point2) -> bool

Lower than comparison operator.
*/
SWIGINTERN VALUE
_wrap___lt____SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = 0 ;
  VisiLibity::Point *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::operator <", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::operator <", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::operator <", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::operator <", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  result = (bool)VisiLibity::operator <((VisiLibity::Point const &)*arg1,(VisiLibity::Point const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::VisiLibity.>

  call-seq:
    >(point1, point2) -> bool
    >(angle1, angle2) -> bool
    >(polar_point1, polar_point2) -> bool

Higher than comparison operator.
*/
SWIGINTERN VALUE
_wrap___gt____SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = 0 ;
  VisiLibity::Point *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::operator >", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::operator >", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::operator >", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::operator >", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  result = (bool)VisiLibity::operator >((VisiLibity::Point const &)*arg1,(VisiLibity::Point const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::VisiLibity.>=

  call-seq:
    >=(point1, point2) -> bool
    >=(angle1, angle2) -> bool
    >=(polar_point1, polar_point2) -> bool

Higher or equal comparison operator.
*/
SWIGINTERN VALUE
_wrap___ge____SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = 0 ;
  VisiLibity::Point *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::operator >=", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::operator >=", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::operator >=", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::operator >=", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  result = (bool)VisiLibity::operator >=((VisiLibity::Point const &)*arg1,(VisiLibity::Point const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::VisiLibity.<=

  call-seq:
    <=(point1, point2) -> bool
    <=(angle1, angle2) -> bool
    <=(polar_point1, polar_point2) -> bool

Lower or equal comparison operator.
*/
SWIGINTERN VALUE
_wrap___le____SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = 0 ;
  VisiLibity::Point *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::operator <=", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::operator <=", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::operator <=", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::operator <=", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  result = (bool)VisiLibity::operator <=((VisiLibity::Point const &)*arg1,(VisiLibity::Point const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::VisiLibity.+

  call-seq:
    +(point1, point2) -> Point
    +(angle1, angle2) -> Angle

Add operator.
*/
SWIGINTERN VALUE
_wrap___add____SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = 0 ;
  VisiLibity::Point *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VisiLibity::Point result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::operator +", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::operator +", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::operator +", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::operator +", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  result = VisiLibity::operator +((VisiLibity::Point const &)*arg1,(VisiLibity::Point const &)*arg2);
  vresult = SWIG_NewPointerObj((new VisiLibity::Point(static_cast< const VisiLibity::Point& >(result))), SWIGTYPE_p_VisiLibity__Point, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::VisiLibity.-

  call-seq:
    -(point1, point2) -> Point
    -(angle1, angle2) -> Angle

Substraction operator.
*/
SWIGINTERN VALUE
_wrap___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = 0 ;
  VisiLibity::Point *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VisiLibity::Point result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::operator -", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::operator -", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::operator -", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::operator -", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  result = VisiLibity::operator -((VisiLibity::Point const &)*arg1,(VisiLibity::Point const &)*arg2);
  vresult = SWIG_NewPointerObj((new VisiLibity::Point(static_cast< const VisiLibity::Point& >(result))), SWIGTYPE_p_VisiLibity__Point, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = 0 ;
  VisiLibity::Point *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VisiLibity::Point result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::operator *", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::operator *", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::operator *", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::operator *", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  result = VisiLibity::operator *((VisiLibity::Point const &)*arg1,(VisiLibity::Point const &)*arg2);
  vresult = SWIG_NewPointerObj((new VisiLibity::Point(static_cast< const VisiLibity::Point& >(result))), SWIGTYPE_p_VisiLibity__Point, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  VisiLibity::Point *arg2 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VisiLibity::Point result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","VisiLibity::operator *", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::operator *", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::operator *", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  result = VisiLibity::operator *(arg1,(VisiLibity::Point const &)*arg2);
  vresult = SWIG_NewPointerObj((new VisiLibity::Point(static_cast< const VisiLibity::Point& >(result))), SWIGTYPE_p_VisiLibity__Point, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap___mul____SWIG_2(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  VisiLibity::Point result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::operator *", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::operator *", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","VisiLibity::operator *", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  result = VisiLibity::operator *((VisiLibity::Point const &)*arg1,arg2);
  vresult = SWIG_NewPointerObj((new VisiLibity::Point(static_cast< const VisiLibity::Point& >(result))), SWIGTYPE_p_VisiLibity__Point, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap___mul____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "__mul__", 
    "    VisiLibity::Point __mul__(VisiLibity::Point const &point1, VisiLibity::Point const &point2)\n"
    "    VisiLibity::Point __mul__(double scalar, VisiLibity::Point const &point2)\n"
    "    VisiLibity::Point __mul__(VisiLibity::Point const &point1, double scalar)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_cross(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = 0 ;
  VisiLibity::Point *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::cross", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::cross", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::cross", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::cross", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  result = (double)VisiLibity::cross((VisiLibity::Point const &)*arg1,(VisiLibity::Point const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_distance__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = 0 ;
  VisiLibity::Point *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::distance", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::distance", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::distance", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::distance", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  result = (double)VisiLibity::distance((VisiLibity::Point const &)*arg1,(VisiLibity::Point const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_distance__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = 0 ;
  VisiLibity::Line_Segment *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::distance", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::distance", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","VisiLibity::distance", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","VisiLibity::distance", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Line_Segment * >(argp2);
  result = (double)VisiLibity::distance((VisiLibity::Point const &)*arg1,(VisiLibity::Line_Segment const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_distance__SWIG_2(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Line_Segment *arg1 = 0 ;
  VisiLibity::Point *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","VisiLibity::distance", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","VisiLibity::distance", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Line_Segment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::distance", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::distance", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  result = (double)VisiLibity::distance((VisiLibity::Line_Segment const &)*arg1,(VisiLibity::Point const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_distance__SWIG_3(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = 0 ;
  VisiLibity::Ray *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::distance", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::distance", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Ray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Ray const &","VisiLibity::distance", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Ray const &","VisiLibity::distance", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Ray * >(argp2);
  result = (double)VisiLibity::distance((VisiLibity::Point const &)*arg1,(VisiLibity::Ray const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_distance__SWIG_4(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Ray *arg1 = 0 ;
  VisiLibity::Point *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Ray,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Ray const &","VisiLibity::distance", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Ray const &","VisiLibity::distance", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Ray * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::distance", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::distance", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  result = (double)VisiLibity::distance((VisiLibity::Ray const &)*arg1,(VisiLibity::Point const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_distance__SWIG_5(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = 0 ;
  VisiLibity::Polyline *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::distance", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::distance", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Polyline,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polyline const &","VisiLibity::distance", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polyline const &","VisiLibity::distance", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polyline * >(argp2);
  result = (double)VisiLibity::distance((VisiLibity::Point const &)*arg1,(VisiLibity::Polyline const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_distance__SWIG_6(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polyline *arg1 = 0 ;
  VisiLibity::Point *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Polyline,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polyline const &","VisiLibity::distance", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polyline const &","VisiLibity::distance", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polyline * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::distance", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::distance", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  result = (double)VisiLibity::distance((VisiLibity::Polyline const &)*arg1,(VisiLibity::Point const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_boundary_distance__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = 0 ;
  VisiLibity::Polygon *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::boundary_distance", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::boundary_distance", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Polygon,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polygon const &","VisiLibity::boundary_distance", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon const &","VisiLibity::boundary_distance", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polygon * >(argp2);
  result = (double)VisiLibity::boundary_distance((VisiLibity::Point const &)*arg1,(VisiLibity::Polygon const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_boundary_distance__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon *arg1 = 0 ;
  VisiLibity::Point *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Polygon,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polygon const &","VisiLibity::boundary_distance", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon const &","VisiLibity::boundary_distance", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polygon * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::boundary_distance", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::boundary_distance", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  result = (double)VisiLibity::boundary_distance((VisiLibity::Polygon const &)*arg1,(VisiLibity::Point const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_boundary_distance__SWIG_2(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = 0 ;
  VisiLibity::Environment *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::boundary_distance", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::boundary_distance", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Environment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Environment const &","VisiLibity::boundary_distance", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Environment const &","VisiLibity::boundary_distance", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Environment * >(argp2);
  result = (double)VisiLibity::boundary_distance((VisiLibity::Point const &)*arg1,(VisiLibity::Environment const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_boundary_distance__SWIG_3(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = 0 ;
  VisiLibity::Point *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Environment,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment const &","VisiLibity::boundary_distance", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Environment const &","VisiLibity::boundary_distance", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::boundary_distance", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::boundary_distance", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  result = (double)VisiLibity::boundary_distance((VisiLibity::Environment const &)*arg1,(VisiLibity::Point const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::VisiLibity.<<

  call-seq:
    <<(outs, point_temp) -> std::ostream
    <<(outs, line_segment_temp) -> std::ostream
    <<(outs, angle_temp) -> std::ostream
    <<(outs, polar_point_temp) -> std::ostream
    <<(outs, polyline_temp) -> std::ostream
    <<(outs, polygon_temp) -> std::ostream
    <<(outs, environment_temp) -> std::ostream
    <<(outs, guards) -> std::ostream
    <<(outs, visibility_graph) -> std::ostream

Left shifting or appending operator.
*/
SWIGINTERN VALUE
_wrap___lshift____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  VisiLibity::Point *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","VisiLibity::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","VisiLibity::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  result = (std::ostream *) &VisiLibity::operator <<(*arg1,(VisiLibity::Point const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassLineSegment;

SWIGINTERN VALUE
_wrap_new_LineSegment__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Line_Segment *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (VisiLibity::Line_Segment *)new VisiLibity::Line_Segment();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_LineSegment__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Line_Segment *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  VisiLibity::Line_Segment *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","VisiLibity::Line_Segment", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","VisiLibity::Line_Segment", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Line_Segment * >(argp1);
  result = (VisiLibity::Line_Segment *)new VisiLibity::Line_Segment((VisiLibity::Line_Segment const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_LineSegment__SWIG_2(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  VisiLibity::Line_Segment *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::Line_Segment", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::Line_Segment", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  result = (VisiLibity::Line_Segment *)new VisiLibity::Line_Segment((VisiLibity::Point const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_LineSegment__SWIG_3(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = 0 ;
  VisiLibity::Point *arg2 = 0 ;
  double arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  VisiLibity::Line_Segment *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::Line_Segment", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::Line_Segment", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::Line_Segment", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::Line_Segment", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","VisiLibity::Line_Segment", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  result = (VisiLibity::Line_Segment *)new VisiLibity::Line_Segment((VisiLibity::Point const &)*arg1,(VisiLibity::Point const &)*arg2,arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_LineSegment_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_LineSegment_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_VisiLibity__Line_Segment);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_LineSegment__SWIG_4(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = 0 ;
  VisiLibity::Point *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VisiLibity::Line_Segment *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::Line_Segment", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::Line_Segment", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::Line_Segment", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::Line_Segment", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  result = (VisiLibity::Line_Segment *)new VisiLibity::Line_Segment((VisiLibity::Point const &)*arg1,(VisiLibity::Point const &)*arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_LineSegment(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_LineSegment__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LineSegment__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LineSegment__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_LineSegment__SWIG_4(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_LineSegment__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "LineSegment.new", 
    "    LineSegment.new()\n"
    "    LineSegment.new(VisiLibity::Line_Segment const &line_segment_temp)\n"
    "    LineSegment.new(VisiLibity::Point const &point_temp)\n"
    "    LineSegment.new(VisiLibity::Point const &first_point_temp, VisiLibity::Point const &second_point_temp, double epsilon)\n"
    "    LineSegment.new(VisiLibity::Point const &first_point_temp, VisiLibity::Point const &second_point_temp)\n");
  
  return Qnil;
}



/*
  Document-method: VisiLibity::LineSegment.first

  call-seq:
    first -> Point

Return the first element in LineSegment.
*/
SWIGINTERN VALUE
_wrap_LineSegment_first(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Line_Segment *arg1 = (VisiLibity::Line_Segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VisiLibity::Point result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Line_Segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const *","first", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Line_Segment * >(argp1);
  result = ((VisiLibity::Line_Segment const *)arg1)->first();
  vresult = SWIG_NewPointerObj((new VisiLibity::Point(static_cast< const VisiLibity::Point& >(result))), SWIGTYPE_p_VisiLibity__Point, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::LineSegment.second

  call-seq:
    second -> Point

Return the second element in LineSegment.
*/
SWIGINTERN VALUE
_wrap_LineSegment_second(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Line_Segment *arg1 = (VisiLibity::Line_Segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VisiLibity::Point result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Line_Segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const *","second", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Line_Segment * >(argp1);
  result = ((VisiLibity::Line_Segment const *)arg1)->second();
  vresult = SWIG_NewPointerObj((new VisiLibity::Point(static_cast< const VisiLibity::Point& >(result))), SWIGTYPE_p_VisiLibity__Point, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::LineSegment.size

  call-seq:
    size -> unsigned int

Size or Length of the LineSegment.
*/
SWIGINTERN VALUE
_wrap_LineSegment_size(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Line_Segment *arg1 = (VisiLibity::Line_Segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Line_Segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Line_Segment * >(argp1);
  result = (unsigned int)((VisiLibity::Line_Segment const *)arg1)->size();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_midpoint(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Line_Segment *arg1 = (VisiLibity::Line_Segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VisiLibity::Point result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Line_Segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const *","midpoint", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Line_Segment * >(argp1);
  result = ((VisiLibity::Line_Segment const *)arg1)->midpoint();
  vresult = SWIG_NewPointerObj((new VisiLibity::Point(static_cast< const VisiLibity::Point& >(result))), SWIGTYPE_p_VisiLibity__Point, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::LineSegment.length

  call-seq:
    length -> double

Size or Length of the LineSegment.
*/
SWIGINTERN VALUE
_wrap_LineSegment_length(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Line_Segment *arg1 = (VisiLibity::Line_Segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Line_Segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const *","length", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Line_Segment * >(argp1);
  result = (double)((VisiLibity::Line_Segment const *)arg1)->length();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_in_standard_formq___(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Line_Segment *arg1 = (VisiLibity::Line_Segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Line_Segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const *","is_in_standard_form", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Line_Segment * >(argp1);
  result = (bool)((VisiLibity::Line_Segment const *)arg1)->is_in_standard_form();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_set_first__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Line_Segment *arg1 = (VisiLibity::Line_Segment *) 0 ;
  VisiLibity::Point *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Line_Segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment *","set_first", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Line_Segment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","set_first", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","set_first", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","set_first", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->set_first((VisiLibity::Point const &)*arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_set_first__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Line_Segment *arg1 = (VisiLibity::Line_Segment *) 0 ;
  VisiLibity::Point *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Line_Segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment *","set_first", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Line_Segment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","set_first", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","set_first", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  (arg1)->set_first((VisiLibity::Point const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LineSegment_set_first(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LineSegment_set_first__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LineSegment_set_first__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "LineSegment.set_first", 
    "    void LineSegment.set_first(VisiLibity::Point const &point_temp, double epsilon)\n"
    "    void LineSegment.set_first(VisiLibity::Point const &point_temp)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_set_second__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Line_Segment *arg1 = (VisiLibity::Line_Segment *) 0 ;
  VisiLibity::Point *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Line_Segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment *","set_second", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Line_Segment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","set_second", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","set_second", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","set_second", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->set_second((VisiLibity::Point const &)*arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_set_second__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Line_Segment *arg1 = (VisiLibity::Line_Segment *) 0 ;
  VisiLibity::Point *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Line_Segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment *","set_second", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Line_Segment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","set_second", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","set_second", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  (arg1)->set_second((VisiLibity::Point const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LineSegment_set_second(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LineSegment_set_second__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LineSegment_set_second__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "LineSegment.set_second", 
    "    void LineSegment.set_second(VisiLibity::Point const &point_temp, double epsilon)\n"
    "    void LineSegment.set_second(VisiLibity::Point const &point_temp)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_reverse(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Line_Segment *arg1 = (VisiLibity::Line_Segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Line_Segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment *","reverse", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Line_Segment * >(argp1);
  (arg1)->reverse();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_enforce_standard_form(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Line_Segment *arg1 = (VisiLibity::Line_Segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Line_Segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment *","enforce_standard_form", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Line_Segment * >(argp1);
  (arg1)->enforce_standard_form();
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::LineSegment.clear

  call-seq:
    clear

Clear LineSegment contents.
*/
SWIGINTERN VALUE
_wrap_LineSegment_clear(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Line_Segment *arg1 = (VisiLibity::Line_Segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Line_Segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Line_Segment * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN void
free_VisiLibity_Line_Segment(VisiLibity::Line_Segment *arg1) {
    delete arg1;
}


/*
  Document-method: VisiLibity::VisiLibity.==

  call-seq:
    ==(point1, point2) -> bool
    ==(line_segment1, line_segment2) -> bool
    ==(angle1, angle2) -> bool
    ==(polar_point1, polar_point2) -> bool
    ==(ray1, ray2) -> bool
    ==(polygon1, polygon2) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap___eq____SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Line_Segment *arg1 = 0 ;
  VisiLibity::Line_Segment *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","VisiLibity::operator ==", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","VisiLibity::operator ==", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Line_Segment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","VisiLibity::operator ==", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","VisiLibity::operator ==", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Line_Segment * >(argp2);
  result = (bool)VisiLibity::operator ==((VisiLibity::Line_Segment const &)*arg1,(VisiLibity::Line_Segment const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_equivalent__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Line_Segment arg1 ;
  VisiLibity::Line_Segment arg2 ;
  double arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment","VisiLibity::equivalent", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment","VisiLibity::equivalent", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< VisiLibity::Line_Segment * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment","VisiLibity::equivalent", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment","VisiLibity::equivalent", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< VisiLibity::Line_Segment * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","VisiLibity::equivalent", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)VisiLibity::equivalent(arg1,arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_equivalent__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Line_Segment arg1 ;
  VisiLibity::Line_Segment arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment","VisiLibity::equivalent", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment","VisiLibity::equivalent", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< VisiLibity::Line_Segment * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment","VisiLibity::equivalent", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment","VisiLibity::equivalent", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< VisiLibity::Line_Segment * >(argp2));
    }
  }
  result = (bool)VisiLibity::equivalent(arg1,arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_distance__SWIG_7(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Line_Segment *arg1 = 0 ;
  VisiLibity::Line_Segment *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","VisiLibity::distance", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","VisiLibity::distance", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Line_Segment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","VisiLibity::distance", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","VisiLibity::distance", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Line_Segment * >(argp2);
  result = (double)VisiLibity::distance((VisiLibity::Line_Segment const &)*arg1,(VisiLibity::Line_Segment const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_distance(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_distance__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_distance__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_distance__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Ray, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_distance__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Ray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_distance__SWIG_4(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polyline, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_distance__SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Polyline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_distance__SWIG_6(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_distance__SWIG_7(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "distance", 
    "    double distance(VisiLibity::Point const &point1, VisiLibity::Point const &point2)\n"
    "    double distance(VisiLibity::Point const &point_temp, VisiLibity::Line_Segment const &line_segment_temp)\n"
    "    double distance(VisiLibity::Line_Segment const &line_segment_temp, VisiLibity::Point const &point_temp)\n"
    "    double distance(VisiLibity::Point const &point_temp, VisiLibity::Ray const &ray_temp)\n"
    "    double distance(VisiLibity::Ray const &ray_temp, VisiLibity::Point const &point_temp)\n"
    "    double distance(VisiLibity::Point const &point_temp, VisiLibity::Polyline const &polyline_temp)\n"
    "    double distance(VisiLibity::Polyline const &polyline_temp, VisiLibity::Point const &point_temp)\n"
    "    double distance(VisiLibity::Line_Segment const &line_segment1, VisiLibity::Line_Segment const &line_segment2)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_boundary_distance__SWIG_4(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Line_Segment *arg1 = 0 ;
  VisiLibity::Polygon *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","VisiLibity::boundary_distance", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","VisiLibity::boundary_distance", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Line_Segment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Polygon,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polygon const &","VisiLibity::boundary_distance", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon const &","VisiLibity::boundary_distance", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polygon * >(argp2);
  result = (double)VisiLibity::boundary_distance((VisiLibity::Line_Segment const &)*arg1,(VisiLibity::Polygon const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_boundary_distance__SWIG_5(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon *arg1 = 0 ;
  VisiLibity::Line_Segment *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Polygon,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polygon const &","VisiLibity::boundary_distance", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon const &","VisiLibity::boundary_distance", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polygon * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","VisiLibity::boundary_distance", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","VisiLibity::boundary_distance", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Line_Segment * >(argp2);
  result = (double)VisiLibity::boundary_distance((VisiLibity::Polygon const &)*arg1,(VisiLibity::Line_Segment const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_intersect__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Line_Segment *arg1 = 0 ;
  VisiLibity::Line_Segment *arg2 = 0 ;
  double arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","VisiLibity::intersect", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","VisiLibity::intersect", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Line_Segment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","VisiLibity::intersect", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","VisiLibity::intersect", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Line_Segment * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","VisiLibity::intersect", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)VisiLibity::intersect((VisiLibity::Line_Segment const &)*arg1,(VisiLibity::Line_Segment const &)*arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_intersect__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Line_Segment *arg1 = 0 ;
  VisiLibity::Line_Segment *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","VisiLibity::intersect", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","VisiLibity::intersect", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Line_Segment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","VisiLibity::intersect", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","VisiLibity::intersect", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Line_Segment * >(argp2);
  result = (bool)VisiLibity::intersect((VisiLibity::Line_Segment const &)*arg1,(VisiLibity::Line_Segment const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_intersect(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_intersect__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_intersect__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "intersect", 
    "    bool intersect(VisiLibity::Line_Segment const &line_segment1, VisiLibity::Line_Segment const &line_segment2, double epsilon)\n"
    "    bool intersect(VisiLibity::Line_Segment const &line_segment1, VisiLibity::Line_Segment const &line_segment2)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_intersect_proper__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Line_Segment *arg1 = 0 ;
  VisiLibity::Line_Segment *arg2 = 0 ;
  double arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","VisiLibity::intersect_proper", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","VisiLibity::intersect_proper", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Line_Segment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","VisiLibity::intersect_proper", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","VisiLibity::intersect_proper", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Line_Segment * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","VisiLibity::intersect_proper", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)VisiLibity::intersect_proper((VisiLibity::Line_Segment const &)*arg1,(VisiLibity::Line_Segment const &)*arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_intersect_proper__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Line_Segment *arg1 = 0 ;
  VisiLibity::Line_Segment *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","VisiLibity::intersect_proper", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","VisiLibity::intersect_proper", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Line_Segment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","VisiLibity::intersect_proper", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","VisiLibity::intersect_proper", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Line_Segment * >(argp2);
  result = (bool)VisiLibity::intersect_proper((VisiLibity::Line_Segment const &)*arg1,(VisiLibity::Line_Segment const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_intersect_proper(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_intersect_proper__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_intersect_proper__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "intersect_proper", 
    "    bool intersect_proper(VisiLibity::Line_Segment const &line_segment1, VisiLibity::Line_Segment const &line_segment2, double epsilon)\n"
    "    bool intersect_proper(VisiLibity::Line_Segment const &line_segment1, VisiLibity::Line_Segment const &line_segment2)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_intersection__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Line_Segment *arg1 = 0 ;
  VisiLibity::Line_Segment *arg2 = 0 ;
  double arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  VisiLibity::Line_Segment result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","VisiLibity::intersection", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","VisiLibity::intersection", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Line_Segment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","VisiLibity::intersection", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","VisiLibity::intersection", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Line_Segment * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","VisiLibity::intersection", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  result = VisiLibity::intersection((VisiLibity::Line_Segment const &)*arg1,(VisiLibity::Line_Segment const &)*arg2,arg3);
  vresult = SWIG_NewPointerObj((new VisiLibity::Line_Segment(static_cast< const VisiLibity::Line_Segment& >(result))), SWIGTYPE_p_VisiLibity__Line_Segment, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_intersection__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Line_Segment *arg1 = 0 ;
  VisiLibity::Line_Segment *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VisiLibity::Line_Segment result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","VisiLibity::intersection", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","VisiLibity::intersection", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Line_Segment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","VisiLibity::intersection", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","VisiLibity::intersection", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Line_Segment * >(argp2);
  result = VisiLibity::intersection((VisiLibity::Line_Segment const &)*arg1,(VisiLibity::Line_Segment const &)*arg2);
  vresult = SWIG_NewPointerObj((new VisiLibity::Line_Segment(static_cast< const VisiLibity::Line_Segment& >(result))), SWIGTYPE_p_VisiLibity__Line_Segment, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::VisiLibity.<<

  call-seq:
    <<(outs, point_temp) -> std::ostream
    <<(outs, line_segment_temp) -> std::ostream
    <<(outs, angle_temp) -> std::ostream
    <<(outs, polar_point_temp) -> std::ostream
    <<(outs, polyline_temp) -> std::ostream
    <<(outs, polygon_temp) -> std::ostream
    <<(outs, environment_temp) -> std::ostream
    <<(outs, guards) -> std::ostream
    <<(outs, visibility_graph) -> std::ostream

Left shifting or appending operator.
*/
SWIGINTERN VALUE
_wrap___lshift____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  VisiLibity::Line_Segment *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","VisiLibity::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","VisiLibity::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","VisiLibity::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","VisiLibity::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Line_Segment * >(argp2);
  result = (std::ostream *) &VisiLibity::operator <<(*arg1,(VisiLibity::Line_Segment const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassAngle;

SWIGINTERN VALUE
_wrap_new_Angle__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Angle *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (VisiLibity::Angle *)new VisiLibity::Angle();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Angle__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  VisiLibity::Angle *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","VisiLibity::Angle", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  result = (VisiLibity::Angle *)new VisiLibity::Angle(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Angle_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Angle_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_VisiLibity__Angle);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Angle__SWIG_2(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  VisiLibity::Angle *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","VisiLibity::Angle", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","VisiLibity::Angle", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  result = (VisiLibity::Angle *)new VisiLibity::Angle(arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Angle(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Angle__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Angle__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Angle__SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Angle.new", 
    "    Angle.new()\n"
    "    Angle.new(double data_temp)\n"
    "    Angle.new(double rise_temp, double run_temp)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Angle_get(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Angle *arg1 = (VisiLibity::Angle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Angle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Angle const *","get", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Angle * >(argp1);
  result = (double)((VisiLibity::Angle const *)arg1)->get();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Angle_set(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Angle *arg1 = (VisiLibity::Angle *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Angle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Angle *","set", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Angle * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->set(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Angle_set_to_2pi(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Angle *arg1 = (VisiLibity::Angle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Angle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Angle *","set_to_2pi", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Angle * >(argp1);
  (arg1)->set_to_2pi();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Angle_randomize(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Angle *arg1 = (VisiLibity::Angle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Angle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Angle *","randomize", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Angle * >(argp1);
  (arg1)->randomize();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN void
free_VisiLibity_Angle(VisiLibity::Angle *arg1) {
    delete arg1;
}


/*
  Document-method: VisiLibity::VisiLibity.==

  call-seq:
    ==(point1, point2) -> bool
    ==(line_segment1, line_segment2) -> bool
    ==(angle1, angle2) -> bool
    ==(polar_point1, polar_point2) -> bool
    ==(ray1, ray2) -> bool
    ==(polygon1, polygon2) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap___eq____SWIG_2(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Angle *arg1 = 0 ;
  VisiLibity::Angle *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Angle,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Angle const &","VisiLibity::operator ==", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Angle const &","VisiLibity::operator ==", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Angle * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Angle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Angle const &","VisiLibity::operator ==", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Angle const &","VisiLibity::operator ==", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Angle * >(argp2);
  result = (bool)VisiLibity::operator ==((VisiLibity::Angle const &)*arg1,(VisiLibity::Angle const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::VisiLibity.>

  call-seq:
    >(point1, point2) -> bool
    >(angle1, angle2) -> bool
    >(polar_point1, polar_point2) -> bool

Higher than comparison operator.
*/
SWIGINTERN VALUE
_wrap___gt____SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Angle *arg1 = 0 ;
  VisiLibity::Angle *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Angle,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Angle const &","VisiLibity::operator >", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Angle const &","VisiLibity::operator >", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Angle * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Angle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Angle const &","VisiLibity::operator >", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Angle const &","VisiLibity::operator >", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Angle * >(argp2);
  result = (bool)VisiLibity::operator >((VisiLibity::Angle const &)*arg1,(VisiLibity::Angle const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::VisiLibity.<

  call-seq:
    <(point1, point2) -> bool
    <(angle1, angle2) -> bool
    <(polar_point1, polar_point2) -> bool

Lower than comparison operator.
*/
SWIGINTERN VALUE
_wrap___lt____SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Angle *arg1 = 0 ;
  VisiLibity::Angle *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Angle,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Angle const &","VisiLibity::operator <", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Angle const &","VisiLibity::operator <", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Angle * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Angle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Angle const &","VisiLibity::operator <", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Angle const &","VisiLibity::operator <", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Angle * >(argp2);
  result = (bool)VisiLibity::operator <((VisiLibity::Angle const &)*arg1,(VisiLibity::Angle const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::VisiLibity.>=

  call-seq:
    >=(point1, point2) -> bool
    >=(angle1, angle2) -> bool
    >=(polar_point1, polar_point2) -> bool

Higher or equal comparison operator.
*/
SWIGINTERN VALUE
_wrap___ge____SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Angle *arg1 = 0 ;
  VisiLibity::Angle *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Angle,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Angle const &","VisiLibity::operator >=", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Angle const &","VisiLibity::operator >=", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Angle * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Angle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Angle const &","VisiLibity::operator >=", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Angle const &","VisiLibity::operator >=", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Angle * >(argp2);
  result = (bool)VisiLibity::operator >=((VisiLibity::Angle const &)*arg1,(VisiLibity::Angle const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::VisiLibity.<=

  call-seq:
    <=(point1, point2) -> bool
    <=(angle1, angle2) -> bool
    <=(polar_point1, polar_point2) -> bool

Lower or equal comparison operator.
*/
SWIGINTERN VALUE
_wrap___le____SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Angle *arg1 = 0 ;
  VisiLibity::Angle *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Angle,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Angle const &","VisiLibity::operator <=", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Angle const &","VisiLibity::operator <=", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Angle * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Angle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Angle const &","VisiLibity::operator <=", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Angle const &","VisiLibity::operator <=", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Angle * >(argp2);
  result = (bool)VisiLibity::operator <=((VisiLibity::Angle const &)*arg1,(VisiLibity::Angle const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::VisiLibity.+

  call-seq:
    +(point1, point2) -> Point
    +(angle1, angle2) -> Angle

Add operator.
*/
SWIGINTERN VALUE
_wrap___add____SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Angle *arg1 = 0 ;
  VisiLibity::Angle *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VisiLibity::Angle result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Angle,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Angle const &","VisiLibity::operator +", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Angle const &","VisiLibity::operator +", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Angle * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Angle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Angle const &","VisiLibity::operator +", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Angle const &","VisiLibity::operator +", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Angle * >(argp2);
  result = VisiLibity::operator +((VisiLibity::Angle const &)*arg1,(VisiLibity::Angle const &)*arg2);
  vresult = SWIG_NewPointerObj((new VisiLibity::Angle(static_cast< const VisiLibity::Angle& >(result))), SWIGTYPE_p_VisiLibity__Angle, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap___add__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___add____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Angle, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Angle, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___add____SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "__add__", 
    "    VisiLibity::Angle __add__(VisiLibity::Point const &point1, VisiLibity::Point const &point2)\n"
    "    VisiLibity::Angle __add__(VisiLibity::Angle const &angle1, VisiLibity::Angle const &angle2)\n");
  
  return Qnil;
}



/*
  Document-method: VisiLibity::VisiLibity.-

  call-seq:
    -(point1, point2) -> Point
    -(angle1, angle2) -> Angle

Substraction operator.
*/
SWIGINTERN VALUE
_wrap___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Angle *arg1 = 0 ;
  VisiLibity::Angle *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VisiLibity::Angle result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Angle,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Angle const &","VisiLibity::operator -", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Angle const &","VisiLibity::operator -", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Angle * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Angle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Angle const &","VisiLibity::operator -", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Angle const &","VisiLibity::operator -", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Angle * >(argp2);
  result = VisiLibity::operator -((VisiLibity::Angle const &)*arg1,(VisiLibity::Angle const &)*arg2);
  vresult = SWIG_NewPointerObj((new VisiLibity::Angle(static_cast< const VisiLibity::Angle& >(result))), SWIGTYPE_p_VisiLibity__Angle, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Angle, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Angle, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "__sub__", 
    "    VisiLibity::Angle __sub__(VisiLibity::Point const &point1, VisiLibity::Point const &point2)\n"
    "    VisiLibity::Angle __sub__(VisiLibity::Angle const &angle1, VisiLibity::Angle const &angle2)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_geodesic_distance(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Angle *arg1 = 0 ;
  VisiLibity::Angle *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Angle,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Angle const &","VisiLibity::geodesic_distance", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Angle const &","VisiLibity::geodesic_distance", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Angle * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Angle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Angle const &","VisiLibity::geodesic_distance", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Angle const &","VisiLibity::geodesic_distance", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Angle * >(argp2);
  result = (double)VisiLibity::geodesic_distance((VisiLibity::Angle const &)*arg1,(VisiLibity::Angle const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_geodesic_direction(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Angle *arg1 = 0 ;
  VisiLibity::Angle *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Angle,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Angle const &","VisiLibity::geodesic_direction", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Angle const &","VisiLibity::geodesic_direction", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Angle * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Angle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Angle const &","VisiLibity::geodesic_direction", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Angle const &","VisiLibity::geodesic_direction", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Angle * >(argp2);
  result = (double)VisiLibity::geodesic_direction((VisiLibity::Angle const &)*arg1,(VisiLibity::Angle const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::VisiLibity.<<

  call-seq:
    <<(outs, point_temp) -> std::ostream
    <<(outs, line_segment_temp) -> std::ostream
    <<(outs, angle_temp) -> std::ostream
    <<(outs, polar_point_temp) -> std::ostream
    <<(outs, polyline_temp) -> std::ostream
    <<(outs, polygon_temp) -> std::ostream
    <<(outs, environment_temp) -> std::ostream
    <<(outs, guards) -> std::ostream
    <<(outs, visibility_graph) -> std::ostream

Left shifting or appending operator.
*/
SWIGINTERN VALUE
_wrap___lshift____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  VisiLibity::Angle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","VisiLibity::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","VisiLibity::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Angle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Angle const &","VisiLibity::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Angle const &","VisiLibity::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Angle * >(argp2);
  result = (std::ostream *) &VisiLibity::operator <<(*arg1,(VisiLibity::Angle const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassPolarPoint;

SWIGINTERN VALUE
_wrap_new_PolarPoint__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polar_Point *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (VisiLibity::Polar_Point *)new VisiLibity::Polar_Point();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_PolarPoint__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = 0 ;
  VisiLibity::Point *arg2 = 0 ;
  double arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  VisiLibity::Polar_Point *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::Polar_Point", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::Polar_Point", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::Polar_Point", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::Polar_Point", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","VisiLibity::Polar_Point", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  result = (VisiLibity::Polar_Point *)new VisiLibity::Polar_Point((VisiLibity::Point const &)*arg1,(VisiLibity::Point const &)*arg2,arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_PolarPoint_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_PolarPoint_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_VisiLibity__Polar_Point);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_PolarPoint__SWIG_2(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = 0 ;
  VisiLibity::Point *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VisiLibity::Polar_Point *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::Polar_Point", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::Polar_Point", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::Polar_Point", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::Polar_Point", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  result = (VisiLibity::Polar_Point *)new VisiLibity::Polar_Point((VisiLibity::Point const &)*arg1,(VisiLibity::Point const &)*arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_PolarPoint(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_PolarPoint__SWIG_0(nargs, args, self);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_PolarPoint__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_PolarPoint__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "PolarPoint.new", 
    "    PolarPoint.new()\n"
    "    PolarPoint.new(VisiLibity::Point const &polar_origin_temp, VisiLibity::Point const &point_temp, double epsilon)\n"
    "    PolarPoint.new(VisiLibity::Point const &polar_origin_temp, VisiLibity::Point const &point_temp)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PolarPoint_polar_origin(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polar_Point *arg1 = (VisiLibity::Polar_Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VisiLibity::Point result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polar_Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polar_Point const *","polar_origin", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polar_Point * >(argp1);
  result = ((VisiLibity::Polar_Point const *)arg1)->polar_origin();
  vresult = SWIG_NewPointerObj((new VisiLibity::Point(static_cast< const VisiLibity::Point& >(result))), SWIGTYPE_p_VisiLibity__Point, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PolarPoint_range(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polar_Point *arg1 = (VisiLibity::Polar_Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polar_Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polar_Point const *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polar_Point * >(argp1);
  result = (double)((VisiLibity::Polar_Point const *)arg1)->range();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PolarPoint_bearing(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polar_Point *arg1 = (VisiLibity::Polar_Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VisiLibity::Angle result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polar_Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polar_Point const *","bearing", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polar_Point * >(argp1);
  result = ((VisiLibity::Polar_Point const *)arg1)->bearing();
  vresult = SWIG_NewPointerObj((new VisiLibity::Angle(static_cast< const VisiLibity::Angle& >(result))), SWIGTYPE_p_VisiLibity__Angle, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PolarPoint_set_polar_origin(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polar_Point *arg1 = (VisiLibity::Polar_Point *) 0 ;
  VisiLibity::Point *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polar_Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polar_Point *","set_polar_origin", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polar_Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","set_polar_origin", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","set_polar_origin", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  (arg1)->set_polar_origin((VisiLibity::Point const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PolarPoint_set_x(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polar_Point *arg1 = (VisiLibity::Polar_Point *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polar_Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polar_Point *","set_x", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polar_Point * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_x", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->set_x(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PolarPoint_set_y(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polar_Point *arg1 = (VisiLibity::Polar_Point *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polar_Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polar_Point *","set_y", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polar_Point * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_y", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->set_y(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PolarPoint_set_range(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polar_Point *arg1 = (VisiLibity::Polar_Point *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polar_Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polar_Point *","set_range", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polar_Point * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_range", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->set_range(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PolarPoint_set_bearing(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polar_Point *arg1 = (VisiLibity::Polar_Point *) 0 ;
  VisiLibity::Angle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polar_Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polar_Point *","set_bearing", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polar_Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Angle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Angle const &","set_bearing", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Angle const &","set_bearing", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Angle * >(argp2);
  (arg1)->set_bearing((VisiLibity::Angle const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PolarPoint_set_bearing_to_2pi(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polar_Point *arg1 = (VisiLibity::Polar_Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polar_Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polar_Point *","set_bearing_to_2pi", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polar_Point * >(argp1);
  (arg1)->set_bearing_to_2pi();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN void
free_VisiLibity_Polar_Point(VisiLibity::Polar_Point *arg1) {
    delete arg1;
}


/*
  Document-method: VisiLibity::VisiLibity.==

  call-seq:
    ==(point1, point2) -> bool
    ==(line_segment1, line_segment2) -> bool
    ==(angle1, angle2) -> bool
    ==(polar_point1, polar_point2) -> bool
    ==(ray1, ray2) -> bool
    ==(polygon1, polygon2) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap___eq____SWIG_3(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polar_Point *arg1 = 0 ;
  VisiLibity::Polar_Point *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Polar_Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polar_Point const &","VisiLibity::operator ==", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polar_Point const &","VisiLibity::operator ==", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polar_Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Polar_Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polar_Point const &","VisiLibity::operator ==", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polar_Point const &","VisiLibity::operator ==", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polar_Point * >(argp2);
  result = (bool)VisiLibity::operator ==((VisiLibity::Polar_Point const &)*arg1,(VisiLibity::Polar_Point const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::VisiLibity.>

  call-seq:
    >(point1, point2) -> bool
    >(angle1, angle2) -> bool
    >(polar_point1, polar_point2) -> bool

Higher than comparison operator.
*/
SWIGINTERN VALUE
_wrap___gt____SWIG_2(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polar_Point *arg1 = 0 ;
  VisiLibity::Polar_Point *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Polar_Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polar_Point const &","VisiLibity::operator >", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polar_Point const &","VisiLibity::operator >", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polar_Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Polar_Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polar_Point const &","VisiLibity::operator >", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polar_Point const &","VisiLibity::operator >", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polar_Point * >(argp2);
  result = (bool)VisiLibity::operator >((VisiLibity::Polar_Point const &)*arg1,(VisiLibity::Polar_Point const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap___gt__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Polar_Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polar_Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___gt____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Angle, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Angle, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___gt____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___gt____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "__gt__", 
    "    bool __gt__(VisiLibity::Point const &point1, VisiLibity::Point const &point2)\n"
    "    bool __gt__(VisiLibity::Angle const &angle1, VisiLibity::Angle const &angle2)\n"
    "    bool __gt__(VisiLibity::Polar_Point const &polar_point1, VisiLibity::Polar_Point const &polar_point2)\n");
  
  return Qnil;
}



/*
  Document-method: VisiLibity::VisiLibity.<

  call-seq:
    <(point1, point2) -> bool
    <(angle1, angle2) -> bool
    <(polar_point1, polar_point2) -> bool

Lower than comparison operator.
*/
SWIGINTERN VALUE
_wrap___lt____SWIG_2(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polar_Point *arg1 = 0 ;
  VisiLibity::Polar_Point *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Polar_Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polar_Point const &","VisiLibity::operator <", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polar_Point const &","VisiLibity::operator <", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polar_Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Polar_Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polar_Point const &","VisiLibity::operator <", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polar_Point const &","VisiLibity::operator <", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polar_Point * >(argp2);
  result = (bool)VisiLibity::operator <((VisiLibity::Polar_Point const &)*arg1,(VisiLibity::Polar_Point const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap___lt__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Polar_Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polar_Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lt____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Angle, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Angle, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lt____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lt____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "__lt__", 
    "    bool __lt__(VisiLibity::Point const &point1, VisiLibity::Point const &point2)\n"
    "    bool __lt__(VisiLibity::Angle const &angle1, VisiLibity::Angle const &angle2)\n"
    "    bool __lt__(VisiLibity::Polar_Point const &polar_point1, VisiLibity::Polar_Point const &polar_point2)\n");
  
  return Qnil;
}



/*
  Document-method: VisiLibity::VisiLibity.>=

  call-seq:
    >=(point1, point2) -> bool
    >=(angle1, angle2) -> bool
    >=(polar_point1, polar_point2) -> bool

Higher or equal comparison operator.
*/
SWIGINTERN VALUE
_wrap___ge____SWIG_2(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polar_Point *arg1 = 0 ;
  VisiLibity::Polar_Point *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Polar_Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polar_Point const &","VisiLibity::operator >=", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polar_Point const &","VisiLibity::operator >=", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polar_Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Polar_Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polar_Point const &","VisiLibity::operator >=", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polar_Point const &","VisiLibity::operator >=", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polar_Point * >(argp2);
  result = (bool)VisiLibity::operator >=((VisiLibity::Polar_Point const &)*arg1,(VisiLibity::Polar_Point const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap___ge__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Polar_Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polar_Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___ge____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Angle, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Angle, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___ge____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___ge____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "__ge__", 
    "    bool __ge__(VisiLibity::Point const &point1, VisiLibity::Point const &point2)\n"
    "    bool __ge__(VisiLibity::Angle const &angle1, VisiLibity::Angle const &angle2)\n"
    "    bool __ge__(VisiLibity::Polar_Point const &polar_point1, VisiLibity::Polar_Point const &polar_point2)\n");
  
  return Qnil;
}



/*
  Document-method: VisiLibity::VisiLibity.<=

  call-seq:
    <=(point1, point2) -> bool
    <=(angle1, angle2) -> bool
    <=(polar_point1, polar_point2) -> bool

Lower or equal comparison operator.
*/
SWIGINTERN VALUE
_wrap___le____SWIG_2(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polar_Point *arg1 = 0 ;
  VisiLibity::Polar_Point *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Polar_Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polar_Point const &","VisiLibity::operator <=", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polar_Point const &","VisiLibity::operator <=", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polar_Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Polar_Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polar_Point const &","VisiLibity::operator <=", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polar_Point const &","VisiLibity::operator <=", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polar_Point * >(argp2);
  result = (bool)VisiLibity::operator <=((VisiLibity::Polar_Point const &)*arg1,(VisiLibity::Polar_Point const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap___le__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Polar_Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polar_Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___le____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Angle, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Angle, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___le____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___le____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "__le__", 
    "    bool __le__(VisiLibity::Point const &point1, VisiLibity::Point const &point2)\n"
    "    bool __le__(VisiLibity::Angle const &angle1, VisiLibity::Angle const &angle2)\n"
    "    bool __le__(VisiLibity::Polar_Point const &polar_point1, VisiLibity::Polar_Point const &polar_point2)\n");
  
  return Qnil;
}



/*
  Document-method: VisiLibity::VisiLibity.<<

  call-seq:
    <<(outs, point_temp) -> std::ostream
    <<(outs, line_segment_temp) -> std::ostream
    <<(outs, angle_temp) -> std::ostream
    <<(outs, polar_point_temp) -> std::ostream
    <<(outs, polyline_temp) -> std::ostream
    <<(outs, polygon_temp) -> std::ostream
    <<(outs, environment_temp) -> std::ostream
    <<(outs, guards) -> std::ostream
    <<(outs, visibility_graph) -> std::ostream

Left shifting or appending operator.
*/
SWIGINTERN VALUE
_wrap___lshift____SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  VisiLibity::Polar_Point *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","VisiLibity::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","VisiLibity::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Polar_Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polar_Point const &","VisiLibity::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polar_Point const &","VisiLibity::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polar_Point * >(argp2);
  result = (std::ostream *) &VisiLibity::operator <<(*arg1,(VisiLibity::Polar_Point const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassRay;

SWIGINTERN VALUE
_wrap_new_Ray__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Ray *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (VisiLibity::Ray *)new VisiLibity::Ray();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Ray__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point arg1 ;
  VisiLibity::Angle arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VisiLibity::Ray *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Point,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point","VisiLibity::Ray", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point","VisiLibity::Ray", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< VisiLibity::Point * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Angle,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Angle","VisiLibity::Ray", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Angle","VisiLibity::Ray", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< VisiLibity::Angle * >(argp2));
    }
  }
  result = (VisiLibity::Ray *)new VisiLibity::Ray(arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Ray_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Ray_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_VisiLibity__Ray);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Ray__SWIG_2(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point arg1 ;
  VisiLibity::Point arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VisiLibity::Ray *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Point,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point","VisiLibity::Ray", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point","VisiLibity::Ray", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< VisiLibity::Point * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point","VisiLibity::Ray", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point","VisiLibity::Ray", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< VisiLibity::Point * >(argp2));
    }
  }
  result = (VisiLibity::Ray *)new VisiLibity::Ray(arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Ray(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Ray__SWIG_0(nargs, args, self);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Angle, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Ray__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Ray__SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Ray.new", 
    "    Ray.new()\n"
    "    Ray.new(VisiLibity::Point base_point_temp, VisiLibity::Angle bearing_temp)\n"
    "    Ray.new(VisiLibity::Point base_point_temp, VisiLibity::Point bearing_point)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Ray_base_point(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Ray *arg1 = (VisiLibity::Ray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VisiLibity::Point result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Ray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Ray const *","base_point", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Ray * >(argp1);
  result = ((VisiLibity::Ray const *)arg1)->base_point();
  vresult = SWIG_NewPointerObj((new VisiLibity::Point(static_cast< const VisiLibity::Point& >(result))), SWIGTYPE_p_VisiLibity__Point, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Ray_bearing(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Ray *arg1 = (VisiLibity::Ray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VisiLibity::Angle result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Ray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Ray const *","bearing", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Ray * >(argp1);
  result = ((VisiLibity::Ray const *)arg1)->bearing();
  vresult = SWIG_NewPointerObj((new VisiLibity::Angle(static_cast< const VisiLibity::Angle& >(result))), SWIGTYPE_p_VisiLibity__Angle, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Ray_set_base_point(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Ray *arg1 = (VisiLibity::Ray *) 0 ;
  VisiLibity::Point *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Ray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Ray *","set_base_point", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Ray * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","set_base_point", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","set_base_point", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  (arg1)->set_base_point((VisiLibity::Point const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Ray_set_bearing(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Ray *arg1 = (VisiLibity::Ray *) 0 ;
  VisiLibity::Angle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Ray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Ray *","set_bearing", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Ray * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Angle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Angle const &","set_bearing", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Angle const &","set_bearing", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Angle * >(argp2);
  (arg1)->set_bearing((VisiLibity::Angle const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN void
free_VisiLibity_Ray(VisiLibity::Ray *arg1) {
    delete arg1;
}


/*
  Document-method: VisiLibity::VisiLibity.==

  call-seq:
    ==(point1, point2) -> bool
    ==(line_segment1, line_segment2) -> bool
    ==(angle1, angle2) -> bool
    ==(polar_point1, polar_point2) -> bool
    ==(ray1, ray2) -> bool
    ==(polygon1, polygon2) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap___eq____SWIG_4(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Ray *arg1 = 0 ;
  VisiLibity::Ray *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Ray,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Ray const &","VisiLibity::operator ==", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Ray const &","VisiLibity::operator ==", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Ray * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Ray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Ray const &","VisiLibity::operator ==", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Ray const &","VisiLibity::operator ==", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Ray * >(argp2);
  result = (bool)VisiLibity::operator ==((VisiLibity::Ray const &)*arg1,(VisiLibity::Ray const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_intersection__SWIG_2(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Ray arg1 ;
  VisiLibity::Line_Segment *arg2 = 0 ;
  double arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  VisiLibity::Line_Segment result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Ray,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Ray const","VisiLibity::intersection", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Ray const","VisiLibity::intersection", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< VisiLibity::Ray * >(argp1));
    }
  }
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","VisiLibity::intersection", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","VisiLibity::intersection", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Line_Segment * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","VisiLibity::intersection", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  result = VisiLibity::intersection(arg1,(VisiLibity::Line_Segment const &)*arg2,arg3);
  vresult = SWIG_NewPointerObj((new VisiLibity::Line_Segment(static_cast< const VisiLibity::Line_Segment& >(result))), SWIGTYPE_p_VisiLibity__Line_Segment, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_intersection__SWIG_3(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Ray arg1 ;
  VisiLibity::Line_Segment *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VisiLibity::Line_Segment result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Ray,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Ray const","VisiLibity::intersection", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Ray const","VisiLibity::intersection", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< VisiLibity::Ray * >(argp1));
    }
  }
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","VisiLibity::intersection", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","VisiLibity::intersection", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Line_Segment * >(argp2);
  result = VisiLibity::intersection(arg1,(VisiLibity::Line_Segment const &)*arg2);
  vresult = SWIG_NewPointerObj((new VisiLibity::Line_Segment(static_cast< const VisiLibity::Line_Segment& >(result))), SWIGTYPE_p_VisiLibity__Line_Segment, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_intersection__SWIG_4(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Line_Segment *arg1 = 0 ;
  VisiLibity::Ray *arg2 = 0 ;
  double arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  VisiLibity::Line_Segment result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","VisiLibity::intersection", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","VisiLibity::intersection", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Line_Segment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Ray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Ray const &","VisiLibity::intersection", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Ray const &","VisiLibity::intersection", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Ray * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","VisiLibity::intersection", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  result = VisiLibity::intersection((VisiLibity::Line_Segment const &)*arg1,(VisiLibity::Ray const &)*arg2,arg3);
  vresult = SWIG_NewPointerObj((new VisiLibity::Line_Segment(static_cast< const VisiLibity::Line_Segment& >(result))), SWIGTYPE_p_VisiLibity__Line_Segment, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_intersection__SWIG_5(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Line_Segment *arg1 = 0 ;
  VisiLibity::Ray *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VisiLibity::Line_Segment result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Line_Segment,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Line_Segment const &","VisiLibity::intersection", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Line_Segment const &","VisiLibity::intersection", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Line_Segment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Ray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Ray const &","VisiLibity::intersection", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Ray const &","VisiLibity::intersection", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Ray * >(argp2);
  result = VisiLibity::intersection((VisiLibity::Line_Segment const &)*arg1,(VisiLibity::Ray const &)*arg2);
  vresult = SWIG_NewPointerObj((new VisiLibity::Line_Segment(static_cast< const VisiLibity::Line_Segment& >(result))), SWIGTYPE_p_VisiLibity__Line_Segment, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_intersection(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_intersection__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Ray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_intersection__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Ray, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_intersection__SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_intersection__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Ray, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_intersection__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Ray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_intersection__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "intersection", 
    "    VisiLibity::Line_Segment intersection(VisiLibity::Line_Segment const &line_segment1, VisiLibity::Line_Segment const &line_segment2, double epsilon)\n"
    "    VisiLibity::Line_Segment intersection(VisiLibity::Line_Segment const &line_segment1, VisiLibity::Line_Segment const &line_segment2)\n"
    "    VisiLibity::Line_Segment intersection(VisiLibity::Ray const ray_temp, VisiLibity::Line_Segment const &line_segment_temp, double epsilon)\n"
    "    VisiLibity::Line_Segment intersection(VisiLibity::Ray const ray_temp, VisiLibity::Line_Segment const &line_segment_temp)\n"
    "    VisiLibity::Line_Segment intersection(VisiLibity::Line_Segment const &line_segment_temp, VisiLibity::Ray const &ray_temp, double epsilon)\n"
    "    VisiLibity::Line_Segment intersection(VisiLibity::Line_Segment const &line_segment_temp, VisiLibity::Ray const &ray_temp)\n");
  
  return Qnil;
}


swig_class SwigClassPolyline;

SWIGINTERN VALUE
_wrap_new_Polyline__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polyline *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (VisiLibity::Polyline *)new VisiLibity::Polyline();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Polyline_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Polyline_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_VisiLibity__Polyline);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Polyline__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  VisiLibity::Polyline *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > > *ptr = (std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > const &","VisiLibity::Polyline", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > const &","VisiLibity::Polyline", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  result = (VisiLibity::Polyline *)new VisiLibity::Polyline((std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > const &)*arg1);
  DATA_PTR(self) = result;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Polyline(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Polyline__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Polyline__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Polyline.new", 
    "    Polyline.new()\n"
    "    Polyline.new(std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > const &vertices_temp)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Polyline_index__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polyline *arg1 = (VisiLibity::Polyline *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  VisiLibity::Point result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polyline const *","operator []", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polyline * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","operator []", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = ((VisiLibity::Polyline const *)arg1)->operator [](arg2);
  vresult = SWIG_NewPointerObj((new VisiLibity::Point(static_cast< const VisiLibity::Point& >(result))), SWIGTYPE_p_VisiLibity__Point, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::Polyline.size

  call-seq:
    size -> unsigned int

Size or Length of the Polyline.
*/
SWIGINTERN VALUE
_wrap_Polyline_size(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polyline *arg1 = (VisiLibity::Polyline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polyline const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polyline * >(argp1);
  result = (unsigned int)((VisiLibity::Polyline const *)arg1)->size();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::Polyline.length

  call-seq:
    length -> double

Size or Length of the Polyline.
*/
SWIGINTERN VALUE
_wrap_Polyline_length(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polyline *arg1 = (VisiLibity::Polyline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polyline const *","length", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polyline * >(argp1);
  result = (double)((VisiLibity::Polyline const *)arg1)->length();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Polyline_diameter(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polyline *arg1 = (VisiLibity::Polyline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polyline const *","diameter", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polyline * >(argp1);
  result = (double)((VisiLibity::Polyline const *)arg1)->diameter();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Polyline_bbox(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polyline *arg1 = (VisiLibity::Polyline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VisiLibity::Bounding_Box result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polyline const *","bbox", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polyline * >(argp1);
  result = ((VisiLibity::Polyline const *)arg1)->bbox();
  vresult = SWIG_NewPointerObj((new VisiLibity::Bounding_Box(static_cast< const VisiLibity::Bounding_Box& >(result))), SWIGTYPE_p_VisiLibity__Bounding_Box, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Polyline_index__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polyline *arg1 = (VisiLibity::Polyline *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  VisiLibity::Point *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polyline *","operator []", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polyline * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","operator []", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (VisiLibity::Point *) &(arg1)->operator [](arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Polyline_index(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Polyline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Polyline_index__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Polyline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Polyline_index__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Polyline.index", 
    "    VisiLibity::Point & Polyline.index(unsigned int i)\n"
    "    VisiLibity::Point & Polyline.index(unsigned int i)\n");
  
  return Qnil;
}



/*
  Document-method: VisiLibity::Polyline.clear

  call-seq:
    clear

Clear Polyline contents.
*/
SWIGINTERN VALUE
_wrap_Polyline_clear(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polyline *arg1 = (VisiLibity::Polyline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polyline *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polyline * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::Polyline.push_back

  call-seq:
    push_back(point_temp)

Add an element at the end of the Polyline.
*/
SWIGINTERN VALUE
_wrap_Polyline_push_back(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polyline *arg1 = (VisiLibity::Polyline *) 0 ;
  VisiLibity::Point *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polyline *","push_back", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polyline * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","push_back", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","push_back", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  (arg1)->push_back((VisiLibity::Point const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::Polyline.pop_back

  call-seq:
    pop_back

Remove and return an element at the end of the Polyline.
*/
SWIGINTERN VALUE
_wrap_Polyline_pop_back(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polyline *arg1 = (VisiLibity::Polyline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polyline *","pop_back", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polyline * >(argp1);
  (arg1)->pop_back();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Polyline_set_vertices(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polyline *arg1 = (VisiLibity::Polyline *) 0 ;
  std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polyline *","set_vertices", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polyline * >(argp1);
  {
    std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > > *ptr = (std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > > *)0;
    res2 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > const &","set_vertices", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > const &","set_vertices", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  (arg1)->set_vertices((std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > const &)*arg2);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Polyline_eliminate_redundant_vertices__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polyline *arg1 = (VisiLibity::Polyline *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polyline *","eliminate_redundant_vertices", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polyline * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","eliminate_redundant_vertices", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->eliminate_redundant_vertices(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Polyline_eliminate_redundant_vertices__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polyline *arg1 = (VisiLibity::Polyline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polyline *","eliminate_redundant_vertices", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polyline * >(argp1);
  (arg1)->eliminate_redundant_vertices();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Polyline_eliminate_redundant_vertices(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Polyline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Polyline_eliminate_redundant_vertices__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Polyline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Polyline_eliminate_redundant_vertices__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Polyline.eliminate_redundant_vertices", 
    "    void Polyline.eliminate_redundant_vertices(double epsilon)\n"
    "    void Polyline.eliminate_redundant_vertices()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Polyline_reverse(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polyline *arg1 = (VisiLibity::Polyline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polyline *","reverse", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polyline * >(argp1);
  (arg1)->reverse();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Polyline_append(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polyline *arg1 = (VisiLibity::Polyline *) 0 ;
  VisiLibity::Polyline *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polyline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polyline *","append", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polyline * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Polyline,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polyline const &","append", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polyline const &","append", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polyline * >(argp2);
  (arg1)->append((VisiLibity::Polyline const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN void
free_VisiLibity_Polyline(VisiLibity::Polyline *arg1) {
    delete arg1;
}


/*
  Document-method: VisiLibity::VisiLibity.<<

  call-seq:
    <<(outs, point_temp) -> std::ostream
    <<(outs, line_segment_temp) -> std::ostream
    <<(outs, angle_temp) -> std::ostream
    <<(outs, polar_point_temp) -> std::ostream
    <<(outs, polyline_temp) -> std::ostream
    <<(outs, polygon_temp) -> std::ostream
    <<(outs, environment_temp) -> std::ostream
    <<(outs, guards) -> std::ostream
    <<(outs, visibility_graph) -> std::ostream

Left shifting or appending operator.
*/
SWIGINTERN VALUE
_wrap___lshift____SWIG_4(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  VisiLibity::Polyline *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","VisiLibity::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","VisiLibity::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Polyline,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polyline const &","VisiLibity::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polyline const &","VisiLibity::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polyline * >(argp2);
  result = (std::ostream *) &VisiLibity::operator <<(*arg1,(VisiLibity::Polyline const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassPolygon;

SWIGINTERN VALUE
_wrap_new_Polygon__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (VisiLibity::Polygon *)new VisiLibity::Polygon();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Polygon__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  VisiLibity::Polygon *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::string const &","VisiLibity::Polygon", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","VisiLibity::Polygon", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  result = (VisiLibity::Polygon *)new VisiLibity::Polygon((std::string const &)*arg1);
  DATA_PTR(self) = result;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Polygon__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  VisiLibity::Polygon *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > > *ptr = (std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > const &","VisiLibity::Polygon", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > const &","VisiLibity::Polygon", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  result = (VisiLibity::Polygon *)new VisiLibity::Polygon((std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > const &)*arg1);
  DATA_PTR(self) = result;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Polygon_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Polygon_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_VisiLibity__Polygon);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Polygon__SWIG_3(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = 0 ;
  VisiLibity::Point *arg2 = 0 ;
  VisiLibity::Point *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VisiLibity::Polygon *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::Polygon", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::Polygon", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::Polygon", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::Polygon", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::Polygon", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::Polygon", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< VisiLibity::Point * >(argp3);
  result = (VisiLibity::Polygon *)new VisiLibity::Polygon((VisiLibity::Point const &)*arg1,(VisiLibity::Point const &)*arg2,(VisiLibity::Point const &)*arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Polygon(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Polygon__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Polygon__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Polygon__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Polygon__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Polygon.new", 
    "    Polygon.new()\n"
    "    Polygon.new(std::string const &filename)\n"
    "    Polygon.new(std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > const &vertices_temp)\n"
    "    Polygon.new(VisiLibity::Point const &point0, VisiLibity::Point const &point1, VisiLibity::Point const &point2)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Polygon_index__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon *arg1 = (VisiLibity::Polygon *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  VisiLibity::Point *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polygon const *","operator []", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polygon * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","operator []", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (VisiLibity::Point *) &((VisiLibity::Polygon const *)arg1)->operator [](arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Polygon_n(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon *arg1 = (VisiLibity::Polygon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polygon const *","n", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polygon * >(argp1);
  result = (unsigned int)((VisiLibity::Polygon const *)arg1)->n();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Polygon_r(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon *arg1 = (VisiLibity::Polygon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polygon const *","r", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polygon * >(argp1);
  result = (unsigned int)((VisiLibity::Polygon const *)arg1)->r();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Polygon_simpleq_____SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon *arg1 = (VisiLibity::Polygon *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polygon const *","is_simple", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polygon * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","is_simple", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  result = (bool)((VisiLibity::Polygon const *)arg1)->is_simple(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Polygon_simpleq_____SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon *arg1 = (VisiLibity::Polygon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polygon const *","is_simple", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polygon * >(argp1);
  result = (bool)((VisiLibity::Polygon const *)arg1)->is_simple();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Polygon_simpleq___(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Polygon_simpleq_____SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Polygon_simpleq_____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Polygon.simple?", 
    "    bool Polygon.simple?(double epsilon)\n"
    "    bool Polygon.simple?()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Polygon_in_standard_formq___(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon *arg1 = (VisiLibity::Polygon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polygon const *","is_in_standard_form", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polygon * >(argp1);
  result = (bool)((VisiLibity::Polygon const *)arg1)->is_in_standard_form();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Polygon_boundary_length(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon *arg1 = (VisiLibity::Polygon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polygon const *","boundary_length", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polygon * >(argp1);
  result = (double)((VisiLibity::Polygon const *)arg1)->boundary_length();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Polygon_area(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon *arg1 = (VisiLibity::Polygon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polygon const *","area", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polygon * >(argp1);
  result = (double)((VisiLibity::Polygon const *)arg1)->area();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Polygon_centroid(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon *arg1 = (VisiLibity::Polygon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VisiLibity::Point result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polygon const *","centroid", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polygon * >(argp1);
  result = ((VisiLibity::Polygon const *)arg1)->centroid();
  vresult = SWIG_NewPointerObj((new VisiLibity::Point(static_cast< const VisiLibity::Point& >(result))), SWIGTYPE_p_VisiLibity__Point, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Polygon_diameter(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon *arg1 = (VisiLibity::Polygon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polygon const *","diameter", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polygon * >(argp1);
  result = (double)((VisiLibity::Polygon const *)arg1)->diameter();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Polygon_bbox(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon *arg1 = (VisiLibity::Polygon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VisiLibity::Bounding_Box result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polygon const *","bbox", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polygon * >(argp1);
  result = ((VisiLibity::Polygon const *)arg1)->bbox();
  vresult = SWIG_NewPointerObj((new VisiLibity::Bounding_Box(static_cast< const VisiLibity::Bounding_Box& >(result))), SWIGTYPE_p_VisiLibity__Bounding_Box, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Polygon_random_points__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon *arg1 = (VisiLibity::Polygon *) 0 ;
  unsigned int *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polygon const *","random_points", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polygon * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","random_points", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","random_points", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  result = ((VisiLibity::Polygon const *)arg1)->random_points((unsigned int const &)*arg2,arg3);
  vresult = swig::from(static_cast< std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > > >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Polygon_random_points__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon *arg1 = (VisiLibity::Polygon *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polygon const *","random_points", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polygon * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","random_points", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  result = ((VisiLibity::Polygon const *)arg1)->random_points((unsigned int const &)*arg2);
  vresult = swig::from(static_cast< std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > > >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Polygon_random_points(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Polygon_random_points__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Polygon_random_points__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Polygon.random_points", 
    "    std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > Polygon.random_points(unsigned int const &count, double epsilon)\n"
    "    std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > Polygon.random_points(unsigned int const &count)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Polygon_write_to_file__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon *arg1 = (VisiLibity::Polygon *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polygon *","write_to_file", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polygon * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","write_to_file", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","write_to_file", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","write_to_file", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->write_to_file((std::string const &)*arg2,arg3);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Polygon_write_to_file__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon *arg1 = (VisiLibity::Polygon *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polygon *","write_to_file", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polygon * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","write_to_file", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","write_to_file", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  (arg1)->write_to_file((std::string const &)*arg2);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_Polygon_write_to_file(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Polygon_write_to_file__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Polygon_write_to_file__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Polygon.write_to_file", 
    "    void Polygon.write_to_file(std::string const &filename, int fios_precision_temp)\n"
    "    void Polygon.write_to_file(std::string const &filename)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Polygon_index__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon *arg1 = (VisiLibity::Polygon *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  VisiLibity::Point *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polygon *","operator []", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polygon * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","operator []", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (VisiLibity::Point *) &(arg1)->operator [](arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Polygon_index(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Polygon_index__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Polygon_index__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Polygon.index", 
    "    VisiLibity::Point & Polygon.index(unsigned int i)\n"
    "    VisiLibity::Point & Polygon.index(unsigned int i)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Polygon_set_vertices(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon *arg1 = (VisiLibity::Polygon *) 0 ;
  std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polygon *","set_vertices", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polygon * >(argp1);
  {
    std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > > *ptr = (std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > > *)0;
    res2 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > const &","set_vertices", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > const &","set_vertices", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  (arg1)->set_vertices((std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > const &)*arg2);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}



/*
  Document-method: VisiLibity::Polygon.push_back

  call-seq:
    push_back(vertex_temp)

Add an element at the end of the Polygon.
*/
SWIGINTERN VALUE
_wrap_Polygon_push_back(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon *arg1 = (VisiLibity::Polygon *) 0 ;
  VisiLibity::Point *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polygon *","push_back", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polygon * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","push_back", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","push_back", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  (arg1)->push_back((VisiLibity::Point const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: VisiLibity::Polygon.clear

  call-seq:
    clear

Clear Polygon contents.
*/
SWIGINTERN VALUE
_wrap_Polygon_clear(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon *arg1 = (VisiLibity::Polygon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polygon *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polygon * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Polygon_enforce_standard_form(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon *arg1 = (VisiLibity::Polygon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polygon *","enforce_standard_form", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polygon * >(argp1);
  (arg1)->enforce_standard_form();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Polygon_eliminate_redundant_vertices__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon *arg1 = (VisiLibity::Polygon *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polygon *","eliminate_redundant_vertices", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polygon * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","eliminate_redundant_vertices", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->eliminate_redundant_vertices(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Polygon_eliminate_redundant_vertices__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon *arg1 = (VisiLibity::Polygon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polygon *","eliminate_redundant_vertices", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polygon * >(argp1);
  (arg1)->eliminate_redundant_vertices();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Polygon_eliminate_redundant_vertices(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Polygon_eliminate_redundant_vertices__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Polygon_eliminate_redundant_vertices__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Polygon.eliminate_redundant_vertices", 
    "    void Polygon.eliminate_redundant_vertices(double epsilon)\n"
    "    void Polygon.eliminate_redundant_vertices()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Polygon_reverse(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon *arg1 = (VisiLibity::Polygon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Polygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polygon *","reverse", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polygon * >(argp1);
  (arg1)->reverse();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN void
free_VisiLibity_Polygon(VisiLibity::Polygon *arg1) {
    delete arg1;
}


/*
  Document-method: VisiLibity::VisiLibity.==

  call-seq:
    ==(point1, point2) -> bool
    ==(line_segment1, line_segment2) -> bool
    ==(angle1, angle2) -> bool
    ==(polar_point1, polar_point2) -> bool
    ==(ray1, ray2) -> bool
    ==(polygon1, polygon2) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap___eq____SWIG_5(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon arg1 ;
  VisiLibity::Polygon arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Polygon,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polygon","VisiLibity::operator ==", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon","VisiLibity::operator ==", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< VisiLibity::Polygon * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Polygon,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polygon","VisiLibity::operator ==", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon","VisiLibity::operator ==", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< VisiLibity::Polygon * >(argp2));
    }
  }
  result = (bool)VisiLibity::operator ==(arg1,arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap___eq__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Polar_Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polar_Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___eq____SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___eq____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Angle, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Angle, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___eq____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___eq____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Ray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Ray, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___eq____SWIG_4(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___eq____SWIG_5(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "__eq__", 
    "    bool __eq__(VisiLibity::Point const &point1, VisiLibity::Point const &point2)\n"
    "    bool __eq__(VisiLibity::Line_Segment const &line_segment1, VisiLibity::Line_Segment const &line_segment2)\n"
    "    bool __eq__(VisiLibity::Angle const &angle1, VisiLibity::Angle const &angle2)\n"
    "    bool __eq__(VisiLibity::Polar_Point const &polar_point1, VisiLibity::Polar_Point const &polar_point2)\n"
    "    bool __eq__(VisiLibity::Ray const &ray1, VisiLibity::Ray const &ray2)\n"
    "    bool __eq__(VisiLibity::Polygon polygon1, VisiLibity::Polygon polygon2)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_equivalent__SWIG_2(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon arg1 ;
  VisiLibity::Polygon arg2 ;
  double arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Polygon,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polygon","VisiLibity::equivalent", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon","VisiLibity::equivalent", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< VisiLibity::Polygon * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Polygon,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polygon","VisiLibity::equivalent", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon","VisiLibity::equivalent", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< VisiLibity::Polygon * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","VisiLibity::equivalent", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)VisiLibity::equivalent(arg1,arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_equivalent__SWIG_3(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon arg1 ;
  VisiLibity::Polygon arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Polygon,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polygon","VisiLibity::equivalent", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon","VisiLibity::equivalent", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< VisiLibity::Polygon * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Polygon,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polygon","VisiLibity::equivalent", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon","VisiLibity::equivalent", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< VisiLibity::Polygon * >(argp2));
    }
  }
  result = (bool)VisiLibity::equivalent(arg1,arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_equivalent(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_equivalent__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_equivalent__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_equivalent__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_equivalent__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "equivalent", 
    "    bool equivalent(VisiLibity::Line_Segment line_segment1, VisiLibity::Line_Segment line_segment2, double epsilon)\n"
    "    bool equivalent(VisiLibity::Line_Segment line_segment1, VisiLibity::Line_Segment line_segment2)\n"
    "    bool equivalent(VisiLibity::Polygon polygon1, VisiLibity::Polygon polygon2, double epsilon)\n"
    "    bool equivalent(VisiLibity::Polygon polygon1, VisiLibity::Polygon polygon2)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_boundary_distance__SWIG_6(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon *arg1 = 0 ;
  VisiLibity::Polygon *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Polygon,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polygon const &","VisiLibity::boundary_distance", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon const &","VisiLibity::boundary_distance", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polygon * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Polygon,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polygon const &","VisiLibity::boundary_distance", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon const &","VisiLibity::boundary_distance", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polygon * >(argp2);
  result = (double)VisiLibity::boundary_distance((VisiLibity::Polygon const &)*arg1,(VisiLibity::Polygon const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_boundary_distance(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_boundary_distance__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_boundary_distance__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_boundary_distance__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_boundary_distance__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_boundary_distance__SWIG_4(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_boundary_distance__SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_boundary_distance__SWIG_6(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "boundary_distance", 
    "    double boundary_distance(VisiLibity::Point const &point_temp, VisiLibity::Polygon const &polygon_temp)\n"
    "    double boundary_distance(VisiLibity::Polygon const &polygon_temp, VisiLibity::Point const &point_temp)\n"
    "    double boundary_distance(VisiLibity::Point const &point_temp, VisiLibity::Environment const &environment_temp)\n"
    "    double boundary_distance(VisiLibity::Environment const &environment_temp, VisiLibity::Point const &point_temp)\n"
    "    double boundary_distance(VisiLibity::Line_Segment const &line_segment, VisiLibity::Polygon const &polygon)\n"
    "    double boundary_distance(VisiLibity::Polygon const &polygon, VisiLibity::Line_Segment const &line_segment)\n"
    "    double boundary_distance(VisiLibity::Polygon const &polygon1, VisiLibity::Polygon const &polygon2)\n");
  
  return Qnil;
}



/*
  Document-method: VisiLibity::VisiLibity.<<

  call-seq:
    <<(outs, point_temp) -> std::ostream
    <<(outs, line_segment_temp) -> std::ostream
    <<(outs, angle_temp) -> std::ostream
    <<(outs, polar_point_temp) -> std::ostream
    <<(outs, polyline_temp) -> std::ostream
    <<(outs, polygon_temp) -> std::ostream
    <<(outs, environment_temp) -> std::ostream
    <<(outs, guards) -> std::ostream
    <<(outs, visibility_graph) -> std::ostream

Left shifting or appending operator.
*/
SWIGINTERN VALUE
_wrap___lshift____SWIG_5(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  VisiLibity::Polygon *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","VisiLibity::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","VisiLibity::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Polygon,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polygon const &","VisiLibity::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon const &","VisiLibity::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polygon * >(argp2);
  result = (std::ostream *) &VisiLibity::operator <<(*arg1,(VisiLibity::Polygon const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassEnvironment;

SWIGINTERN VALUE
_wrap_new_Environment__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (VisiLibity::Environment *)new VisiLibity::Environment();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Environment__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Polygon *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  VisiLibity::Environment *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Polygon,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Polygon const &","VisiLibity::Environment", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon const &","VisiLibity::Environment", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Polygon * >(argp1);
  result = (VisiLibity::Environment *)new VisiLibity::Environment((VisiLibity::Polygon const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Environment__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  VisiLibity::Environment *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > *ptr = (std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > const &","VisiLibity::Environment", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > const &","VisiLibity::Environment", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  result = (VisiLibity::Environment *)new VisiLibity::Environment((std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > const &)*arg1);
  DATA_PTR(self) = result;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Environment_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Environment_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_VisiLibity__Environment);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Environment__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  VisiLibity::Environment *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::string const &","VisiLibity::Environment", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","VisiLibity::Environment", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  result = (VisiLibity::Environment *)new VisiLibity::Environment((std::string const &)*arg1);
  DATA_PTR(self) = result;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Environment(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Environment__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Environment__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Environment__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Environment__SWIG_2(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Environment.new", 
    "    Environment.new()\n"
    "    Environment.new(VisiLibity::Polygon const &polygon_temp)\n"
    "    Environment.new(std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > const &polygons)\n"
    "    Environment.new(std::string const &filename)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Environment_index__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = (VisiLibity::Environment *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  VisiLibity::Polygon *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Environment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment const *","operator []", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","operator []", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (VisiLibity::Polygon *) &((VisiLibity::Environment const *)arg1)->operator [](arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VisiLibity__Polygon, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Environment___call____SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = (VisiLibity::Environment *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  VisiLibity::Point *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Environment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment const *","operator ()", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","operator ()", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (VisiLibity::Point *) &((VisiLibity::Environment const *)arg1)->operator ()(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Environment_h(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = (VisiLibity::Environment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Environment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment const *","h", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  result = (unsigned int)((VisiLibity::Environment const *)arg1)->h();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Environment_n(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = (VisiLibity::Environment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Environment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment const *","n", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  result = (unsigned int)((VisiLibity::Environment const *)arg1)->n();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Environment_r(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = (VisiLibity::Environment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Environment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment const *","r", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  result = (unsigned int)((VisiLibity::Environment const *)arg1)->r();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Environment_in_standard_formq___(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = (VisiLibity::Environment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Environment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment const *","is_in_standard_form", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  result = (bool)((VisiLibity::Environment const *)arg1)->is_in_standard_form();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Environment_validq_____SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = (VisiLibity::Environment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Environment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment const *","is_valid", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","is_valid", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  result = (bool)((VisiLibity::Environment const *)arg1)->is_valid(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Environment_validq_____SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = (VisiLibity::Environment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Environment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment const *","is_valid", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  result = (bool)((VisiLibity::Environment const *)arg1)->is_valid();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Environment_validq___(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Environment_validq_____SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Environment_validq_____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Environment.valid?", 
    "    bool Environment.valid?(double epsilon)\n"
    "    bool Environment.valid?()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Environment_boundary_length(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = (VisiLibity::Environment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Environment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment const *","boundary_length", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  result = (double)((VisiLibity::Environment const *)arg1)->boundary_length();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Environment_area(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = (VisiLibity::Environment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Environment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment const *","area", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  result = (double)((VisiLibity::Environment const *)arg1)->area();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Environment_diameter(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = (VisiLibity::Environment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Environment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment const *","diameter", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  result = (double)((VisiLibity::Environment const *)arg1)->diameter();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Environment_bbox(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = (VisiLibity::Environment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VisiLibity::Bounding_Box result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Environment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment const *","bbox", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  result = ((VisiLibity::Environment const *)arg1)->bbox();
  vresult = SWIG_NewPointerObj((new VisiLibity::Bounding_Box(static_cast< const VisiLibity::Bounding_Box& >(result))), SWIGTYPE_p_VisiLibity__Bounding_Box, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Environment_random_points__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = (VisiLibity::Environment *) 0 ;
  unsigned int *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Environment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment const *","random_points", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","random_points", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","random_points", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  result = ((VisiLibity::Environment const *)arg1)->random_points((unsigned int const &)*arg2,arg3);
  vresult = swig::from(static_cast< std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > > >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Environment_random_points__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = (VisiLibity::Environment *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Environment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment const *","random_points", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","random_points", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  result = ((VisiLibity::Environment const *)arg1)->random_points((unsigned int const &)*arg2);
  vresult = swig::from(static_cast< std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > > >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Environment_random_points(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Environment_random_points__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Environment_random_points__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Environment.random_points", 
    "    std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > Environment.random_points(unsigned int const &count, double epsilon)\n"
    "    std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > Environment.random_points(unsigned int const &count)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Environment_shortest_path__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = (VisiLibity::Environment *) 0 ;
  VisiLibity::Point *arg2 = 0 ;
  VisiLibity::Point *arg3 = 0 ;
  VisiLibity::Visibility_Graph *arg4 = 0 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  VisiLibity::Polyline result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Environment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment *","shortest_path", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","shortest_path", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","shortest_path", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "VisiLibity::Point const &","shortest_path", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","shortest_path", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< VisiLibity::Point * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_VisiLibity__Visibility_Graph,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "VisiLibity::Visibility_Graph const &","shortest_path", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Visibility_Graph const &","shortest_path", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< VisiLibity::Visibility_Graph * >(argp4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","shortest_path", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  result = (arg1)->shortest_path((VisiLibity::Point const &)*arg2,(VisiLibity::Point const &)*arg3,(VisiLibity::Visibility_Graph const &)*arg4,arg5);
  vresult = SWIG_NewPointerObj((new VisiLibity::Polyline(static_cast< const VisiLibity::Polyline& >(result))), SWIGTYPE_p_VisiLibity__Polyline, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Environment_shortest_path__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = (VisiLibity::Environment *) 0 ;
  VisiLibity::Point *arg2 = 0 ;
  VisiLibity::Point *arg3 = 0 ;
  VisiLibity::Visibility_Graph *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  VisiLibity::Polyline result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Environment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment *","shortest_path", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","shortest_path", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","shortest_path", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "VisiLibity::Point const &","shortest_path", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","shortest_path", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< VisiLibity::Point * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_VisiLibity__Visibility_Graph,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "VisiLibity::Visibility_Graph const &","shortest_path", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Visibility_Graph const &","shortest_path", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< VisiLibity::Visibility_Graph * >(argp4);
  result = (arg1)->shortest_path((VisiLibity::Point const &)*arg2,(VisiLibity::Point const &)*arg3,(VisiLibity::Visibility_Graph const &)*arg4);
  vresult = SWIG_NewPointerObj((new VisiLibity::Polyline(static_cast< const VisiLibity::Polyline& >(result))), SWIGTYPE_p_VisiLibity__Polyline, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Environment_shortest_path__SWIG_2(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = (VisiLibity::Environment *) 0 ;
  VisiLibity::Point *arg2 = 0 ;
  VisiLibity::Point *arg3 = 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  VisiLibity::Polyline result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Environment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment *","shortest_path", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","shortest_path", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","shortest_path", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "VisiLibity::Point const &","shortest_path", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","shortest_path", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< VisiLibity::Point * >(argp3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","shortest_path", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  result = (arg1)->shortest_path((VisiLibity::Point const &)*arg2,(VisiLibity::Point const &)*arg3,arg4);
  vresult = SWIG_NewPointerObj((new VisiLibity::Polyline(static_cast< const VisiLibity::Polyline& >(result))), SWIGTYPE_p_VisiLibity__Polyline, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Environment_shortest_path__SWIG_3(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = (VisiLibity::Environment *) 0 ;
  VisiLibity::Point *arg2 = 0 ;
  VisiLibity::Point *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VisiLibity::Polyline result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Environment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment *","shortest_path", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","shortest_path", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","shortest_path", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "VisiLibity::Point const &","shortest_path", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","shortest_path", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< VisiLibity::Point * >(argp3);
  result = (arg1)->shortest_path((VisiLibity::Point const &)*arg2,(VisiLibity::Point const &)*arg3);
  vresult = SWIG_NewPointerObj((new VisiLibity::Polyline(static_cast< const VisiLibity::Polyline& >(result))), SWIGTYPE_p_VisiLibity__Polyline, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Environment_shortest_path(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Environment_shortest_path__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_VisiLibity__Visibility_Graph, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Environment_shortest_path__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Environment_shortest_path__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_VisiLibity__Visibility_Graph, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Environment_shortest_path__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "Environment.shortest_path", 
    "    VisiLibity::Polyline Environment.shortest_path(VisiLibity::Point const &start, VisiLibity::Point const &finish, VisiLibity::Visibility_Graph const &visibility_graph, double epsilon)\n"
    "    VisiLibity::Polyline Environment.shortest_path(VisiLibity::Point const &start, VisiLibity::Point const &finish, VisiLibity::Visibility_Graph const &visibility_graph)\n"
    "    VisiLibity::Polyline Environment.shortest_path(VisiLibity::Point const &start, VisiLibity::Point const &finish, double epsilon)\n"
    "    VisiLibity::Polyline Environment.shortest_path(VisiLibity::Point const &start, VisiLibity::Point const &finish)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Environment_compute_partition_cells__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = (VisiLibity::Environment *) 0 ;
  SwigValueWrapper< std::vector< VisiLibity::Line_Segment,std::allocator< VisiLibity::Line_Segment > > > arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Environment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment *","compute_partition_cells", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_VisiLibity__Line_Segment_std__allocatorT_VisiLibity__Line_Segment_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Line_Segment,std::allocator< VisiLibity::Line_Segment > >","compute_partition_cells", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Line_Segment,std::allocator< VisiLibity::Line_Segment > >","compute_partition_cells", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< std::vector< VisiLibity::Line_Segment,std::allocator< VisiLibity::Line_Segment > > * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","compute_partition_cells", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  result = (arg1)->compute_partition_cells(arg2,arg3);
  vresult = swig::from(static_cast< std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Environment_compute_partition_cells__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = (VisiLibity::Environment *) 0 ;
  SwigValueWrapper< std::vector< VisiLibity::Line_Segment,std::allocator< VisiLibity::Line_Segment > > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Environment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment *","compute_partition_cells", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_VisiLibity__Line_Segment_std__allocatorT_VisiLibity__Line_Segment_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Line_Segment,std::allocator< VisiLibity::Line_Segment > >","compute_partition_cells", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Line_Segment,std::allocator< VisiLibity::Line_Segment > >","compute_partition_cells", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< std::vector< VisiLibity::Line_Segment,std::allocator< VisiLibity::Line_Segment > > * >(argp2));
    }
  }
  result = (arg1)->compute_partition_cells(arg2);
  vresult = swig::from(static_cast< std::vector<VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Environment_compute_partition_cells(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_VisiLibity__Line_Segment_std__allocatorT_VisiLibity__Line_Segment_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Environment_compute_partition_cells__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_VisiLibity__Line_Segment_std__allocatorT_VisiLibity__Line_Segment_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Environment_compute_partition_cells__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Environment.compute_partition_cells", 
    "    std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > Environment.compute_partition_cells(std::vector< VisiLibity::Line_Segment,std::allocator< VisiLibity::Line_Segment > > partition_inducing_segments, double epsilon)\n"
    "    std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > Environment.compute_partition_cells(std::vector< VisiLibity::Line_Segment,std::allocator< VisiLibity::Line_Segment > > partition_inducing_segments)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Environment_write_to_file__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = (VisiLibity::Environment *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Environment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment *","write_to_file", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","write_to_file", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","write_to_file", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","write_to_file", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->write_to_file((std::string const &)*arg2,arg3);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Environment_write_to_file__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = (VisiLibity::Environment *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Environment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment *","write_to_file", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","write_to_file", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","write_to_file", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  (arg1)->write_to_file((std::string const &)*arg2);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_Environment_write_to_file(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Environment_write_to_file__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Environment_write_to_file__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Environment.write_to_file", 
    "    void Environment.write_to_file(std::string const &filename, int fios_precision_temp)\n"
    "    void Environment.write_to_file(std::string const &filename)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Environment_index__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = (VisiLibity::Environment *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  VisiLibity::Polygon *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Environment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment *","operator []", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","operator []", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (VisiLibity::Polygon *) &(arg1)->operator [](arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VisiLibity__Polygon, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Environment_index(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Environment_index__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Environment_index__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Environment.index", 
    "    VisiLibity::Polygon & Environment.index(unsigned int i)\n"
    "    VisiLibity::Polygon & Environment.index(unsigned int i)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Environment___call____SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = (VisiLibity::Environment *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  VisiLibity::Point *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Environment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment *","operator ()", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","operator ()", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (VisiLibity::Point *) &(arg1)->operator ()(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Environment___call__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Environment___call____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Environment___call____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Environment.__call__", 
    "    VisiLibity::Point & Environment.__call__(unsigned int k)\n"
    "    VisiLibity::Point & Environment.__call__(unsigned int k)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Environment_set_outer_boundary(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = (VisiLibity::Environment *) 0 ;
  VisiLibity::Polygon *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Environment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment *","set_outer_boundary", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Polygon,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polygon const &","set_outer_boundary", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon const &","set_outer_boundary", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polygon * >(argp2);
  (arg1)->set_outer_boundary((VisiLibity::Polygon const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Environment_add_hole(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = (VisiLibity::Environment *) 0 ;
  VisiLibity::Polygon *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Environment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment *","add_hole", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Polygon,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polygon const &","add_hole", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon const &","add_hole", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polygon * >(argp2);
  (arg1)->add_hole((VisiLibity::Polygon const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Environment_enforce_standard_form(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = (VisiLibity::Environment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Environment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment *","enforce_standard_form", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  (arg1)->enforce_standard_form();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Environment_eliminate_redundant_vertices__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = (VisiLibity::Environment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Environment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment *","eliminate_redundant_vertices", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","eliminate_redundant_vertices", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->eliminate_redundant_vertices(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Environment_eliminate_redundant_vertices__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = (VisiLibity::Environment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Environment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment *","eliminate_redundant_vertices", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  (arg1)->eliminate_redundant_vertices();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Environment_eliminate_redundant_vertices(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Environment_eliminate_redundant_vertices__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Environment_eliminate_redundant_vertices__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Environment.eliminate_redundant_vertices", 
    "    void Environment.eliminate_redundant_vertices(double epsilon)\n"
    "    void Environment.eliminate_redundant_vertices()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Environment_reverse_holes(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = (VisiLibity::Environment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Environment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment *","reverse_holes", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  (arg1)->reverse_holes();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN void
free_VisiLibity_Environment(VisiLibity::Environment *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap___lshift____SWIG_6(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  VisiLibity::Environment *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","VisiLibity::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","VisiLibity::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Environment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Environment const &","VisiLibity::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Environment const &","VisiLibity::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Environment * >(argp2);
  result = (std::ostream *) &VisiLibity::operator <<(*arg1,(VisiLibity::Environment const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassGuards;

SWIGINTERN VALUE
_wrap_new_Guards__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Guards *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (VisiLibity::Guards *)new VisiLibity::Guards();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Guards__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  VisiLibity::Guards *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::string const &","VisiLibity::Guards", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","VisiLibity::Guards", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  result = (VisiLibity::Guards *)new VisiLibity::Guards((std::string const &)*arg1);
  DATA_PTR(self) = result;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Guards_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Guards_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_VisiLibity__Guards);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Guards__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  VisiLibity::Guards *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > > *ptr = (std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > const &","VisiLibity::Guards", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > const &","VisiLibity::Guards", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  result = (VisiLibity::Guards *)new VisiLibity::Guards((std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > const &)*arg1);
  DATA_PTR(self) = result;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Guards(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Guards__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Guards__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Guards__SWIG_2(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Guards.new", 
    "    Guards.new()\n"
    "    Guards.new(std::string const &filename)\n"
    "    Guards.new(std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > const &positions)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Guards_index__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Guards *arg1 = (VisiLibity::Guards *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  VisiLibity::Point *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Guards, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Guards const *","operator []", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Guards * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","operator []", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (VisiLibity::Point *) &((VisiLibity::Guards const *)arg1)->operator [](arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Guards_n(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Guards *arg1 = (VisiLibity::Guards *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Guards, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Guards const *","N", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Guards * >(argp1);
  result = (unsigned int)((VisiLibity::Guards const *)arg1)->N();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Guards_are_lex_ordered(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Guards *arg1 = (VisiLibity::Guards *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Guards, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Guards const *","are_lex_ordered", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Guards * >(argp1);
  result = (bool)((VisiLibity::Guards const *)arg1)->are_lex_ordered();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Guards_noncolocated__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Guards *arg1 = (VisiLibity::Guards *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Guards, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Guards const *","noncolocated", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Guards * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","noncolocated", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  result = (bool)((VisiLibity::Guards const *)arg1)->noncolocated(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Guards_noncolocated__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Guards *arg1 = (VisiLibity::Guards *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Guards, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Guards const *","noncolocated", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Guards * >(argp1);
  result = (bool)((VisiLibity::Guards const *)arg1)->noncolocated();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Guards_noncolocated(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Guards, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Guards_noncolocated__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Guards, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Guards_noncolocated__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Guards.noncolocated", 
    "    bool Guards.noncolocated(double epsilon)\n"
    "    bool Guards.noncolocated()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Guards_in__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Guards *arg1 = (VisiLibity::Guards *) 0 ;
  VisiLibity::Polygon *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Guards, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Guards const *","in", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Guards * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Polygon,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polygon const &","in", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon const &","in", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polygon * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","in", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)((VisiLibity::Guards const *)arg1)->in((VisiLibity::Polygon const &)*arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Guards_in__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Guards *arg1 = (VisiLibity::Guards *) 0 ;
  VisiLibity::Polygon *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Guards, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Guards const *","in", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Guards * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Polygon,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polygon const &","in", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon const &","in", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polygon * >(argp2);
  result = (bool)((VisiLibity::Guards const *)arg1)->in((VisiLibity::Polygon const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Guards_in__SWIG_2(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Guards *arg1 = (VisiLibity::Guards *) 0 ;
  VisiLibity::Environment *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Guards, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Guards const *","in", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Guards * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Environment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Environment const &","in", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Environment const &","in", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Environment * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","in", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)((VisiLibity::Guards const *)arg1)->in((VisiLibity::Environment const &)*arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Guards_in__SWIG_3(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Guards *arg1 = (VisiLibity::Guards *) 0 ;
  VisiLibity::Environment *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Guards, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Guards const *","in", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Guards * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Environment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Environment const &","in", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Environment const &","in", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Environment * >(argp2);
  result = (bool)((VisiLibity::Guards const *)arg1)->in((VisiLibity::Environment const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Guards_in(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Guards, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Guards_in__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Guards, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Guards_in__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Guards, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Guards_in__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Guards, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Guards_in__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Guards.in", 
    "    bool Guards.in(VisiLibity::Polygon const &polygon_temp, double epsilon)\n"
    "    bool Guards.in(VisiLibity::Polygon const &polygon_temp)\n"
    "    bool Guards.in(VisiLibity::Environment const &environment_temp, double epsilon)\n"
    "    bool Guards.in(VisiLibity::Environment const &environment_temp)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Guards_diameter(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Guards *arg1 = (VisiLibity::Guards *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Guards, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Guards const *","diameter", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Guards * >(argp1);
  result = (double)((VisiLibity::Guards const *)arg1)->diameter();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Guards_bbox(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Guards *arg1 = (VisiLibity::Guards *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VisiLibity::Bounding_Box result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Guards, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Guards const *","bbox", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Guards * >(argp1);
  result = ((VisiLibity::Guards const *)arg1)->bbox();
  vresult = SWIG_NewPointerObj((new VisiLibity::Bounding_Box(static_cast< const VisiLibity::Bounding_Box& >(result))), SWIGTYPE_p_VisiLibity__Bounding_Box, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Guards_write_to_file__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Guards *arg1 = (VisiLibity::Guards *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Guards, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Guards *","write_to_file", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Guards * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","write_to_file", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","write_to_file", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","write_to_file", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->write_to_file((std::string const &)*arg2,arg3);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Guards_write_to_file__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Guards *arg1 = (VisiLibity::Guards *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Guards, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Guards *","write_to_file", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Guards * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","write_to_file", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","write_to_file", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  (arg1)->write_to_file((std::string const &)*arg2);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_Guards_write_to_file(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Guards, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Guards_write_to_file__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Guards, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Guards_write_to_file__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Guards.write_to_file", 
    "    void Guards.write_to_file(std::string const &filename, int fios_precision_temp)\n"
    "    void Guards.write_to_file(std::string const &filename)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Guards_index__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Guards *arg1 = (VisiLibity::Guards *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  VisiLibity::Point *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Guards, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Guards *","operator []", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Guards * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","operator []", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (VisiLibity::Point *) &(arg1)->operator [](arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VisiLibity__Point, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Guards_index(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Guards, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Guards_index__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Guards, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Guards_index__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Guards.index", 
    "    VisiLibity::Point & Guards.index(unsigned int i)\n"
    "    VisiLibity::Point & Guards.index(unsigned int i)\n");
  
  return Qnil;
}



/*
  Document-method: VisiLibity::Guards.push_back

  call-seq:
    push_back(point_temp)

Add an element at the end of the Guards.
*/
SWIGINTERN VALUE
_wrap_Guards_push_back(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Guards *arg1 = (VisiLibity::Guards *) 0 ;
  VisiLibity::Point *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Guards, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Guards *","push_back", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Guards * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Point const &","push_back", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","push_back", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Point * >(argp2);
  (arg1)->push_back((VisiLibity::Point const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Guards_set_positions(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Guards *arg1 = (VisiLibity::Guards *) 0 ;
  std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Guards, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Guards *","set_positions", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Guards * >(argp1);
  {
    std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > > *ptr = (std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > > *)0;
    res2 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > const &","set_positions", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > const &","set_positions", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  (arg1)->set_positions((std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > const &)*arg2);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Guards_enforce_lex_order(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Guards *arg1 = (VisiLibity::Guards *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Guards, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Guards *","enforce_lex_order", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Guards * >(argp1);
  (arg1)->enforce_lex_order();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Guards_reverse(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Guards *arg1 = (VisiLibity::Guards *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Guards, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Guards *","reverse", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Guards * >(argp1);
  (arg1)->reverse();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Guards_snap_to_vertices_of__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Guards *arg1 = (VisiLibity::Guards *) 0 ;
  VisiLibity::Environment *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Guards, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Guards *","snap_to_vertices_of", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Guards * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Environment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Environment const &","snap_to_vertices_of", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Environment const &","snap_to_vertices_of", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Environment * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","snap_to_vertices_of", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->snap_to_vertices_of((VisiLibity::Environment const &)*arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Guards_snap_to_vertices_of__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Guards *arg1 = (VisiLibity::Guards *) 0 ;
  VisiLibity::Environment *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Guards, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Guards *","snap_to_vertices_of", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Guards * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Environment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Environment const &","snap_to_vertices_of", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Environment const &","snap_to_vertices_of", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Environment * >(argp2);
  (arg1)->snap_to_vertices_of((VisiLibity::Environment const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Guards_snap_to_vertices_of__SWIG_2(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Guards *arg1 = (VisiLibity::Guards *) 0 ;
  VisiLibity::Polygon *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Guards, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Guards *","snap_to_vertices_of", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Guards * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Polygon,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polygon const &","snap_to_vertices_of", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon const &","snap_to_vertices_of", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polygon * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","snap_to_vertices_of", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->snap_to_vertices_of((VisiLibity::Polygon const &)*arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Guards_snap_to_vertices_of__SWIG_3(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Guards *arg1 = (VisiLibity::Guards *) 0 ;
  VisiLibity::Polygon *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Guards, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Guards *","snap_to_vertices_of", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Guards * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Polygon,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polygon const &","snap_to_vertices_of", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon const &","snap_to_vertices_of", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polygon * >(argp2);
  (arg1)->snap_to_vertices_of((VisiLibity::Polygon const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Guards_snap_to_vertices_of(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Guards, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Guards_snap_to_vertices_of__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Guards, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Guards_snap_to_vertices_of__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Guards, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Guards_snap_to_vertices_of__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Guards, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Guards_snap_to_vertices_of__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Guards.snap_to_vertices_of", 
    "    void Guards.snap_to_vertices_of(VisiLibity::Environment const &environment_temp, double epsilon)\n"
    "    void Guards.snap_to_vertices_of(VisiLibity::Environment const &environment_temp)\n"
    "    void Guards.snap_to_vertices_of(VisiLibity::Polygon const &polygon_temp, double epsilon)\n"
    "    void Guards.snap_to_vertices_of(VisiLibity::Polygon const &polygon_temp)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Guards_snap_to_boundary_of__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Guards *arg1 = (VisiLibity::Guards *) 0 ;
  VisiLibity::Environment *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Guards, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Guards *","snap_to_boundary_of", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Guards * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Environment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Environment const &","snap_to_boundary_of", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Environment const &","snap_to_boundary_of", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Environment * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","snap_to_boundary_of", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->snap_to_boundary_of((VisiLibity::Environment const &)*arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Guards_snap_to_boundary_of__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Guards *arg1 = (VisiLibity::Guards *) 0 ;
  VisiLibity::Environment *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Guards, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Guards *","snap_to_boundary_of", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Guards * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Environment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Environment const &","snap_to_boundary_of", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Environment const &","snap_to_boundary_of", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Environment * >(argp2);
  (arg1)->snap_to_boundary_of((VisiLibity::Environment const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Guards_snap_to_boundary_of__SWIG_2(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Guards *arg1 = (VisiLibity::Guards *) 0 ;
  VisiLibity::Polygon *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Guards, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Guards *","snap_to_boundary_of", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Guards * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Polygon,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polygon const &","snap_to_boundary_of", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon const &","snap_to_boundary_of", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polygon * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","snap_to_boundary_of", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->snap_to_boundary_of((VisiLibity::Polygon const &)*arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Guards_snap_to_boundary_of__SWIG_3(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Guards *arg1 = (VisiLibity::Guards *) 0 ;
  VisiLibity::Polygon *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Guards, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Guards *","snap_to_boundary_of", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Guards * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_VisiLibity__Polygon,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polygon const &","snap_to_boundary_of", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon const &","snap_to_boundary_of", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polygon * >(argp2);
  (arg1)->snap_to_boundary_of((VisiLibity::Polygon const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Guards_snap_to_boundary_of(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Guards, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Guards_snap_to_boundary_of__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Guards, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Guards_snap_to_boundary_of__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Guards, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Guards_snap_to_boundary_of__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Guards, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Guards_snap_to_boundary_of__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Guards.snap_to_boundary_of", 
    "    void Guards.snap_to_boundary_of(VisiLibity::Environment const &environment_temp, double epsilon)\n"
    "    void Guards.snap_to_boundary_of(VisiLibity::Environment const &environment_temp)\n"
    "    void Guards.snap_to_boundary_of(VisiLibity::Polygon const &polygon_temp, double epsilon)\n"
    "    void Guards.snap_to_boundary_of(VisiLibity::Polygon const &polygon_temp)\n");
  
  return Qnil;
}


SWIGINTERN void
free_VisiLibity_Guards(VisiLibity::Guards *arg1) {
    delete arg1;
}


/*
  Document-method: VisiLibity::VisiLibity.<<

  call-seq:
    <<(outs, point_temp) -> std::ostream
    <<(outs, line_segment_temp) -> std::ostream
    <<(outs, angle_temp) -> std::ostream
    <<(outs, polar_point_temp) -> std::ostream
    <<(outs, polyline_temp) -> std::ostream
    <<(outs, polygon_temp) -> std::ostream
    <<(outs, environment_temp) -> std::ostream
    <<(outs, guards) -> std::ostream
    <<(outs, visibility_graph) -> std::ostream

Left shifting or appending operator.
*/
SWIGINTERN VALUE
_wrap___lshift____SWIG_7(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  VisiLibity::Guards *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","VisiLibity::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","VisiLibity::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Guards,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Guards const &","VisiLibity::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Guards const &","VisiLibity::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Guards * >(argp2);
  result = (std::ostream *) &VisiLibity::operator <<(*arg1,(VisiLibity::Guards const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


swig_class SwigClassVisibilityPolygon;

SWIGINTERN VALUE
_wrap_new_VisibilityPolygon__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Visibility_Polygon *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (VisiLibity::Visibility_Polygon *)new VisiLibity::Visibility_Polygon();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VisibilityPolygon__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = 0 ;
  VisiLibity::Environment *arg2 = 0 ;
  double arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  VisiLibity::Visibility_Polygon *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::Visibility_Polygon", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::Visibility_Polygon", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Environment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Environment const &","VisiLibity::Visibility_Polygon", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Environment const &","VisiLibity::Visibility_Polygon", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Environment * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","VisiLibity::Visibility_Polygon", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  result = (VisiLibity::Visibility_Polygon *)new VisiLibity::Visibility_Polygon((VisiLibity::Point const &)*arg1,(VisiLibity::Environment const &)*arg2,arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VisibilityPolygon__SWIG_2(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = 0 ;
  VisiLibity::Environment *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VisiLibity::Visibility_Polygon *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::Visibility_Polygon", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::Visibility_Polygon", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Environment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Environment const &","VisiLibity::Visibility_Polygon", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Environment const &","VisiLibity::Visibility_Polygon", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Environment * >(argp2);
  result = (VisiLibity::Visibility_Polygon *)new VisiLibity::Visibility_Polygon((VisiLibity::Point const &)*arg1,(VisiLibity::Environment const &)*arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VisibilityPolygon__SWIG_3(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = 0 ;
  VisiLibity::Polygon *arg2 = 0 ;
  double arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  VisiLibity::Visibility_Polygon *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::Visibility_Polygon", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::Visibility_Polygon", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Polygon,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polygon const &","VisiLibity::Visibility_Polygon", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon const &","VisiLibity::Visibility_Polygon", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polygon * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","VisiLibity::Visibility_Polygon", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  result = (VisiLibity::Visibility_Polygon *)new VisiLibity::Visibility_Polygon((VisiLibity::Point const &)*arg1,(VisiLibity::Polygon const &)*arg2,arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_VisibilityPolygon_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_VisibilityPolygon_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_VisiLibity__Visibility_Polygon);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_VisibilityPolygon__SWIG_4(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Point *arg1 = 0 ;
  VisiLibity::Polygon *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VisiLibity::Visibility_Polygon *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Point const &","VisiLibity::Visibility_Polygon", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Point const &","VisiLibity::Visibility_Polygon", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Point * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Polygon,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Polygon const &","VisiLibity::Visibility_Polygon", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Polygon const &","VisiLibity::Visibility_Polygon", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Polygon * >(argp2);
  result = (VisiLibity::Visibility_Polygon *)new VisiLibity::Visibility_Polygon((VisiLibity::Point const &)*arg1,(VisiLibity::Polygon const &)*arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_VisibilityPolygon(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_VisibilityPolygon__SWIG_0(nargs, args, self);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VisibilityPolygon__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VisibilityPolygon__SWIG_4(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_VisibilityPolygon__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_VisibilityPolygon__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "VisibilityPolygon.new", 
    "    VisibilityPolygon.new()\n"
    "    VisibilityPolygon.new(VisiLibity::Point const &observer, VisiLibity::Environment const &environment_temp, double epsilon)\n"
    "    VisibilityPolygon.new(VisiLibity::Point const &observer, VisiLibity::Environment const &environment_temp)\n"
    "    VisibilityPolygon.new(VisiLibity::Point const &observer, VisiLibity::Polygon const &polygon_temp, double epsilon)\n"
    "    VisibilityPolygon.new(VisiLibity::Point const &observer, VisiLibity::Polygon const &polygon_temp)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VisibilityPolygon_observer(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Visibility_Polygon *arg1 = (VisiLibity::Visibility_Polygon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VisiLibity::Point result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Visibility_Polygon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Visibility_Polygon const *","observer", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Visibility_Polygon * >(argp1);
  result = ((VisiLibity::Visibility_Polygon const *)arg1)->observer();
  vresult = SWIG_NewPointerObj((new VisiLibity::Point(static_cast< const VisiLibity::Point& >(result))), SWIGTYPE_p_VisiLibity__Point, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_VisiLibity_Visibility_Polygon(VisiLibity::Visibility_Polygon *arg1) {
    delete arg1;
}

swig_class SwigClassVisibilityGraph;

SWIGINTERN VALUE
_wrap_new_VisibilityGraph__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Visibility_Graph *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (VisiLibity::Visibility_Graph *)new VisiLibity::Visibility_Graph();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VisibilityGraph__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Visibility_Graph *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  VisiLibity::Visibility_Graph *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Visibility_Graph,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Visibility_Graph const &","VisiLibity::Visibility_Graph", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Visibility_Graph const &","VisiLibity::Visibility_Graph", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Visibility_Graph * >(argp1);
  result = (VisiLibity::Visibility_Graph *)new VisiLibity::Visibility_Graph((VisiLibity::Visibility_Graph const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VisibilityGraph__SWIG_2(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  VisiLibity::Visibility_Graph *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Environment,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment const &","VisiLibity::Visibility_Graph", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Environment const &","VisiLibity::Visibility_Graph", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","VisiLibity::Visibility_Graph", 2, argv[1] ));
  } 
  arg2 = static_cast< double >(val2);
  result = (VisiLibity::Visibility_Graph *)new VisiLibity::Visibility_Graph((VisiLibity::Environment const &)*arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VisibilityGraph__SWIG_3(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Environment *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  VisiLibity::Visibility_Graph *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Environment,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Environment const &","VisiLibity::Visibility_Graph", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Environment const &","VisiLibity::Visibility_Graph", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Environment * >(argp1);
  result = (VisiLibity::Visibility_Graph *)new VisiLibity::Visibility_Graph((VisiLibity::Environment const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VisibilityGraph__SWIG_4(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > arg1 ;
  VisiLibity::Environment *arg2 = 0 ;
  double arg3 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  VisiLibity::Visibility_Graph *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > > *ptr = (std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > > *)0;
    int res = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > const","VisiLibity::Visibility_Graph", 1, argv[0] )); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Environment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Environment const &","VisiLibity::Visibility_Graph", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Environment const &","VisiLibity::Visibility_Graph", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Environment * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","VisiLibity::Visibility_Graph", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  result = (VisiLibity::Visibility_Graph *)new VisiLibity::Visibility_Graph(arg1,(VisiLibity::Environment const &)*arg2,arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VisibilityGraph__SWIG_5(int argc, VALUE *argv, VALUE self) {
  std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > arg1 ;
  VisiLibity::Environment *arg2 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VisiLibity::Visibility_Graph *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > > *ptr = (std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > > *)0;
    int res = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > const","VisiLibity::Visibility_Graph", 1, argv[0] )); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Environment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Environment const &","VisiLibity::Visibility_Graph", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Environment const &","VisiLibity::Visibility_Graph", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Environment * >(argp2);
  result = (VisiLibity::Visibility_Graph *)new VisiLibity::Visibility_Graph(arg1,(VisiLibity::Environment const &)*arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_VisibilityGraph__SWIG_6(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Guards *arg1 = 0 ;
  VisiLibity::Environment *arg2 = 0 ;
  double arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  VisiLibity::Visibility_Graph *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Guards,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Guards const &","VisiLibity::Visibility_Graph", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Guards const &","VisiLibity::Visibility_Graph", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Guards * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Environment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Environment const &","VisiLibity::Visibility_Graph", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Environment const &","VisiLibity::Visibility_Graph", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Environment * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","VisiLibity::Visibility_Graph", 3, argv[2] ));
  } 
  arg3 = static_cast< double >(val3);
  result = (VisiLibity::Visibility_Graph *)new VisiLibity::Visibility_Graph((VisiLibity::Guards const &)*arg1,(VisiLibity::Environment const &)*arg2,arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_VisibilityGraph_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_VisibilityGraph_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_VisiLibity__Visibility_Graph);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_VisibilityGraph__SWIG_7(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Guards *arg1 = 0 ;
  VisiLibity::Environment *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VisiLibity::Visibility_Graph *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_VisiLibity__Guards,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Guards const &","VisiLibity::Visibility_Graph", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Guards const &","VisiLibity::Visibility_Graph", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< VisiLibity::Guards * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Environment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Environment const &","VisiLibity::Visibility_Graph", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Environment const &","VisiLibity::Visibility_Graph", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Environment * >(argp2);
  result = (VisiLibity::Visibility_Graph *)new VisiLibity::Visibility_Graph((VisiLibity::Guards const &)*arg1,(VisiLibity::Environment const &)*arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_VisibilityGraph(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_VisibilityGraph__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Visibility_Graph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VisibilityGraph__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VisibilityGraph__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_VisibilityGraph__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Guards, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VisibilityGraph__SWIG_7(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VisibilityGraph__SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Guards, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_VisibilityGraph__SWIG_6(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<VisiLibity::Point,std::allocator< VisiLibity::Point > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_VisibilityGraph__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "VisibilityGraph.new", 
    "    VisibilityGraph.new()\n"
    "    VisibilityGraph.new(VisiLibity::Visibility_Graph const &vg2)\n"
    "    VisibilityGraph.new(VisiLibity::Environment const &environment, double epsilon)\n"
    "    VisibilityGraph.new(VisiLibity::Environment const &environment)\n"
    "    VisibilityGraph.new(std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > const points, VisiLibity::Environment const &environment, double epsilon)\n"
    "    VisibilityGraph.new(std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > const points, VisiLibity::Environment const &environment)\n"
    "    VisibilityGraph.new(VisiLibity::Guards const &guards, VisiLibity::Environment const &environment, double epsilon)\n"
    "    VisibilityGraph.new(VisiLibity::Guards const &guards, VisiLibity::Environment const &environment)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VisibilityGraph_get__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Visibility_Graph *arg1 = (VisiLibity::Visibility_Graph *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Visibility_Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Visibility_Graph const *","operator ()", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Visibility_Graph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","operator ()", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","operator ()", 3, argv[1] ));
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","operator ()", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "unsigned int","operator ()", 5, argv[3] ));
  } 
  arg5 = static_cast< unsigned int >(val5);
  result = (bool)((VisiLibity::Visibility_Graph const *)arg1)->operator ()(arg2,arg3,arg4,arg5);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VisibilityGraph_get__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Visibility_Graph *arg1 = (VisiLibity::Visibility_Graph *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Visibility_Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Visibility_Graph const *","operator ()", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Visibility_Graph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","operator ()", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","operator ()", 3, argv[1] ));
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (bool)((VisiLibity::Visibility_Graph const *)arg1)->operator ()(arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VisibilityGraph_get(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Visibility_Graph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VisibilityGraph_get__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Visibility_Graph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_VisibilityGraph_get__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "VisibilityGraph.get", 
    "    bool VisibilityGraph.get(unsigned int i1, unsigned int j1, unsigned int i2, unsigned int j2)\n"
    "    bool VisibilityGraph.get(unsigned int k1, unsigned int k2)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VisibilityGraph_n(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Visibility_Graph *arg1 = (VisiLibity::Visibility_Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Visibility_Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Visibility_Graph const *","n", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Visibility_Graph * >(argp1);
  result = (unsigned int)((VisiLibity::Visibility_Graph const *)arg1)->n();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VisibilityGraph_set__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Visibility_Graph *arg1 = (VisiLibity::Visibility_Graph *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  bool *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Visibility_Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Visibility_Graph *","operator ()", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Visibility_Graph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","operator ()", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","operator ()", 3, argv[1] ));
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","operator ()", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "unsigned int","operator ()", 5, argv[3] ));
  } 
  arg5 = static_cast< unsigned int >(val5);
  result = (bool *) &(arg1)->operator ()(arg2,arg3,arg4,arg5);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bool, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VisibilityGraph_set__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VisiLibity::Visibility_Graph *arg1 = (VisiLibity::Visibility_Graph *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  bool *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VisiLibity__Visibility_Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VisiLibity::Visibility_Graph *","operator ()", 1, self )); 
  }
  arg1 = reinterpret_cast< VisiLibity::Visibility_Graph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","operator ()", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","operator ()", 3, argv[1] ));
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (bool *) &(arg1)->operator ()(arg2,arg3);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bool, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_VisibilityGraph_set(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Visibility_Graph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VisibilityGraph_set__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VisiLibity__Visibility_Graph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_VisibilityGraph_set__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "VisibilityGraph.set", 
    "    bool & VisibilityGraph.set(unsigned int i1, unsigned int j1, unsigned int i2, unsigned int j2)\n"
    "    bool & VisibilityGraph.set(unsigned int k1, unsigned int k2)\n");
  
  return Qnil;
}


SWIGINTERN void
free_VisiLibity_Visibility_Graph(VisiLibity::Visibility_Graph *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap___lshift____SWIG_8(int argc, VALUE *argv, VALUE self) {
  std::ostream *arg1 = 0 ;
  VisiLibity::Visibility_Graph *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::ostream &","VisiLibity::operator <<", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::ostream &","VisiLibity::operator <<", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_VisiLibity__Visibility_Graph,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "VisiLibity::Visibility_Graph const &","VisiLibity::operator <<", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "VisiLibity::Visibility_Graph const &","VisiLibity::operator <<", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< VisiLibity::Visibility_Graph * >(argp2);
  result = (std::ostream *) &VisiLibity::operator <<(*arg1,(VisiLibity::Visibility_Graph const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap___lshift__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polar_Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Line_Segment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Angle, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polyline, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_4(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Polygon, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Environment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_6(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Guards, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_7(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VisiLibity__Visibility_Graph, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_8(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "__lshift__", 
    "    std::ostream & __lshift__(std::ostream &outs, VisiLibity::Point const &point_temp)\n"
    "    std::ostream & __lshift__(std::ostream &outs, VisiLibity::Line_Segment const &line_segment_temp)\n"
    "    std::ostream & __lshift__(std::ostream &outs, VisiLibity::Angle const &angle_temp)\n"
    "    std::ostream & __lshift__(std::ostream &outs, VisiLibity::Polar_Point const &polar_point_temp)\n"
    "    std::ostream & __lshift__(std::ostream &outs, VisiLibity::Polyline const &polyline_temp)\n"
    "    std::ostream & __lshift__(std::ostream &outs, VisiLibity::Polygon const &polygon_temp)\n"
    "    std::ostream & __lshift__(std::ostream &outs, VisiLibity::Environment const &environment_temp)\n"
    "    std::ostream & __lshift__(std::ostream &outs, VisiLibity::Guards const &guards)\n"
    "    std::ostream & __lshift__(std::ostream &outs, VisiLibity::Visibility_Graph const &visibility_graph)\n");
  
  return Qnil;
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_swig__IteratorTo_p_swig__ConstIterator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((swig::ConstIterator *)  ((swig::Iterator *) x));
}
static void *_p_VisiLibity__Visibility_PolygonTo_p_VisiLibity__Polygon(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VisiLibity::Polygon *)  ((VisiLibity::Visibility_Polygon *) x));
}
static void *_p_VisiLibity__Polar_PointTo_p_VisiLibity__Point(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VisiLibity::Point *)  ((VisiLibity::Polar_Point *) x));
}
static swig_type_info _swigt__p_VisiLibity__Angle = {"_p_VisiLibity__Angle", "VisiLibity::Angle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VisiLibity__Bounding_Box = {"_p_VisiLibity__Bounding_Box", "VisiLibity::Bounding_Box *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VisiLibity__Environment = {"_p_VisiLibity__Environment", "VisiLibity::Environment *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VisiLibity__Guards = {"_p_VisiLibity__Guards", "VisiLibity::Guards *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VisiLibity__Line_Segment = {"_p_VisiLibity__Line_Segment", "VisiLibity::Line_Segment *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VisiLibity__Point = {"_p_VisiLibity__Point", "VisiLibity::Point *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VisiLibity__Polar_Point = {"_p_VisiLibity__Polar_Point", "VisiLibity::Polar_Point *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VisiLibity__Polygon = {"_p_VisiLibity__Polygon", "VisiLibity::Polygon *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VisiLibity__Polyline = {"_p_VisiLibity__Polyline", "VisiLibity::Polyline *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VisiLibity__Ray = {"_p_VisiLibity__Ray", "VisiLibity::Ray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VisiLibity__Visibility_Graph = {"_p_VisiLibity__Visibility_Graph", "VisiLibity::Visibility_Graph *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VisiLibity__Visibility_Polygon = {"_p_VisiLibity__Visibility_Polygon", "VisiLibity::Visibility_Polygon *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **|VALUE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_VisiLibity__Line_Segment_std__allocatorT_VisiLibity__Line_Segment_t_t = {"_p_std__vectorT_VisiLibity__Line_Segment_std__allocatorT_VisiLibity__Line_Segment_t_t", "std::vector< VisiLibity::Line_Segment,std::allocator< VisiLibity::Line_Segment > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t = {"_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t", "std::vector< VisiLibity::Point,std::allocator< VisiLibity::Point > > *|std::vector< VisiLibity::Point > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__allocator_type = {"_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__allocator_type", "std::vector< VisiLibity::Point >::allocator_type *|std::allocator< VisiLibity::Point > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__value_type = {"_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__value_type", "std::vector< VisiLibity::Point >::value_type *|VisiLibity::Point *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t = {"_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t", "std::vector< VisiLibity::Polygon,std::allocator< VisiLibity::Polygon > > *|std::vector< VisiLibity::Polygon > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__allocator_type = {"_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__allocator_type", "std::vector< VisiLibity::Polygon >::allocator_type *|std::allocator< VisiLibity::Polygon > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__value_type = {"_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__value_type", "std::vector< VisiLibity::Polygon >::value_type *|VisiLibity::Polygon *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__ConstIterator = {"_p_swig__ConstIterator", "swig::ConstIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__GC_VALUE = {"_p_swig__GC_VALUE", "swig::GC_VALUE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__Iterator = {"_p_swig__Iterator", "swig::Iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_VisiLibity__Angle,
  &_swigt__p_VisiLibity__Bounding_Box,
  &_swigt__p_VisiLibity__Environment,
  &_swigt__p_VisiLibity__Guards,
  &_swigt__p_VisiLibity__Line_Segment,
  &_swigt__p_VisiLibity__Point,
  &_swigt__p_VisiLibity__Polar_Point,
  &_swigt__p_VisiLibity__Polygon,
  &_swigt__p_VisiLibity__Polyline,
  &_swigt__p_VisiLibity__Ray,
  &_swigt__p_VisiLibity__Visibility_Graph,
  &_swigt__p_VisiLibity__Visibility_Polygon,
  &_swigt__p_allocator_type,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_p_void,
  &_swigt__p_size_type,
  &_swigt__p_std__ostream,
  &_swigt__p_std__vectorT_VisiLibity__Line_Segment_std__allocatorT_VisiLibity__Line_Segment_t_t,
  &_swigt__p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t,
  &_swigt__p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__allocator_type,
  &_swigt__p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__value_type,
  &_swigt__p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t,
  &_swigt__p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__allocator_type,
  &_swigt__p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__value_type,
  &_swigt__p_swig__ConstIterator,
  &_swigt__p_swig__GC_VALUE,
  &_swigt__p_swig__Iterator,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_VisiLibity__Angle[] = {  {&_swigt__p_VisiLibity__Angle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VisiLibity__Bounding_Box[] = {  {&_swigt__p_VisiLibity__Bounding_Box, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VisiLibity__Environment[] = {  {&_swigt__p_VisiLibity__Environment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VisiLibity__Guards[] = {  {&_swigt__p_VisiLibity__Guards, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VisiLibity__Line_Segment[] = {  {&_swigt__p_VisiLibity__Line_Segment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VisiLibity__Point[] = {  {&_swigt__p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__value_type, 0, 0, 0},  {&_swigt__p_VisiLibity__Point, 0, 0, 0},  {&_swigt__p_VisiLibity__Polar_Point, _p_VisiLibity__Polar_PointTo_p_VisiLibity__Point, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VisiLibity__Polar_Point[] = {  {&_swigt__p_VisiLibity__Polar_Point, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VisiLibity__Polygon[] = {  {&_swigt__p_VisiLibity__Polygon, 0, 0, 0},  {&_swigt__p_VisiLibity__Visibility_Polygon, _p_VisiLibity__Visibility_PolygonTo_p_VisiLibity__Polygon, 0, 0},  {&_swigt__p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VisiLibity__Polyline[] = {  {&_swigt__p_VisiLibity__Polyline, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VisiLibity__Ray[] = {  {&_swigt__p_VisiLibity__Ray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VisiLibity__Visibility_Graph[] = {  {&_swigt__p_VisiLibity__Visibility_Graph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VisiLibity__Visibility_Polygon[] = {  {&_swigt__p_VisiLibity__Visibility_Polygon, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_VisiLibity__Line_Segment_std__allocatorT_VisiLibity__Line_Segment_t_t[] = {  {&_swigt__p_std__vectorT_VisiLibity__Line_Segment_std__allocatorT_VisiLibity__Line_Segment_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t[] = {  {&_swigt__p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__value_type[] = {  {&_swigt__p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__value_type, 0, 0, 0},  {&_swigt__p_VisiLibity__Point, 0, 0, 0},  {&_swigt__p_VisiLibity__Polar_Point, _p_VisiLibity__Polar_PointTo_p_VisiLibity__Point, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t[] = {  {&_swigt__p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__value_type[] = {  {&_swigt__p_VisiLibity__Polygon, 0, 0, 0},  {&_swigt__p_VisiLibity__Visibility_Polygon, 0, 0, 0},  {&_swigt__p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__ConstIterator[] = {  {&_swigt__p_swig__ConstIterator, 0, 0, 0},  {&_swigt__p_swig__Iterator, _p_swig__IteratorTo_p_swig__ConstIterator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__GC_VALUE[] = {  {&_swigt__p_swig__GC_VALUE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__Iterator[] = {  {&_swigt__p_swig__Iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_VisiLibity__Angle,
  _swigc__p_VisiLibity__Bounding_Box,
  _swigc__p_VisiLibity__Environment,
  _swigc__p_VisiLibity__Guards,
  _swigc__p_VisiLibity__Line_Segment,
  _swigc__p_VisiLibity__Point,
  _swigc__p_VisiLibity__Polar_Point,
  _swigc__p_VisiLibity__Polygon,
  _swigc__p_VisiLibity__Polyline,
  _swigc__p_VisiLibity__Ray,
  _swigc__p_VisiLibity__Visibility_Graph,
  _swigc__p_VisiLibity__Visibility_Polygon,
  _swigc__p_allocator_type,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_p_void,
  _swigc__p_size_type,
  _swigc__p_std__ostream,
  _swigc__p_std__vectorT_VisiLibity__Line_Segment_std__allocatorT_VisiLibity__Line_Segment_t_t,
  _swigc__p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t,
  _swigc__p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__allocator_type,
  _swigc__p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t__value_type,
  _swigc__p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t,
  _swigc__p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__allocator_type,
  _swigc__p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t__value_type,
  _swigc__p_swig__ConstIterator,
  _swigc__p_swig__GC_VALUE,
  _swigc__p_swig__Iterator,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/*

*/
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_VisiLibity(void) {
  size_t i;
  
  SWIG_InitRuntime();
  mVisiLibity = rb_define_module("VisiLibity");
  
  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }
  
  SWIG_RubyInitializeTrackings();
  
  SwigClassGC_VALUE.klass = rb_define_class_under(mVisiLibity, "GC_VALUE", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_swig__GC_VALUE, (void *) &SwigClassGC_VALUE);
  rb_undef_alloc_func(SwigClassGC_VALUE.klass);
  rb_define_method(SwigClassGC_VALUE.klass, "inspect", VALUEFUNC(_wrap_GC_VALUE_inspect), -1);
  rb_define_method(SwigClassGC_VALUE.klass, "to_s", VALUEFUNC(_wrap_GC_VALUE_to_s), -1);
  SwigClassGC_VALUE.mark = 0;
  SwigClassGC_VALUE.trackObjects = 0;
  
  swig::GC_VALUE::initialize();
  
  
  SwigClassConstIterator.klass = rb_define_class_under(mVisiLibity, "ConstIterator", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_swig__ConstIterator, (void *) &SwigClassConstIterator);
  rb_undef_alloc_func(SwigClassConstIterator.klass);
  rb_define_method(SwigClassConstIterator.klass, "value", VALUEFUNC(_wrap_ConstIterator_value), -1);
  rb_define_method(SwigClassConstIterator.klass, "dup", VALUEFUNC(_wrap_ConstIterator_dup), -1);
  rb_define_method(SwigClassConstIterator.klass, "inspect", VALUEFUNC(_wrap_ConstIterator_inspect), -1);
  rb_define_method(SwigClassConstIterator.klass, "to_s", VALUEFUNC(_wrap_ConstIterator_to_s), -1);
  rb_define_method(SwigClassConstIterator.klass, "next", VALUEFUNC(_wrap_ConstIterator_next), -1);
  rb_define_method(SwigClassConstIterator.klass, "previous", VALUEFUNC(_wrap_ConstIterator_previous), -1);
  rb_define_method(SwigClassConstIterator.klass, "==", VALUEFUNC(_wrap_ConstIterator___eq__), -1);
  rb_define_method(SwigClassConstIterator.klass, "+", VALUEFUNC(_wrap_ConstIterator___add__), -1);
  rb_define_method(SwigClassConstIterator.klass, "-", VALUEFUNC(_wrap_ConstIterator___sub__), -1);
  SwigClassConstIterator.mark = 0;
  SwigClassConstIterator.destroy = (void (*)(void *)) free_swig_ConstIterator;
  SwigClassConstIterator.trackObjects = 0;
  
  SwigClassIterator.klass = rb_define_class_under(mVisiLibity, "Iterator", ((swig_class *) SWIGTYPE_p_swig__ConstIterator->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_swig__Iterator, (void *) &SwigClassIterator);
  rb_undef_alloc_func(SwigClassIterator.klass);
  rb_define_method(SwigClassIterator.klass, "value=", VALUEFUNC(_wrap_Iterator_valuee___), -1);
  rb_define_method(SwigClassIterator.klass, "dup", VALUEFUNC(_wrap_Iterator_dup), -1);
  rb_define_method(SwigClassIterator.klass, "next", VALUEFUNC(_wrap_Iterator_next), -1);
  rb_define_method(SwigClassIterator.klass, "previous", VALUEFUNC(_wrap_Iterator_previous), -1);
  rb_define_method(SwigClassIterator.klass, "inspect", VALUEFUNC(_wrap_Iterator_inspect), -1);
  rb_define_method(SwigClassIterator.klass, "to_s", VALUEFUNC(_wrap_Iterator_to_s), -1);
  rb_define_method(SwigClassIterator.klass, "==", VALUEFUNC(_wrap_Iterator___eq__), -1);
  rb_define_method(SwigClassIterator.klass, "+", VALUEFUNC(_wrap_Iterator___add__), -1);
  rb_define_method(SwigClassIterator.klass, "-", VALUEFUNC(_wrap_Iterator___sub__), -1);
  SwigClassIterator.mark = 0;
  SwigClassIterator.destroy = (void (*)(void *)) free_swig_Iterator;
  SwigClassIterator.trackObjects = 0;
  
  SwigClassPointVector.klass = rb_define_class_under(mVisiLibity, "PointVector", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_VisiLibity__Point_std__allocatorT_VisiLibity__Point_t_t, (void *) &SwigClassPointVector);
  rb_include_module(SwigClassPointVector.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(SwigClassPointVector.klass, _wrap_PointVector_allocate);
  rb_define_method(SwigClassPointVector.klass, "initialize", VALUEFUNC(_wrap_new_PointVector), -1);
  rb_define_method(SwigClassPointVector.klass, "dup", VALUEFUNC(_wrap_PointVector_dup), -1);
  rb_define_method(SwigClassPointVector.klass, "inspect", VALUEFUNC(_wrap_PointVector_inspect), -1);
  rb_define_method(SwigClassPointVector.klass, "to_a", VALUEFUNC(_wrap_PointVector_to_a), -1);
  rb_define_method(SwigClassPointVector.klass, "to_s", VALUEFUNC(_wrap_PointVector_to_s), -1);
  rb_define_method(SwigClassPointVector.klass, "slice", VALUEFUNC(_wrap_PointVector_slice), -1);
  rb_define_method(SwigClassPointVector.klass, "each", VALUEFUNC(_wrap_PointVector_each), -1);
  rb_define_method(SwigClassPointVector.klass, "select", VALUEFUNC(_wrap_PointVector_select), -1);
  rb_define_method(SwigClassPointVector.klass, "reject!", VALUEFUNC(_wrap_PointVector_rejectN___), -1);
  rb_define_alias(SwigClassPointVector.klass, "delete_if", "reject!");
  rb_define_method(SwigClassPointVector.klass, "delete_at", VALUEFUNC(_wrap_PointVector_delete_at), -1);
  rb_define_method(SwigClassPointVector.klass, "__delete2__", VALUEFUNC(_wrap_PointVector___delete2__), -1);
  rb_define_method(SwigClassPointVector.klass, "pop", VALUEFUNC(_wrap_PointVector_pop), -1);
  rb_define_method(SwigClassPointVector.klass, "push", VALUEFUNC(_wrap_PointVector_push), -1);
  rb_define_alias(SwigClassPointVector.klass, "<<", "push");
  rb_define_method(SwigClassPointVector.klass, "reject", VALUEFUNC(_wrap_PointVector_reject), -1);
  rb_define_method(SwigClassPointVector.klass, "at", VALUEFUNC(_wrap_PointVector_at), -1);
  rb_define_method(SwigClassPointVector.klass, "[]", VALUEFUNC(_wrap_PointVector___getitem__), -1);
  rb_define_method(SwigClassPointVector.klass, "[]=", VALUEFUNC(_wrap_PointVector___setitem__), -1);
  rb_define_method(SwigClassPointVector.klass, "shift", VALUEFUNC(_wrap_PointVector_shift), -1);
  rb_define_method(SwigClassPointVector.klass, "unshift", VALUEFUNC(_wrap_PointVector_unshift), -1);
  rb_define_method(SwigClassPointVector.klass, "empty?", VALUEFUNC(_wrap_PointVector_emptyq___), -1);
  rb_define_method(SwigClassPointVector.klass, "size", VALUEFUNC(_wrap_PointVector_size), -1);
  rb_define_method(SwigClassPointVector.klass, "clear", VALUEFUNC(_wrap_PointVector_clear), -1);
  rb_define_method(SwigClassPointVector.klass, "swap", VALUEFUNC(_wrap_PointVector_swap), -1);
  rb_define_method(SwigClassPointVector.klass, "get_allocator", VALUEFUNC(_wrap_PointVector_get_allocator), -1);
  rb_define_method(SwigClassPointVector.klass, "begin", VALUEFUNC(_wrap_PointVector_begin), -1);
  rb_define_method(SwigClassPointVector.klass, "end", VALUEFUNC(_wrap_PointVector_end), -1);
  rb_define_method(SwigClassPointVector.klass, "rbegin", VALUEFUNC(_wrap_PointVector_rbegin), -1);
  rb_define_method(SwigClassPointVector.klass, "rend", VALUEFUNC(_wrap_PointVector_rend), -1);
  rb_define_method(SwigClassPointVector.klass, "erase", VALUEFUNC(_wrap_PointVector_erase), -1);
  rb_define_method(SwigClassPointVector.klass, "front", VALUEFUNC(_wrap_PointVector_front), -1);
  rb_define_method(SwigClassPointVector.klass, "back", VALUEFUNC(_wrap_PointVector_back), -1);
  rb_define_method(SwigClassPointVector.klass, "assign", VALUEFUNC(_wrap_PointVector_assign), -1);
  rb_define_method(SwigClassPointVector.klass, "resize", VALUEFUNC(_wrap_PointVector_resize), -1);
  rb_define_method(SwigClassPointVector.klass, "insert", VALUEFUNC(_wrap_PointVector_insert), -1);
  rb_define_method(SwigClassPointVector.klass, "reserve", VALUEFUNC(_wrap_PointVector_reserve), -1);
  rb_define_method(SwigClassPointVector.klass, "capacity", VALUEFUNC(_wrap_PointVector_capacity), -1);
  SwigClassPointVector.mark = 0;
  SwigClassPointVector.destroy = (void (*)(void *)) free_std_vector_Sl_VisiLibity_Point_Sg_;
  SwigClassPointVector.trackObjects = 0;
  
  SwigClassPolygonVector.klass = rb_define_class_under(mVisiLibity, "PolygonVector", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_VisiLibity__Polygon_std__allocatorT_VisiLibity__Polygon_t_t, (void *) &SwigClassPolygonVector);
  rb_include_module(SwigClassPolygonVector.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(SwigClassPolygonVector.klass, _wrap_PolygonVector_allocate);
  rb_define_method(SwigClassPolygonVector.klass, "initialize", VALUEFUNC(_wrap_new_PolygonVector), -1);
  rb_define_method(SwigClassPolygonVector.klass, "dup", VALUEFUNC(_wrap_PolygonVector_dup), -1);
  rb_define_method(SwigClassPolygonVector.klass, "inspect", VALUEFUNC(_wrap_PolygonVector_inspect), -1);
  rb_define_method(SwigClassPolygonVector.klass, "to_a", VALUEFUNC(_wrap_PolygonVector_to_a), -1);
  rb_define_method(SwigClassPolygonVector.klass, "to_s", VALUEFUNC(_wrap_PolygonVector_to_s), -1);
  rb_define_method(SwigClassPolygonVector.klass, "slice", VALUEFUNC(_wrap_PolygonVector_slice), -1);
  rb_define_method(SwigClassPolygonVector.klass, "each", VALUEFUNC(_wrap_PolygonVector_each), -1);
  rb_define_method(SwigClassPolygonVector.klass, "select", VALUEFUNC(_wrap_PolygonVector_select), -1);
  rb_define_method(SwigClassPolygonVector.klass, "reject!", VALUEFUNC(_wrap_PolygonVector_rejectN___), -1);
  rb_define_alias(SwigClassPolygonVector.klass, "delete_if", "reject!");
  rb_define_method(SwigClassPolygonVector.klass, "delete_at", VALUEFUNC(_wrap_PolygonVector_delete_at), -1);
  rb_define_method(SwigClassPolygonVector.klass, "__delete2__", VALUEFUNC(_wrap_PolygonVector___delete2__), -1);
  rb_define_method(SwigClassPolygonVector.klass, "pop", VALUEFUNC(_wrap_PolygonVector_pop), -1);
  rb_define_method(SwigClassPolygonVector.klass, "push", VALUEFUNC(_wrap_PolygonVector_push), -1);
  rb_define_alias(SwigClassPolygonVector.klass, "<<", "push");
  rb_define_method(SwigClassPolygonVector.klass, "reject", VALUEFUNC(_wrap_PolygonVector_reject), -1);
  rb_define_method(SwigClassPolygonVector.klass, "at", VALUEFUNC(_wrap_PolygonVector_at), -1);
  rb_define_method(SwigClassPolygonVector.klass, "[]", VALUEFUNC(_wrap_PolygonVector___getitem__), -1);
  rb_define_method(SwigClassPolygonVector.klass, "[]=", VALUEFUNC(_wrap_PolygonVector___setitem__), -1);
  rb_define_method(SwigClassPolygonVector.klass, "shift", VALUEFUNC(_wrap_PolygonVector_shift), -1);
  rb_define_method(SwigClassPolygonVector.klass, "unshift", VALUEFUNC(_wrap_PolygonVector_unshift), -1);
  rb_define_method(SwigClassPolygonVector.klass, "empty?", VALUEFUNC(_wrap_PolygonVector_emptyq___), -1);
  rb_define_method(SwigClassPolygonVector.klass, "size", VALUEFUNC(_wrap_PolygonVector_size), -1);
  rb_define_method(SwigClassPolygonVector.klass, "clear", VALUEFUNC(_wrap_PolygonVector_clear), -1);
  rb_define_method(SwigClassPolygonVector.klass, "swap", VALUEFUNC(_wrap_PolygonVector_swap), -1);
  rb_define_method(SwigClassPolygonVector.klass, "get_allocator", VALUEFUNC(_wrap_PolygonVector_get_allocator), -1);
  rb_define_method(SwigClassPolygonVector.klass, "begin", VALUEFUNC(_wrap_PolygonVector_begin), -1);
  rb_define_method(SwigClassPolygonVector.klass, "end", VALUEFUNC(_wrap_PolygonVector_end), -1);
  rb_define_method(SwigClassPolygonVector.klass, "rbegin", VALUEFUNC(_wrap_PolygonVector_rbegin), -1);
  rb_define_method(SwigClassPolygonVector.klass, "rend", VALUEFUNC(_wrap_PolygonVector_rend), -1);
  rb_define_method(SwigClassPolygonVector.klass, "erase", VALUEFUNC(_wrap_PolygonVector_erase), -1);
  rb_define_method(SwigClassPolygonVector.klass, "front", VALUEFUNC(_wrap_PolygonVector_front), -1);
  rb_define_method(SwigClassPolygonVector.klass, "back", VALUEFUNC(_wrap_PolygonVector_back), -1);
  rb_define_method(SwigClassPolygonVector.klass, "assign", VALUEFUNC(_wrap_PolygonVector_assign), -1);
  rb_define_method(SwigClassPolygonVector.klass, "resize", VALUEFUNC(_wrap_PolygonVector_resize), -1);
  rb_define_method(SwigClassPolygonVector.klass, "insert", VALUEFUNC(_wrap_PolygonVector_insert), -1);
  rb_define_method(SwigClassPolygonVector.klass, "reserve", VALUEFUNC(_wrap_PolygonVector_reserve), -1);
  rb_define_method(SwigClassPolygonVector.klass, "capacity", VALUEFUNC(_wrap_PolygonVector_capacity), -1);
  SwigClassPolygonVector.mark = 0;
  SwigClassPolygonVector.destroy = (void (*)(void *)) free_std_vector_Sl_VisiLibity_Polygon_Sg_;
  SwigClassPolygonVector.trackObjects = 0;
  rb_define_singleton_method(mVisiLibity, "FIOS_PRECISION", VALUEFUNC(_wrap_FIOS_PRECISION_get), 0);
  rb_define_module_function(mVisiLibity, "uniform_random_sample", VALUEFUNC(_wrap_uniform_random_sample), -1);
  
  SwigClassBoundingBox.klass = rb_define_class_under(mVisiLibity, "BoundingBox", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_VisiLibity__Bounding_Box, (void *) &SwigClassBoundingBox);
  rb_define_alloc_func(SwigClassBoundingBox.klass, _wrap_BoundingBox_allocate);
  rb_define_method(SwigClassBoundingBox.klass, "initialize", VALUEFUNC(_wrap_new_BoundingBox), -1);
  rb_define_method(SwigClassBoundingBox.klass, "x_min=", VALUEFUNC(_wrap_BoundingBox_x_min_set), -1);
  rb_define_method(SwigClassBoundingBox.klass, "x_min", VALUEFUNC(_wrap_BoundingBox_x_min_get), -1);
  rb_define_method(SwigClassBoundingBox.klass, "x_max=", VALUEFUNC(_wrap_BoundingBox_x_max_set), -1);
  rb_define_method(SwigClassBoundingBox.klass, "x_max", VALUEFUNC(_wrap_BoundingBox_x_max_get), -1);
  rb_define_method(SwigClassBoundingBox.klass, "y_min=", VALUEFUNC(_wrap_BoundingBox_y_min_set), -1);
  rb_define_method(SwigClassBoundingBox.klass, "y_min", VALUEFUNC(_wrap_BoundingBox_y_min_get), -1);
  rb_define_method(SwigClassBoundingBox.klass, "y_max=", VALUEFUNC(_wrap_BoundingBox_y_max_set), -1);
  rb_define_method(SwigClassBoundingBox.klass, "y_max", VALUEFUNC(_wrap_BoundingBox_y_max_get), -1);
  SwigClassBoundingBox.mark = 0;
  SwigClassBoundingBox.destroy = (void (*)(void *)) free_VisiLibity_Bounding_Box;
  SwigClassBoundingBox.trackObjects = 0;
  
  SwigClassPoint.klass = rb_define_class_under(mVisiLibity, "Point", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_VisiLibity__Point, (void *) &SwigClassPoint);
  rb_define_alloc_func(SwigClassPoint.klass, _wrap_Point_allocate);
  rb_define_method(SwigClassPoint.klass, "initialize", VALUEFUNC(_wrap_new_Point), -1);
  rb_define_method(SwigClassPoint.klass, "x", VALUEFUNC(_wrap_Point_x), -1);
  rb_define_method(SwigClassPoint.klass, "y", VALUEFUNC(_wrap_Point_y), -1);
  rb_define_method(SwigClassPoint.klass, "projection_onto", VALUEFUNC(_wrap_Point_projection_onto), -1);
  rb_define_method(SwigClassPoint.klass, "projection_onto_vertices_of", VALUEFUNC(_wrap_Point_projection_onto_vertices_of), -1);
  rb_define_method(SwigClassPoint.klass, "projection_onto_boundary_of", VALUEFUNC(_wrap_Point_projection_onto_boundary_of), -1);
  rb_define_method(SwigClassPoint.klass, "on_boundary_of", VALUEFUNC(_wrap_Point_on_boundary_of), -1);
  rb_define_method(SwigClassPoint.klass, "in_relative_interior_of", VALUEFUNC(_wrap_Point_in_relative_interior_of), -1);
  rb_define_method(SwigClassPoint.klass, "in", VALUEFUNC(_wrap_Point_in), -1);
  rb_define_method(SwigClassPoint.klass, "endpoint_of?", VALUEFUNC(_wrap_Point_endpoint_ofq___), -1);
  rb_define_method(SwigClassPoint.klass, "set_x", VALUEFUNC(_wrap_Point_set_x), -1);
  rb_define_method(SwigClassPoint.klass, "set_y", VALUEFUNC(_wrap_Point_set_y), -1);
  rb_define_method(SwigClassPoint.klass, "snap_to_vertices_of", VALUEFUNC(_wrap_Point_snap_to_vertices_of), -1);
  rb_define_method(SwigClassPoint.klass, "snap_to_boundary_of", VALUEFUNC(_wrap_Point_snap_to_boundary_of), -1);
  SwigClassPoint.mark = 0;
  SwigClassPoint.destroy = (void (*)(void *)) free_VisiLibity_Point;
  SwigClassPoint.trackObjects = 0;
  rb_define_module_function(mVisiLibity, "*", VALUEFUNC(_wrap___mul__), -1);
  rb_define_module_function(mVisiLibity, "cross", VALUEFUNC(_wrap_cross), -1);
  
  SwigClassLineSegment.klass = rb_define_class_under(mVisiLibity, "LineSegment", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_VisiLibity__Line_Segment, (void *) &SwigClassLineSegment);
  rb_define_alloc_func(SwigClassLineSegment.klass, _wrap_LineSegment_allocate);
  rb_define_method(SwigClassLineSegment.klass, "initialize", VALUEFUNC(_wrap_new_LineSegment), -1);
  rb_define_method(SwigClassLineSegment.klass, "first", VALUEFUNC(_wrap_LineSegment_first), -1);
  rb_define_method(SwigClassLineSegment.klass, "second", VALUEFUNC(_wrap_LineSegment_second), -1);
  rb_define_method(SwigClassLineSegment.klass, "size", VALUEFUNC(_wrap_LineSegment_size), -1);
  rb_define_method(SwigClassLineSegment.klass, "midpoint", VALUEFUNC(_wrap_LineSegment_midpoint), -1);
  rb_define_method(SwigClassLineSegment.klass, "length", VALUEFUNC(_wrap_LineSegment_length), -1);
  rb_define_method(SwigClassLineSegment.klass, "in_standard_form?", VALUEFUNC(_wrap_LineSegment_in_standard_formq___), -1);
  rb_define_method(SwigClassLineSegment.klass, "set_first", VALUEFUNC(_wrap_LineSegment_set_first), -1);
  rb_define_method(SwigClassLineSegment.klass, "set_second", VALUEFUNC(_wrap_LineSegment_set_second), -1);
  rb_define_method(SwigClassLineSegment.klass, "reverse", VALUEFUNC(_wrap_LineSegment_reverse), -1);
  rb_define_method(SwigClassLineSegment.klass, "enforce_standard_form", VALUEFUNC(_wrap_LineSegment_enforce_standard_form), -1);
  rb_define_method(SwigClassLineSegment.klass, "clear", VALUEFUNC(_wrap_LineSegment_clear), -1);
  SwigClassLineSegment.mark = 0;
  SwigClassLineSegment.destroy = (void (*)(void *)) free_VisiLibity_Line_Segment;
  SwigClassLineSegment.trackObjects = 0;
  rb_define_module_function(mVisiLibity, "distance", VALUEFUNC(_wrap_distance), -1);
  rb_define_module_function(mVisiLibity, "intersect", VALUEFUNC(_wrap_intersect), -1);
  rb_define_module_function(mVisiLibity, "intersect_proper", VALUEFUNC(_wrap_intersect_proper), -1);
  
  SwigClassAngle.klass = rb_define_class_under(mVisiLibity, "Angle", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_VisiLibity__Angle, (void *) &SwigClassAngle);
  rb_define_alloc_func(SwigClassAngle.klass, _wrap_Angle_allocate);
  rb_define_method(SwigClassAngle.klass, "initialize", VALUEFUNC(_wrap_new_Angle), -1);
  rb_define_method(SwigClassAngle.klass, "get", VALUEFUNC(_wrap_Angle_get), -1);
  rb_define_method(SwigClassAngle.klass, "set", VALUEFUNC(_wrap_Angle_set), -1);
  rb_define_method(SwigClassAngle.klass, "set_to_2pi", VALUEFUNC(_wrap_Angle_set_to_2pi), -1);
  rb_define_method(SwigClassAngle.klass, "randomize", VALUEFUNC(_wrap_Angle_randomize), -1);
  SwigClassAngle.mark = 0;
  SwigClassAngle.destroy = (void (*)(void *)) free_VisiLibity_Angle;
  SwigClassAngle.trackObjects = 0;
  rb_define_module_function(mVisiLibity, "+", VALUEFUNC(_wrap___add__), -1);
  rb_define_module_function(mVisiLibity, "-", VALUEFUNC(_wrap___sub__), -1);
  rb_define_module_function(mVisiLibity, "geodesic_distance", VALUEFUNC(_wrap_geodesic_distance), -1);
  rb_define_module_function(mVisiLibity, "geodesic_direction", VALUEFUNC(_wrap_geodesic_direction), -1);
  
  SwigClassPolarPoint.klass = rb_define_class_under(mVisiLibity, "PolarPoint", ((swig_class *) SWIGTYPE_p_VisiLibity__Point->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_VisiLibity__Polar_Point, (void *) &SwigClassPolarPoint);
  rb_define_alloc_func(SwigClassPolarPoint.klass, _wrap_PolarPoint_allocate);
  rb_define_method(SwigClassPolarPoint.klass, "initialize", VALUEFUNC(_wrap_new_PolarPoint), -1);
  rb_define_method(SwigClassPolarPoint.klass, "polar_origin", VALUEFUNC(_wrap_PolarPoint_polar_origin), -1);
  rb_define_method(SwigClassPolarPoint.klass, "range", VALUEFUNC(_wrap_PolarPoint_range), -1);
  rb_define_method(SwigClassPolarPoint.klass, "bearing", VALUEFUNC(_wrap_PolarPoint_bearing), -1);
  rb_define_method(SwigClassPolarPoint.klass, "set_polar_origin", VALUEFUNC(_wrap_PolarPoint_set_polar_origin), -1);
  rb_define_method(SwigClassPolarPoint.klass, "set_x", VALUEFUNC(_wrap_PolarPoint_set_x), -1);
  rb_define_method(SwigClassPolarPoint.klass, "set_y", VALUEFUNC(_wrap_PolarPoint_set_y), -1);
  rb_define_method(SwigClassPolarPoint.klass, "set_range", VALUEFUNC(_wrap_PolarPoint_set_range), -1);
  rb_define_method(SwigClassPolarPoint.klass, "set_bearing", VALUEFUNC(_wrap_PolarPoint_set_bearing), -1);
  rb_define_method(SwigClassPolarPoint.klass, "set_bearing_to_2pi", VALUEFUNC(_wrap_PolarPoint_set_bearing_to_2pi), -1);
  SwigClassPolarPoint.mark = 0;
  SwigClassPolarPoint.destroy = (void (*)(void *)) free_VisiLibity_Polar_Point;
  SwigClassPolarPoint.trackObjects = 0;
  rb_define_module_function(mVisiLibity, ">", VALUEFUNC(_wrap___gt__), -1);
  rb_define_module_function(mVisiLibity, "<", VALUEFUNC(_wrap___lt__), -1);
  rb_define_module_function(mVisiLibity, ">=", VALUEFUNC(_wrap___ge__), -1);
  rb_define_module_function(mVisiLibity, "<=", VALUEFUNC(_wrap___le__), -1);
  
  SwigClassRay.klass = rb_define_class_under(mVisiLibity, "Ray", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_VisiLibity__Ray, (void *) &SwigClassRay);
  rb_define_alloc_func(SwigClassRay.klass, _wrap_Ray_allocate);
  rb_define_method(SwigClassRay.klass, "initialize", VALUEFUNC(_wrap_new_Ray), -1);
  rb_define_method(SwigClassRay.klass, "base_point", VALUEFUNC(_wrap_Ray_base_point), -1);
  rb_define_method(SwigClassRay.klass, "bearing", VALUEFUNC(_wrap_Ray_bearing), -1);
  rb_define_method(SwigClassRay.klass, "set_base_point", VALUEFUNC(_wrap_Ray_set_base_point), -1);
  rb_define_method(SwigClassRay.klass, "set_bearing", VALUEFUNC(_wrap_Ray_set_bearing), -1);
  SwigClassRay.mark = 0;
  SwigClassRay.destroy = (void (*)(void *)) free_VisiLibity_Ray;
  SwigClassRay.trackObjects = 0;
  rb_define_module_function(mVisiLibity, "intersection", VALUEFUNC(_wrap_intersection), -1);
  
  SwigClassPolyline.klass = rb_define_class_under(mVisiLibity, "Polyline", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_VisiLibity__Polyline, (void *) &SwigClassPolyline);
  rb_define_alloc_func(SwigClassPolyline.klass, _wrap_Polyline_allocate);
  rb_define_method(SwigClassPolyline.klass, "initialize", VALUEFUNC(_wrap_new_Polyline), -1);
  rb_define_method(SwigClassPolyline.klass, "size", VALUEFUNC(_wrap_Polyline_size), -1);
  rb_define_method(SwigClassPolyline.klass, "length", VALUEFUNC(_wrap_Polyline_length), -1);
  rb_define_method(SwigClassPolyline.klass, "diameter", VALUEFUNC(_wrap_Polyline_diameter), -1);
  rb_define_method(SwigClassPolyline.klass, "bbox", VALUEFUNC(_wrap_Polyline_bbox), -1);
  rb_define_method(SwigClassPolyline.klass, "index", VALUEFUNC(_wrap_Polyline_index), -1);
  rb_define_method(SwigClassPolyline.klass, "clear", VALUEFUNC(_wrap_Polyline_clear), -1);
  rb_define_method(SwigClassPolyline.klass, "push_back", VALUEFUNC(_wrap_Polyline_push_back), -1);
  rb_define_method(SwigClassPolyline.klass, "pop_back", VALUEFUNC(_wrap_Polyline_pop_back), -1);
  rb_define_method(SwigClassPolyline.klass, "set_vertices", VALUEFUNC(_wrap_Polyline_set_vertices), -1);
  rb_define_method(SwigClassPolyline.klass, "eliminate_redundant_vertices", VALUEFUNC(_wrap_Polyline_eliminate_redundant_vertices), -1);
  rb_define_method(SwigClassPolyline.klass, "reverse", VALUEFUNC(_wrap_Polyline_reverse), -1);
  rb_define_method(SwigClassPolyline.klass, "append", VALUEFUNC(_wrap_Polyline_append), -1);
  SwigClassPolyline.mark = 0;
  SwigClassPolyline.destroy = (void (*)(void *)) free_VisiLibity_Polyline;
  SwigClassPolyline.trackObjects = 0;
  
  SwigClassPolygon.klass = rb_define_class_under(mVisiLibity, "Polygon", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_VisiLibity__Polygon, (void *) &SwigClassPolygon);
  rb_define_alloc_func(SwigClassPolygon.klass, _wrap_Polygon_allocate);
  rb_define_method(SwigClassPolygon.klass, "initialize", VALUEFUNC(_wrap_new_Polygon), -1);
  rb_define_method(SwigClassPolygon.klass, "n", VALUEFUNC(_wrap_Polygon_n), -1);
  rb_define_method(SwigClassPolygon.klass, "r", VALUEFUNC(_wrap_Polygon_r), -1);
  rb_define_method(SwigClassPolygon.klass, "simple?", VALUEFUNC(_wrap_Polygon_simpleq___), -1);
  rb_define_method(SwigClassPolygon.klass, "in_standard_form?", VALUEFUNC(_wrap_Polygon_in_standard_formq___), -1);
  rb_define_method(SwigClassPolygon.klass, "boundary_length", VALUEFUNC(_wrap_Polygon_boundary_length), -1);
  rb_define_method(SwigClassPolygon.klass, "area", VALUEFUNC(_wrap_Polygon_area), -1);
  rb_define_method(SwigClassPolygon.klass, "centroid", VALUEFUNC(_wrap_Polygon_centroid), -1);
  rb_define_method(SwigClassPolygon.klass, "diameter", VALUEFUNC(_wrap_Polygon_diameter), -1);
  rb_define_method(SwigClassPolygon.klass, "bbox", VALUEFUNC(_wrap_Polygon_bbox), -1);
  rb_define_method(SwigClassPolygon.klass, "random_points", VALUEFUNC(_wrap_Polygon_random_points), -1);
  rb_define_method(SwigClassPolygon.klass, "write_to_file", VALUEFUNC(_wrap_Polygon_write_to_file), -1);
  rb_define_method(SwigClassPolygon.klass, "index", VALUEFUNC(_wrap_Polygon_index), -1);
  rb_define_method(SwigClassPolygon.klass, "set_vertices", VALUEFUNC(_wrap_Polygon_set_vertices), -1);
  rb_define_method(SwigClassPolygon.klass, "push_back", VALUEFUNC(_wrap_Polygon_push_back), -1);
  rb_define_method(SwigClassPolygon.klass, "clear", VALUEFUNC(_wrap_Polygon_clear), -1);
  rb_define_method(SwigClassPolygon.klass, "enforce_standard_form", VALUEFUNC(_wrap_Polygon_enforce_standard_form), -1);
  rb_define_method(SwigClassPolygon.klass, "eliminate_redundant_vertices", VALUEFUNC(_wrap_Polygon_eliminate_redundant_vertices), -1);
  rb_define_method(SwigClassPolygon.klass, "reverse", VALUEFUNC(_wrap_Polygon_reverse), -1);
  SwigClassPolygon.mark = 0;
  SwigClassPolygon.destroy = (void (*)(void *)) free_VisiLibity_Polygon;
  SwigClassPolygon.trackObjects = 0;
  rb_define_module_function(mVisiLibity, "==", VALUEFUNC(_wrap___eq__), -1);
  rb_define_module_function(mVisiLibity, "equivalent", VALUEFUNC(_wrap_equivalent), -1);
  rb_define_module_function(mVisiLibity, "boundary_distance", VALUEFUNC(_wrap_boundary_distance), -1);
  
  SwigClassEnvironment.klass = rb_define_class_under(mVisiLibity, "Environment", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_VisiLibity__Environment, (void *) &SwigClassEnvironment);
  rb_define_alloc_func(SwigClassEnvironment.klass, _wrap_Environment_allocate);
  rb_define_method(SwigClassEnvironment.klass, "initialize", VALUEFUNC(_wrap_new_Environment), -1);
  rb_define_method(SwigClassEnvironment.klass, "h", VALUEFUNC(_wrap_Environment_h), -1);
  rb_define_method(SwigClassEnvironment.klass, "n", VALUEFUNC(_wrap_Environment_n), -1);
  rb_define_method(SwigClassEnvironment.klass, "r", VALUEFUNC(_wrap_Environment_r), -1);
  rb_define_method(SwigClassEnvironment.klass, "in_standard_form?", VALUEFUNC(_wrap_Environment_in_standard_formq___), -1);
  rb_define_method(SwigClassEnvironment.klass, "valid?", VALUEFUNC(_wrap_Environment_validq___), -1);
  rb_define_method(SwigClassEnvironment.klass, "boundary_length", VALUEFUNC(_wrap_Environment_boundary_length), -1);
  rb_define_method(SwigClassEnvironment.klass, "area", VALUEFUNC(_wrap_Environment_area), -1);
  rb_define_method(SwigClassEnvironment.klass, "diameter", VALUEFUNC(_wrap_Environment_diameter), -1);
  rb_define_method(SwigClassEnvironment.klass, "bbox", VALUEFUNC(_wrap_Environment_bbox), -1);
  rb_define_method(SwigClassEnvironment.klass, "random_points", VALUEFUNC(_wrap_Environment_random_points), -1);
  rb_define_method(SwigClassEnvironment.klass, "shortest_path", VALUEFUNC(_wrap_Environment_shortest_path), -1);
  rb_define_method(SwigClassEnvironment.klass, "compute_partition_cells", VALUEFUNC(_wrap_Environment_compute_partition_cells), -1);
  rb_define_method(SwigClassEnvironment.klass, "write_to_file", VALUEFUNC(_wrap_Environment_write_to_file), -1);
  rb_define_method(SwigClassEnvironment.klass, "index", VALUEFUNC(_wrap_Environment_index), -1);
  rb_define_method(SwigClassEnvironment.klass, "call", VALUEFUNC(_wrap_Environment___call__), -1);
  rb_define_method(SwigClassEnvironment.klass, "set_outer_boundary", VALUEFUNC(_wrap_Environment_set_outer_boundary), -1);
  rb_define_method(SwigClassEnvironment.klass, "add_hole", VALUEFUNC(_wrap_Environment_add_hole), -1);
  rb_define_method(SwigClassEnvironment.klass, "enforce_standard_form", VALUEFUNC(_wrap_Environment_enforce_standard_form), -1);
  rb_define_method(SwigClassEnvironment.klass, "eliminate_redundant_vertices", VALUEFUNC(_wrap_Environment_eliminate_redundant_vertices), -1);
  rb_define_method(SwigClassEnvironment.klass, "reverse_holes", VALUEFUNC(_wrap_Environment_reverse_holes), -1);
  SwigClassEnvironment.mark = 0;
  SwigClassEnvironment.destroy = (void (*)(void *)) free_VisiLibity_Environment;
  SwigClassEnvironment.trackObjects = 0;
  
  SwigClassGuards.klass = rb_define_class_under(mVisiLibity, "Guards", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_VisiLibity__Guards, (void *) &SwigClassGuards);
  rb_define_alloc_func(SwigClassGuards.klass, _wrap_Guards_allocate);
  rb_define_method(SwigClassGuards.klass, "initialize", VALUEFUNC(_wrap_new_Guards), -1);
  rb_define_method(SwigClassGuards.klass, "n", VALUEFUNC(_wrap_Guards_n), -1);
  rb_define_method(SwigClassGuards.klass, "are_lex_ordered", VALUEFUNC(_wrap_Guards_are_lex_ordered), -1);
  rb_define_method(SwigClassGuards.klass, "noncolocated", VALUEFUNC(_wrap_Guards_noncolocated), -1);
  rb_define_method(SwigClassGuards.klass, "in", VALUEFUNC(_wrap_Guards_in), -1);
  rb_define_method(SwigClassGuards.klass, "diameter", VALUEFUNC(_wrap_Guards_diameter), -1);
  rb_define_method(SwigClassGuards.klass, "bbox", VALUEFUNC(_wrap_Guards_bbox), -1);
  rb_define_method(SwigClassGuards.klass, "write_to_file", VALUEFUNC(_wrap_Guards_write_to_file), -1);
  rb_define_method(SwigClassGuards.klass, "index", VALUEFUNC(_wrap_Guards_index), -1);
  rb_define_method(SwigClassGuards.klass, "push_back", VALUEFUNC(_wrap_Guards_push_back), -1);
  rb_define_method(SwigClassGuards.klass, "set_positions", VALUEFUNC(_wrap_Guards_set_positions), -1);
  rb_define_method(SwigClassGuards.klass, "enforce_lex_order", VALUEFUNC(_wrap_Guards_enforce_lex_order), -1);
  rb_define_method(SwigClassGuards.klass, "reverse", VALUEFUNC(_wrap_Guards_reverse), -1);
  rb_define_method(SwigClassGuards.klass, "snap_to_vertices_of", VALUEFUNC(_wrap_Guards_snap_to_vertices_of), -1);
  rb_define_method(SwigClassGuards.klass, "snap_to_boundary_of", VALUEFUNC(_wrap_Guards_snap_to_boundary_of), -1);
  SwigClassGuards.mark = 0;
  SwigClassGuards.destroy = (void (*)(void *)) free_VisiLibity_Guards;
  SwigClassGuards.trackObjects = 0;
  
  SwigClassVisibilityPolygon.klass = rb_define_class_under(mVisiLibity, "VisibilityPolygon", ((swig_class *) SWIGTYPE_p_VisiLibity__Polygon->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_VisiLibity__Visibility_Polygon, (void *) &SwigClassVisibilityPolygon);
  rb_define_alloc_func(SwigClassVisibilityPolygon.klass, _wrap_VisibilityPolygon_allocate);
  rb_define_method(SwigClassVisibilityPolygon.klass, "initialize", VALUEFUNC(_wrap_new_VisibilityPolygon), -1);
  rb_define_method(SwigClassVisibilityPolygon.klass, "observer", VALUEFUNC(_wrap_VisibilityPolygon_observer), -1);
  SwigClassVisibilityPolygon.mark = 0;
  SwigClassVisibilityPolygon.destroy = (void (*)(void *)) free_VisiLibity_Visibility_Polygon;
  SwigClassVisibilityPolygon.trackObjects = 0;
  
  SwigClassVisibilityGraph.klass = rb_define_class_under(mVisiLibity, "VisibilityGraph", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_VisiLibity__Visibility_Graph, (void *) &SwigClassVisibilityGraph);
  rb_define_alloc_func(SwigClassVisibilityGraph.klass, _wrap_VisibilityGraph_allocate);
  rb_define_method(SwigClassVisibilityGraph.klass, "initialize", VALUEFUNC(_wrap_new_VisibilityGraph), -1);
  rb_define_method(SwigClassVisibilityGraph.klass, "get", VALUEFUNC(_wrap_VisibilityGraph_get), -1);
  rb_define_method(SwigClassVisibilityGraph.klass, "n", VALUEFUNC(_wrap_VisibilityGraph_n), -1);
  rb_define_method(SwigClassVisibilityGraph.klass, "set", VALUEFUNC(_wrap_VisibilityGraph_set), -1);
  SwigClassVisibilityGraph.mark = 0;
  SwigClassVisibilityGraph.destroy = (void (*)(void *)) free_VisiLibity_Visibility_Graph;
  SwigClassVisibilityGraph.trackObjects = 0;
  rb_define_module_function(mVisiLibity, "<<", VALUEFUNC(_wrap___lshift__), -1);
}

